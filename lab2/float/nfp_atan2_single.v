// -------------------------------------------------------------
// 
// File Name: D:\Short\ApaSpeed\Laba2\hdl_float\model_float\nfp_atan2_single.v
// Created: 2022-12-25 04:21:53
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_atan2_single
// Source Path: model_float/Subsystem/nfp_atan2_single
// Hierarchy Level: 1
// 
// {Latency Strategy = "Max", Denormal Handling = "off"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_atan2_single
          (i_CLK,
           i_RST_N,
           enb,
           nfp_in1,
           nfp_in2,
           nfp_out);


  input   i_CLK;
  input   i_RST_N;
  input   enb;
  input   [31:0] nfp_in1;  // ufix32
  input   [31:0] nfp_in2;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire X_S;  // ufix1
  wire [7:0] X_E;  // ufix8
  wire [22:0] X_M;  // ufix23
  reg [7:0] Delay9_out1;  // ufix8
  wire Constant6_out1;
  wire Constant_out1;
  wire Switch5_out1;
  reg [22:0] Delay8_out1;  // ufix23
  wire [23:0] Bit_Concat_out1;  // ufix24
  reg [23:0] Delay3_out1;  // ufix24
  reg [23:0] Delay2_out1;  // ufix24
  wire [23:0] Data_Type_Conversion_out1;  // ufix24_En23
  wire x_m_0_out1;  // ufix1
  reg  Delay16_out1;  // ufix1
  wire Y_S;  // ufix1
  wire [7:0] Y_E;  // ufix8
  wire [22:0] Y_M;  // ufix23
  reg [7:0] Delay12_out1;  // ufix8
  wire Constant6_out1_1;
  wire Constant_out1_1;
  wire Switch5_out1_1;
  reg [22:0] Delay11_out1;  // ufix23
  wire [23:0] Bit_Concat_out1_1;  // ufix24
  reg [23:0] Delay3_out1_1;  // ufix24
  reg [23:0] Delay2_out1_1;  // ufix24
  wire [23:0] Data_Type_Conversion_out1_1;  // ufix24_En23
  wire y_m_0_out1;  // ufix1
  reg  Delay17_out1;  // ufix1
  wire x_0_out1;  // ufix1
  reg  [0:36] Delay15_reg;  // ufix1 [37]
  wire [0:36] Delay15_reg_next;  // ufix1 [37]
  wire Delay15_out1;  // ufix1
  reg  [0:2] Delay3_reg;  // ufix1 [3]
  wire [0:2] Delay3_reg_next;  // ufix1 [3]
  wire Delay3_out1_2;  // ufix1
  reg  Delay3_out1_3;  // ufix1
  reg  [0:36] reduced_reg;  // ufix1 [37]
  wire [0:36] reduced_reg_next;  // ufix1 [37]
  wire Delay3_out1_4;  // ufix1
  wire y_m_0_out1_1;  // ufix1
  reg  Delay11_out1_1;  // ufix1
  wire x_m_0_out1_1;  // ufix1
  reg  Delay12_out1_1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  reg  [0:3] Delay13_reg;  // ufix1 [4]
  wire [0:3] Delay13_reg_next;  // ufix1 [4]
  wire Delay13_out1;  // ufix1
  wire sign_0_out1;  // ufix1
  wire Switch_out1;  // ufix1
  reg  [0:25] Delay6_reg;  // ufix1 [26]
  wire [0:25] Delay6_reg_next;  // ufix1 [26]
  wire Delay6_out1;  // ufix1
  reg  [0:3] Delay10_reg;  // ufix1 [4]
  wire [0:3] Delay10_reg_next;  // ufix1 [4]
  wire Delay10_out1;  // ufix1
  wire Logical_Operator1_out1;  // ufix1
  reg  [0:6] Delay4_reg;  // ufix1 [7]
  wire [0:6] Delay4_reg_next;  // ufix1 [7]
  wire Delay4_out1;  // ufix1
  wire y_m_x_m_relop1;
  wire [7:0] Constant4_out1;  // uint8
  wire signed [8:0] Constant4_out1_dtc;  // sfix9
  wire [7:0] Constant3_out1;  // uint8
  wire signed [8:0] Constant3_out1_dtc;  // sfix9
  wire signed [8:0] Switch1_out1;  // sfix9
  wire signed [31:0] Sum_sub_temp;  // sfix32
  wire signed [31:0] Sum_1;  // sfix32
  wire signed [31:0] Sum_2;  // sfix32
  wire signed [8:0] Sum_out1;  // sfix9
  reg signed [8:0] Delay1_out1;  // sfix9
  reg signed [8:0] Delay4_out1_1;  // sfix9
  wire [7:0] Constant4_out1_1;  // uint8
  wire signed [8:0] Constant4_out1_dtc_1;  // sfix9
  wire [7:0] Constant3_out1_1;  // uint8
  wire signed [8:0] Constant3_out1_dtc_1;  // sfix9
  wire signed [8:0] Switch1_out1_1;  // sfix9
  wire signed [31:0] Sum_sub_temp_1;  // sfix32
  wire signed [31:0] Sum_4;  // sfix32
  wire signed [31:0] Sum_5;  // sfix32
  wire signed [8:0] Sum_out1_1;  // sfix9
  reg signed [8:0] Delay1_out1_1;  // sfix9
  reg signed [8:0] Delay4_out1_2;  // sfix9
  wire y_exp_x_exp_relop1;
  wire Logical_Operator_out1_1;  // ufix1
  wire y_exp_x_exp_relop1_1;
  wire Logical_Operator1_out1_1;  // ufix1
  wire [23:0] if_swap3_out1;  // ufix24_En23
  reg [23:0] Delay4_reg_1 [0:13];  // ufix24 [14]
  wire [23:0] Delay4_reg_next_1 [0:13];  // ufix24_En23 [14]
  wire [23:0] Delay4_out1_3;  // ufix24_En23
  reg [23:0] Delay2_reg [0:1];  // ufix24 [2]
  wire [23:0] Delay2_reg_next [0:1];  // ufix24_En23 [2]
  wire [23:0] Delay2_out1_2;  // ufix24_En23
  wire y_m_0_out1_2;  // ufix1
  wire alpha1_out1;  // ufix1
  wire [23:0] if_swap1_out1;  // ufix24_En23
  wire [4:0] BitSlice_out1;  // ufix5
  wire [7:0] DTC_out1;  // ufix8
  wire signed [26:0] coeffs_table_out1 [0:31];  // sfix27_En25 [32]
  wire signed [26:0] coeffs_table_domain_out1;  // sfix27_En25
  reg signed [26:0] Delay3_out1_5;  // sfix27_En25
  wire signed [26:0] DTC1_out1;  // sfix27_En25
  reg signed [26:0] Delay4_out1_4;  // sfix27_En25
  wire signed [53:0] res_x_mul_temp;  // sfix54_En50
  wire signed [26:0] res_x_out1;  // sfix27_En25
  reg signed [26:0] Delay5_reg [0:1];  // sfix27 [2]
  wire signed [26:0] Delay5_reg_next [0:1];  // sfix27_En25 [2]
  wire signed [26:0] Delay5_out1;  // sfix27_En25
  reg [7:0] Delay1_out1_2;  // ufix8
  wire signed [26:0] coeffs_table1_out1 [0:31];  // sfix27_En25 [32]
  wire signed [26:0] coeffs_table_domain_1_out1;  // sfix27_En25
  reg signed [26:0] Delay6_reg_1 [0:1];  // sfix27 [2]
  wire signed [26:0] Delay6_reg_next_1 [0:1];  // sfix27_En25 [2]
  wire signed [26:0] Delay6_out1_1;  // sfix27_En25
  wire signed [31:0] res_x_coeffs_2_1_add_cast;  // sfix32_En25
  wire signed [31:0] res_x_coeffs_2_1_add_cast_1;  // sfix32_En25
  wire signed [31:0] res_x_coeffs_2_1_add_temp;  // sfix32_En25
  wire signed [26:0] res_x_coeffs_2_1_out1;  // sfix27_En26
  reg signed [26:0] Delay8_out1_1;  // sfix27_En26
  reg signed [26:0] Delay13_reg_1 [0:2];  // sfix27 [3]
  wire signed [26:0] Delay13_reg_next_1 [0:2];  // sfix27_En26 [3]
  wire signed [26:0] Delay13_out1_1;  // sfix27_En26
  wire [1:0] fi_2_0_2_0_fm_out1;  // ufix2
  reg signed [26:0] Delay7_reg [0:1];  // sfix27 [2]
  wire signed [26:0] Delay7_reg_next [0:1];  // sfix27_En25 [2]
  wire signed [26:0] Delay7_out1;  // sfix27_En25
  wire [26:0] DTC5_out1;  // ufix27_En26
  reg [26:0] Delay9_out1_1;  // ufix27_En26
  wire signed [27:0] res_d_cast;  // sfix28_En26
  wire signed [54:0] res_d_mul_temp;  // sfix55_En52
  wire signed [53:0] res_d_cast_1;  // sfix54_En52
  wire [26:0] res_d_out1;  // ufix27_En26
  reg [26:0] Delay10_reg_1 [0:1];  // ufix27 [2]
  wire [26:0] Delay10_reg_next_1 [0:1];  // ufix27_En26 [2]
  wire [26:0] Delay10_out1_1;  // ufix27_En26
  wire signed [31:0] fi_2_0_2_0_fm_res_d_sub_cast;  // sfix32_En26
  wire signed [31:0] fi_2_0_2_0_fm_res_d_sub_cast_1;  // sfix32_En26
  wire signed [31:0] fi_2_0_2_0_fm_res_d_sub_temp;  // sfix32_En26
  wire [26:0] fi_2_0_2_0_fm_res_d_out1;  // ufix27_En26
  reg [26:0] Delay14_out1;  // ufix27_En26
  wire signed [27:0] res_fi_2_0_2_0_fm_res_cast;  // sfix28_En26
  wire signed [54:0] res_fi_2_0_2_0_fm_res_mul_temp;  // sfix55_En52
  wire signed [53:0] res_fi_2_0_2_0_fm_res_cast_1;  // sfix54_En52
  wire [26:0] res_fi_2_0_2_0_fm_res_out1;  // ufix27_En26
  reg [26:0] Delay12_reg [0:1];  // ufix27 [2]
  wire [26:0] Delay12_reg_next [0:1];  // ufix27_En26 [2]
  wire [26:0] Delay12_out1_2;  // ufix27_En26
  wire [27:0] Abs_y;  // ufix28_En26
  wire [26:0] Abs_out1;  // ufix27_En26
  wire [26:0] Data_Type_Conversion_out1_2;  // ufix27
  reg [26:0] Delay5_reg_1 [0:1];  // ufix27 [2]
  wire [26:0] Delay5_reg_next_1 [0:1];  // ufix27 [2]
  wire [26:0] Delay5_out1_1;  // ufix27
  wire Bit_Slice32_out1;  // ufix1
  wire [4:0] Constant32_out1;  // ufix5
  wire Bit_Slice33_out1;  // ufix1
  wire [4:0] Constant33_out1;  // ufix5
  wire [4:0] Switch32_out1;  // ufix5
  wire Bit_Slice34_out1;  // ufix1
  wire [4:0] Constant34_out1;  // ufix5
  wire [4:0] Switch33_out1;  // ufix5
  wire [4:0] Constant35_out1;  // ufix5
  wire [4:0] Switch34_out1;  // ufix5
  reg [4:0] Delay3_out1_6;  // ufix5
  wire Compare_To_Constant3_out1;  // ufix1
  wire Bit_Slice25_out1;  // ufix1
  wire [4:0] Constant3_out1_2;  // ufix5
  wire Bit_Slice24_out1;  // ufix1
  wire [4:0] Constant2_out1;  // ufix5
  wire [4:0] Switch2_out1;  // ufix5
  wire Bit_Slice27_out1;  // ufix1
  wire [4:0] Constant1_out1;  // ufix5
  wire [4:0] Switch1_out1_2;  // ufix5
  wire Bit_Slice15_out1;  // ufix1
  wire [4:0] Constant124_out1;  // ufix5
  wire [4:0] Switch116_out1;  // ufix5
  wire Bit_Slice16_out1;  // ufix1
  wire [4:0] Constant28_out1;  // ufix5
  wire [4:0] Switch17_out1;  // ufix5
  wire Bit_Slice17_out1;  // ufix1
  wire [4:0] Constant26_out1;  // ufix5
  wire [4:0] Switch18_out1;  // ufix5
  wire Bit_Slice28_out1;  // ufix1
  wire [4:0] Constant27_out1;  // ufix5
  wire [4:0] Switch19_out1;  // ufix5
  wire Bit_Slice29_out1;  // ufix1
  wire [4:0] Constant29_out1;  // ufix5
  wire [4:0] Switch28_out1;  // ufix5
  wire [4:0] Constant30_out1;  // ufix5
  wire [4:0] Switch29_out1;  // ufix5
  reg [4:0] Delay5_out1_2;  // ufix5
  wire [4:0] Switch3_out1;  // ufix5
  wire Compare_To_Constant5_out1;  // ufix1
  wire Bit_Slice29_out1_1;  // ufix1
  wire [4:0] Constant29_out1_1;  // ufix5
  wire Bit_Slice30_out1;  // ufix1
  wire [4:0] Constant30_out1_1;  // ufix5
  wire [4:0] Switch29_out1_1;  // ufix5
  wire Bit_Slice31_out1;  // ufix1
  wire [4:0] Constant31_out1;  // ufix5
  wire [4:0] Switch30_out1;  // ufix5
  wire Bit_Slice32_out1_1;  // ufix1
  wire [4:0] Constant32_out1_1;  // ufix5
  wire [4:0] Switch31_out1;  // ufix5
  wire Bit_Slice33_out1_1;  // ufix1
  wire [4:0] Constant33_out1_1;  // ufix5
  wire [4:0] Switch32_out1_1;  // ufix5
  wire Bit_Slice34_out1_1;  // ufix1
  wire [4:0] Constant34_out1_1;  // ufix5
  wire [4:0] Switch33_out1_1;  // ufix5
  wire Bit_Slice35_out1;  // ufix1
  wire [4:0] Constant35_out1_1;  // ufix5
  wire [4:0] Switch34_out1_1;  // ufix5
  wire Bit_Slice26_out1;  // ufix1
  wire [4:0] Constant36_out1;  // ufix5
  wire [4:0] Switch35_out1;  // ufix5
  wire [4:0] Constant3_out1_3;  // ufix5
  wire [4:0] Switch3_out1_1;  // ufix5
  reg [4:0] Delay6_out1_2;  // ufix5
  wire Compare_To_Constant4_out1;  // ufix1
  wire Bit_Slice26_out1_1;  // ufix1
  wire [4:0] Constant4_out1_2;  // ufix5
  wire Bit_Slice25_out1_1;  // ufix1
  wire [4:0] Constant3_out1_4;  // ufix5
  wire [4:0] Switch3_out1_2;  // ufix5
  wire Bit_Slice24_out1_1;  // ufix1
  wire [4:0] Constant2_out1_1;  // ufix5
  wire [4:0] Switch2_out1_1;  // ufix5
  wire Bit_Slice27_out1_1;  // ufix1
  wire [4:0] Constant1_out1_1;  // ufix5
  wire [4:0] Switch1_out1_3;  // ufix5
  wire Bit_Slice15_out1_1;  // ufix1
  wire [4:0] Constant124_out1_1;  // ufix5
  wire [4:0] Switch116_out1_1;  // ufix5
  wire Bit_Slice16_out1_1;  // ufix1
  wire [4:0] Constant28_out1_1;  // ufix5
  wire [4:0] Switch17_out1_1;  // ufix5
  wire Bit_Slice17_out1_1;  // ufix1
  wire [4:0] Constant26_out1_1;  // ufix5
  wire [4:0] Switch18_out1_1;  // ufix5
  wire Bit_Slice28_out1_1;  // ufix1
  wire [4:0] Constant27_out1_1;  // ufix5
  wire [4:0] Switch19_out1_1;  // ufix5
  wire [4:0] Constant29_out1_2;  // ufix5
  wire [4:0] Switch28_out1_1;  // ufix5
  reg [4:0] Delay8_out1_2;  // ufix5
  wire [4:0] Switch4_out1;  // ufix5
  wire [4:0] Switch5_out1_2;  // ufix5
  reg [4:0] Delay3_out1_7;  // ufix5
  wire [7:0] dynamic_shift_1;  // uint8
  wire [26:0] Shift_Arithmetic_out1;  // ufix27
  reg [26:0] Delay7_out1_1;  // ufix27
  wire [1:0] Bit_Slice2_out1;  // ufix2
  wire Bit_Slice4_out1;  // ufix1
  wire Bit_Slice5_out1;  // ufix1
  wire Bit_Slice3_out1;  // ufix1
  wire Bit_Slice1_out1;  // ufix1
  wire Bit_Reduce_out1;  // ufix1
  wire Logical_Operator1_out1_2;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire [22:0] Bit_Slice1_out1_1;  // ufix23
  wire [23:0] Bit_Slice1_out1_dtc;  // ufix24
  wire [22:0] Constant2_out1_2;  // ufix23
  wire [31:0] Add1_add_temp;  // ufix32
  wire [31:0] Add1_1;  // ufix32
  wire [31:0] Add1_2;  // ufix32
  wire [23:0] Add1_out1;  // ufix24
  wire [23:0] Switch2_out1_2;  // ufix24
  wire Bit_Slice5_out1_1;  // ufix1
  wire [22:0] Bit_Slice6_out1;  // ufix23
  wire [22:0] Bit_Shift2_out1;  // ufix23
  wire [22:0] Switch3_out1_3;  // ufix23
  reg [22:0] Delay11_out1_2;  // ufix23
  wire [23:0] Bit_Concat_out1_2;  // ufix24
  wire [23:0] reinterpretcast_y_m_numericty_out1;  // ufix24_En23
  reg [23:0] Delay16_out1_1;  // ufix24_En23
  wire [47:0] x_m_y_m_out1;  // ufix48_En46
  reg [47:0] Delay1_reg [0:1];  // ufix48 [2]
  wire [47:0] Delay1_reg_next [0:1];  // ufix48_En46 [2]
  wire [47:0] Delay1_out1_3;  // ufix48_En46
  wire Bit_Slice_out1;  // ufix1
  wire signed [8:0] if_swap2_out1;  // sfix9
  reg signed [8:0] Delay1_reg_1 [0:13];  // sfix9 [14]
  wire signed [8:0] Delay1_reg_next_1 [0:13];  // sfix9 [14]
  wire signed [8:0] Delay1_out1_4;  // sfix9
  reg [4:0] Delay4_out1_5;  // ufix5
  wire signed [31:0] Sum2_sub_temp;  // sfix32
  wire signed [31:0] Sum2_1;  // sfix32
  wire signed [31:0] Sum2_2;  // sfix32
  wire signed [8:0] Sum2_out1;  // sfix9
  reg signed [8:0] Delay2_out1_3;  // sfix9
  wire signed [8:0] if_swap_out1;  // sfix9
  reg signed [8:0] Delay17_reg [0:12];  // sfix9 [13]
  wire signed [8:0] Delay17_reg_next [0:12];  // sfix9 [13]
  wire signed [8:0] Delay17_out1_1;  // sfix9
  wire signed [31:0] y_e_fi_exp_fimath_y_e_sub_temp;  // sfix32
  wire signed [31:0] y_e_fi_exp_fimath_y_e_1;  // sfix32
  wire signed [31:0] y_e_fi_exp_fimath_y_e_2;  // sfix32
  wire signed [8:0] y_e_fi_exp_fimath_y_e_out1;  // sfix9
  reg signed [8:0] Delay15_out1_1;  // sfix9
  wire signed [31:0] y_exp_fi_add_temp;  // sfix32
  wire signed [31:0] y_exp_fi_1;  // sfix32
  wire signed [31:0] y_exp_fi_2;  // sfix32
  wire signed [9:0] y_exp_fi_out1;  // sfix10
  reg signed [9:0] Delay3_reg_1 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay3_reg_next_1 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay3_out1_8;  // sfix10
  wire signed [9:0] C_out1;  // sfix10
  wire signed [31:0] x_exp_1_add_temp;  // sfix32
  wire signed [31:0] x_exp_1_1;  // sfix32
  wire signed [31:0] x_exp_1_2;  // sfix32
  wire signed [9:0] x_exp_1_out1;  // sfix10
  wire signed [9:0] t_out1;  // sfix10
  wire signed [9:0] C1_out1;  // sfix10
  wire signed [9:0] y_m_0_out1_3;  // sfix10
  reg signed [9:0] Delay7_reg_1 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay7_reg_next_1 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay7_out1_2;  // sfix10
  reg signed [9:0] Delay4_reg_2 [0:8];  // sfix10 [9]
  wire signed [9:0] Delay4_reg_next_2 [0:8];  // sfix10 [9]
  wire signed [9:0] Delay4_out1_6;  // sfix10
  wire exp_12_out1;  // ufix1
  reg  [0:26] Delay3_reg_2;  // ufix1 [27]
  wire [0:26] Delay3_reg_next_2;  // ufix1 [27]
  wire Delay3_out1_9;  // ufix1
  wire alphaswapped_out1;  // ufix1
  wire exp_12_swapped_out1;  // ufix1
  reg  [0:3] Delay7_reg_2;  // ufix1 [4]
  wire [0:3] Delay7_reg_next_2;  // ufix1 [4]
  wire Delay7_out1_3;  // ufix1
  wire [23:0] dtc1_out1_1;  // ufix24_En23
  wire [47:0] castsi_out1;  // ufix48_En47
  wire [23:0] dtc_out1_1;  // ufix24_En23
  wire [23:0] t_47_out1;  // ufix24_En23
  wire [23:0] C2_out1;  // ufix24_En23
  wire [23:0] y_m_0_1_out1;  // ufix24_En23
  reg [23:0] Delay2_reg_1 [0:1];  // ufix24 [2]
  wire [23:0] Delay2_reg_next_1 [0:1];  // ufix24_En23 [2]
  wire [23:0] Delay2_out1_4;  // ufix24_En23
  reg [23:0] Delay5_reg_2 [0:8];  // ufix24 [9]
  wire [23:0] Delay5_reg_next_2 [0:8];  // ufix24_En23 [9]
  wire [23:0] Delay5_out1_3;  // ufix24_En23
  wire x_m_1_out1;  // ufix1
  wire exp_0_out1;  // ufix1
  wire x_m_1_exp_0_out1;  // ufix1
  wire x_exp_36_out1;  // ufix1
  reg  [0:1] Delay6_reg_2;  // ufix1 [2]
  wire [0:1] Delay6_reg_next_2;  // ufix1 [2]
  wire Delay6_out1_3;  // ufix1
  wire signed [10:0] alphax_exp_in0;  // sfix11
  wire signed [10:0] alphax_exp_1;  // sfix11
  wire signed [9:0] alphax_exp_out1;  // sfix10
  wire shift_0_out1;  // ufix1
  wire shift_x_wide_WordLength_out1;  // ufix1
  wire shift_0_shift_x_wide_W_out1;  // ufix1
  wire C1_out1_1;  // ufix1
  wire C_out1_1;  // ufix1
  wire if_shift_0_shift_x_wide_W_out1;  // ufix1
  reg  [0:1] Delay4_reg_3;  // ufix1 [2]
  wire [0:1] Delay4_reg_next_3;  // ufix1 [2]
  wire Delay4_out1_7;  // ufix1
  wire [36:0] C3_out1;  // ufix37_En36
  wire [36:0] DTC_out1_2;  // ufix37_En36
  wire signed [9:0] C2_out1_1;  // sfix10
  wire signed [9:0] if_shift_0_shift_x_wide_W_1_out1;  // sfix10
  reg signed [9:0] Delay3_out1_10;  // sfix10
  wire signed [9:0] shift_arithmetic_zerosig;  // sfix10
  wire signed [9:0] shift_arithmetic_selsig;  // sfix10
  reg [36:0] Delay2_out1_5;  // ufix37_En36
  wire signed [9:0] dynamic_shift_zerosig;  // sfix10
  wire signed [9:0] dynamic_shift_selsig;  // sfix10
  wire signed [15:0] dynamic_shift_cast;  // int16
  wire [36:0] Shift_Arithmetic_out1_1;  // ufix37_En36
  wire [36:0] C4_out1;  // ufix37_En36
  reg [36:0] Delay1_out1_5;  // ufix37_En36
  wire [36:0] if_doShift_out1;  // ufix37_En36
  wire [36:0] if_x_exp_36_out1;  // ufix37_En36
  wire [23:0] DTC_out1_3;  // ufix24_En23
  wire signed [26:0] DTC2_out1;  // sfix27_En25
  reg signed [26:0] Delay6_out1_4;  // sfix27_En25
  reg signed [26:0] Delay16_reg [0:2];  // sfix27 [3]
  wire signed [26:0] Delay16_reg_next [0:2];  // sfix27_En25 [3]
  wire signed [26:0] Delay16_out1_2;  // sfix27_En25
  wire [5:0] BitSlice_out1_1;  // ufix6
  wire [7:0] DTC1_out1_2;  // ufix8
  wire signed [26:0] coeffs_table1_out1_1 [0:63];  // sfix27_En25 [64]
  wire signed [26:0] coeffs_table_domain_1_out1_1;  // sfix27_En25
  reg signed [26:0] Delay7_out1_4;  // sfix27_En25
  wire signed [53:0] res_x_mul_temp_1;  // sfix54_En50
  wire signed [26:0] res_x_out1_1;  // sfix27_En25
  reg signed [26:0] Delay11_reg [0:1];  // sfix27 [2]
  wire signed [26:0] Delay11_reg_next [0:1];  // sfix27_En25 [2]
  wire signed [26:0] Delay11_out1_3;  // sfix27_En25
  reg [7:0] Delay8_out1_3;  // ufix8
  wire signed [26:0] coeffs_table2_out1 [0:63];  // sfix27_En25 [64]
  wire signed [26:0] coeffs_table_domain_2_out1;  // sfix27_En25
  reg signed [26:0] Delay13_reg_2 [0:1];  // sfix27 [2]
  wire signed [26:0] Delay13_reg_next_2 [0:1];  // sfix27_En25 [2]
  wire signed [26:0] Delay13_out1_2;  // sfix27_En25
  wire signed [31:0] res_x_coeffs_3_1_add_cast;  // sfix32_En25
  wire signed [31:0] res_x_coeffs_3_1_add_cast_1;  // sfix32_En25
  wire signed [31:0] res_x_coeffs_3_1_add_temp;  // sfix32_En25
  wire signed [26:0] res_x_coeffs_3_1_out1;  // sfix27_En25
  reg signed [26:0] Delay17_out1_2;  // sfix27_En25
  wire signed [53:0] res_x_mul_temp_2;  // sfix54_En50
  wire signed [26:0] res_x_out1_2;  // sfix27_En25
  reg signed [26:0] Delay20_reg [0:1];  // sfix27 [2]
  wire signed [26:0] Delay20_reg_next [0:1];  // sfix27_En25 [2]
  wire signed [26:0] Delay20_out1;  // sfix27_En25
  reg [7:0] Delay14_reg [0:1];  // ufix8 [2]
  wire [7:0] Delay14_reg_next [0:1];  // ufix8 [2]
  wire [7:0] Delay14_out1_1;  // ufix8
  wire signed [26:0] coeffs_table3_out1 [0:63];  // sfix27_En25 [64]
  wire signed [26:0] coeffs_table_domain_3_out1;  // sfix27_En25
  reg signed [26:0] Delay21_reg [0:2];  // sfix27 [3]
  wire signed [26:0] Delay21_reg_next [0:2];  // sfix27_En25 [3]
  wire signed [26:0] Delay21_out1;  // sfix27_En25
  wire signed [31:0] res_x_coeffs_2_1_add_cast_2;  // sfix32_En25
  wire signed [31:0] res_x_coeffs_2_1_add_cast_3;  // sfix32_En25
  wire signed [31:0] res_x_coeffs_2_1_add_temp_1;  // sfix32_En25
  wire signed [26:0] res_x_coeffs_2_1_out1_1;  // sfix27_En25
  reg signed [26:0] Delay23_out1;  // sfix27_En25
  reg [36:0] Delay25_reg [0:6];  // ufix37 [7]
  wire [36:0] Delay25_reg_next [0:6];  // ufix37_En36 [7]
  wire [36:0] Delay25_out1;  // ufix37_En36
  wire signed [37:0] res_x_cast;  // sfix38_En36
  wire signed [64:0] res_x_mul_temp_3;  // sfix65_En61
  wire signed [63:0] res_x_out1_3;  // sfix64_En61
  reg signed [63:0] Delay24_reg [0:1];  // sfix64 [2]
  wire signed [63:0] Delay24_reg_next [0:1];  // sfix64_En61 [2]
  wire signed [63:0] Delay24_out1;  // sfix64_En61
  wire signed [63:0] C_out1_2;  // sfix64_En61
  wire signed [63:0] if_x_m_1_exp_0_out1;  // sfix64_En61
  wire signed [63:0] pi_2_out1;  // sfix64_En61
  wire signed [63:0] pi_2_res_out1;  // sfix64_En61
  wire signed [63:0] if_swapped_out1;  // sfix64_En61
  wire [61:0] DTC_out1_4;  // ufix62_En61
  wire [62:0] Abs_y_1;  // ufix63_En61
  wire [61:0] Abs_out1_1;  // ufix62_En61
  wire [61:0] Data_Type_Conversion_out1_3;  // ufix62
  reg [61:0] Delay5_reg_3 [0:1];  // ufix62 [2]
  wire [61:0] Delay5_reg_next_3 [0:1];  // ufix62 [2]
  wire [61:0] Delay5_out1_4;  // ufix62
  wire Bit_Slice32_out1_2;  // ufix1
  wire [5:0] Constant32_out1_2;  // ufix6
  wire Bit_Slice33_out1_2;  // ufix1
  wire [5:0] Constant33_out1_2;  // ufix6
  wire [5:0] Switch32_out1_2;  // ufix6
  wire Bit_Slice34_out1_2;  // ufix1
  wire [5:0] Constant34_out1_2;  // ufix6
  wire [5:0] Switch33_out1_2;  // ufix6
  wire Bit_Slice15_out1_2;  // ufix1
  wire [5:0] Constant35_out1_2;  // ufix6
  wire [5:0] Switch34_out1_2;  // ufix6
  wire Bit_Slice16_out1_2;  // ufix1
  wire [5:0] Constant28_out1_2;  // ufix6
  wire [5:0] Switch17_out1_2;  // ufix6
  wire Bit_Slice17_out1_2;  // ufix1
  wire [5:0] Constant26_out1_2;  // ufix6
  wire [5:0] Switch18_out1_2;  // ufix6
  wire [5:0] Constant27_out1_2;  // ufix6
  wire [5:0] Switch19_out1_2;  // ufix6
  reg [5:0] Delay1_out1_6;  // ufix6
  wire Compare_To_Constant1_out1;  // ufix1
  wire Bit_Slice25_out1_2;  // ufix1
  wire [5:0] Constant3_out1_5;  // ufix6
  wire Bit_Slice24_out1_2;  // ufix1
  wire [5:0] Constant2_out1_3;  // ufix6
  wire [5:0] Switch2_out1_3;  // ufix6
  wire Bit_Slice27_out1_2;  // ufix1
  wire [5:0] Constant1_out1_2;  // ufix6
  wire [5:0] Switch1_out1_4;  // ufix6
  wire Bit_Slice15_out1_3;  // ufix1
  wire [5:0] Constant124_out1_2;  // ufix6
  wire [5:0] Switch116_out1_2;  // ufix6
  wire Bit_Slice16_out1_3;  // ufix1
  wire [5:0] Constant28_out1_3;  // ufix6
  wire [5:0] Switch17_out1_3;  // ufix6
  wire Bit_Slice17_out1_3;  // ufix1
  wire [5:0] Constant26_out1_3;  // ufix6
  wire [5:0] Switch18_out1_3;  // ufix6
  wire Bit_Slice28_out1_2;  // ufix1
  wire [5:0] Constant27_out1_3;  // ufix6
  wire [5:0] Switch19_out1_3;  // ufix6
  wire Bit_Slice29_out1_2;  // ufix1
  wire [5:0] Constant29_out1_3;  // ufix6
  wire [5:0] Switch28_out1_2;  // ufix6
  wire [5:0] Constant30_out1_2;  // ufix6
  wire [5:0] Switch29_out1_2;  // ufix6
  reg [5:0] Delay2_out1_6;  // ufix6
  wire [5:0] Switch1_out1_5;  // ufix6
  wire Compare_To_Constant7_out1;  // ufix1
  wire Bit_Slice29_out1_3;  // ufix1
  wire [5:0] Constant29_out1_4;  // ufix6
  wire Bit_Slice30_out1_1;  // ufix1
  wire [5:0] Constant30_out1_3;  // ufix6
  wire [5:0] Switch29_out1_3;  // ufix6
  wire Bit_Slice31_out1_1;  // ufix1
  wire [5:0] Constant31_out1_1;  // ufix6
  wire [5:0] Switch30_out1_1;  // ufix6
  wire Bit_Slice32_out1_3;  // ufix1
  wire [5:0] Constant32_out1_3;  // ufix6
  wire [5:0] Switch31_out1_1;  // ufix6
  wire Bit_Slice33_out1_3;  // ufix1
  wire [5:0] Constant33_out1_3;  // ufix6
  wire [5:0] Switch32_out1_3;  // ufix6
  wire Bit_Slice34_out1_3;  // ufix1
  wire [5:0] Constant34_out1_3;  // ufix6
  wire [5:0] Switch33_out1_3;  // ufix6
  wire Bit_Slice35_out1_1;  // ufix1
  wire [5:0] Constant35_out1_3;  // ufix6
  wire [5:0] Switch34_out1_3;  // ufix6
  wire Bit_Slice26_out1_2;  // ufix1
  wire [5:0] Constant36_out1_1;  // ufix6
  wire [5:0] Switch35_out1_1;  // ufix6
  wire [5:0] Constant3_out1_6;  // ufix6
  wire [5:0] Switch3_out1_4;  // ufix6
  reg [5:0] Delay4_out1_8;  // ufix6
  wire Compare_To_Constant2_out1;  // ufix1
  wire Bit_Slice26_out1_3;  // ufix1
  wire [5:0] Constant4_out1_3;  // ufix6
  wire Bit_Slice25_out1_3;  // ufix1
  wire [5:0] Constant3_out1_7;  // ufix6
  wire [5:0] Switch3_out1_5;  // ufix6
  wire Bit_Slice24_out1_3;  // ufix1
  wire [5:0] Constant2_out1_4;  // ufix6
  wire [5:0] Switch2_out1_4;  // ufix6
  wire Bit_Slice27_out1_3;  // ufix1
  wire [5:0] Constant1_out1_3;  // ufix6
  wire [5:0] Switch1_out1_6;  // ufix6
  wire Bit_Slice15_out1_4;  // ufix1
  wire [5:0] Constant124_out1_3;  // ufix6
  wire [5:0] Switch116_out1_3;  // ufix6
  wire Bit_Slice16_out1_4;  // ufix1
  wire [5:0] Constant28_out1_4;  // ufix6
  wire [5:0] Switch17_out1_4;  // ufix6
  wire Bit_Slice17_out1_4;  // ufix1
  wire [5:0] Constant26_out1_4;  // ufix6
  wire [5:0] Switch18_out1_4;  // ufix6
  wire Bit_Slice28_out1_3;  // ufix1
  wire [5:0] Constant27_out1_4;  // ufix6
  wire [5:0] Switch19_out1_4;  // ufix6
  wire [5:0] Constant29_out1_5;  // ufix6
  wire [5:0] Switch28_out1_3;  // ufix6
  reg [5:0] Delay7_out1_5;  // ufix6
  wire [5:0] Switch2_out1_5;  // ufix6
  wire [5:0] Switch6_out1;  // ufix6
  wire Bit_Slice32_out1_4;  // ufix1
  wire [5:0] Constant32_out1_4;  // ufix6
  wire Bit_Slice33_out1_4;  // ufix1
  wire [5:0] Constant33_out1_4;  // ufix6
  wire [5:0] Switch32_out1_4;  // ufix6
  wire Bit_Slice34_out1_4;  // ufix1
  wire [5:0] Constant34_out1_4;  // ufix6
  wire [5:0] Switch33_out1_4;  // ufix6
  wire Bit_Slice15_out1_5;  // ufix1
  wire [5:0] Constant35_out1_4;  // ufix6
  wire [5:0] Switch34_out1_4;  // ufix6
  wire Bit_Slice16_out1_5;  // ufix1
  wire [5:0] Constant28_out1_5;  // ufix6
  wire [5:0] Switch17_out1_5;  // ufix6
  wire Bit_Slice17_out1_5;  // ufix1
  wire [5:0] Constant26_out1_5;  // ufix6
  wire [5:0] Switch18_out1_5;  // ufix6
  wire Bit_Slice28_out1_4;  // ufix1
  wire [5:0] Constant27_out1_5;  // ufix6
  wire [5:0] Switch19_out1_5;  // ufix6
  wire Bit_Slice29_out1_4;  // ufix1
  wire [5:0] Constant29_out1_6;  // ufix6
  wire [5:0] Switch28_out1_4;  // ufix6
  wire [5:0] Constant30_out1_4;  // ufix6
  wire [5:0] Switch29_out1_4;  // ufix6
  reg [5:0] Delay3_out1_11;  // ufix6
  wire Compare_To_Constant3_out1_1;  // ufix1
  wire Bit_Slice25_out1_4;  // ufix1
  wire [5:0] Constant3_out1_8;  // ufix6
  wire Bit_Slice24_out1_4;  // ufix1
  wire [5:0] Constant2_out1_5;  // ufix6
  wire [5:0] Switch2_out1_6;  // ufix6
  wire Bit_Slice27_out1_4;  // ufix1
  wire [5:0] Constant1_out1_4;  // ufix6
  wire [5:0] Switch1_out1_7;  // ufix6
  wire Bit_Slice15_out1_6;  // ufix1
  wire [5:0] Constant124_out1_4;  // ufix6
  wire [5:0] Switch116_out1_4;  // ufix6
  wire Bit_Slice16_out1_6;  // ufix1
  wire [5:0] Constant28_out1_6;  // ufix6
  wire [5:0] Switch17_out1_6;  // ufix6
  wire Bit_Slice17_out1_6;  // ufix1
  wire [5:0] Constant26_out1_6;  // ufix6
  wire [5:0] Switch18_out1_6;  // ufix6
  wire Bit_Slice28_out1_5;  // ufix1
  wire [5:0] Constant27_out1_6;  // ufix6
  wire [5:0] Switch19_out1_6;  // ufix6
  wire Bit_Slice29_out1_5;  // ufix1
  wire [5:0] Constant29_out1_7;  // ufix6
  wire [5:0] Switch28_out1_5;  // ufix6
  wire [5:0] Constant30_out1_5;  // ufix6
  wire [5:0] Switch29_out1_5;  // ufix6
  reg [5:0] Delay5_out1_5;  // ufix6
  wire [5:0] Switch3_out1_6;  // ufix6
  wire Bit_Slice29_out1_6;  // ufix1
  wire [5:0] Constant29_out1_8;  // ufix6
  wire Bit_Slice30_out1_2;  // ufix1
  wire [5:0] Constant30_out1_6;  // ufix6
  wire [5:0] Switch29_out1_6;  // ufix6
  wire Bit_Slice31_out1_2;  // ufix1
  wire [5:0] Constant31_out1_2;  // ufix6
  wire [5:0] Switch30_out1_2;  // ufix6
  wire Bit_Slice32_out1_5;  // ufix1
  wire [5:0] Constant32_out1_5;  // ufix6
  wire [5:0] Switch31_out1_2;  // ufix6
  wire Bit_Slice33_out1_5;  // ufix1
  wire [5:0] Constant33_out1_5;  // ufix6
  wire [5:0] Switch32_out1_5;  // ufix6
  wire Bit_Slice34_out1_5;  // ufix1
  wire [5:0] Constant34_out1_5;  // ufix6
  wire [5:0] Switch33_out1_5;  // ufix6
  wire Bit_Slice35_out1_2;  // ufix1
  wire [5:0] Constant35_out1_5;  // ufix6
  wire [5:0] Switch34_out1_5;  // ufix6
  wire Bit_Slice26_out1_4;  // ufix1
  wire [5:0] Constant36_out1_2;  // ufix6
  wire [5:0] Switch35_out1_2;  // ufix6
  wire [5:0] Constant3_out1_9;  // ufix6
  wire [5:0] Switch3_out1_7;  // ufix6
  reg [5:0] Delay6_out1_5;  // ufix6
  wire Compare_To_Constant4_out1_1;  // ufix1
  wire Bit_Slice26_out1_5;  // ufix1
  wire Bit_Slice28_out1_6;  // ufix1
  wire Bit_Slice17_out1_7;  // ufix1
  wire Bit_Slice16_out1_7;  // ufix1
  wire Bit_Slice15_out1_7;  // ufix1
  wire Bit_Slice27_out1_5;  // ufix1
  wire Bit_Slice24_out1_5;  // ufix1
  wire Bit_Slice25_out1_5;  // ufix1
  wire [6:0] Constant4_out1_4;  // ufix7
  wire [5:0] Constant3_out1_10;  // ufix6
  wire [6:0] Constant3_out1_dtc_2;  // ufix7
  wire [6:0] Switch3_out1_8;  // ufix7
  wire [5:0] Constant2_out1_6;  // ufix6
  wire [6:0] Constant2_out1_dtc;  // ufix7
  wire [6:0] Switch2_out1_7;  // ufix7
  wire [5:0] Constant1_out1_5;  // ufix6
  wire [6:0] Constant1_out1_dtc;  // ufix7
  wire [6:0] Switch1_out1_8;  // ufix7
  wire [5:0] Constant124_out1_5;  // ufix6
  wire [6:0] Constant124_out1_dtc;  // ufix7
  wire [6:0] Switch116_out1_5;  // ufix7
  wire [5:0] Constant28_out1_7;  // ufix6
  wire [6:0] Constant28_out1_dtc;  // ufix7
  wire [6:0] Switch17_out1_7;  // ufix7
  wire [5:0] Constant26_out1_7;  // ufix6
  wire [6:0] Constant26_out1_dtc;  // ufix7
  wire [6:0] Switch18_out1_7;  // ufix7
  wire [5:0] Constant27_out1_7;  // ufix6
  wire [6:0] Constant27_out1_dtc;  // ufix7
  wire [6:0] Switch19_out1_7;  // ufix7
  wire [5:0] Constant29_out1_9;  // ufix6
  wire [6:0] Constant29_out1_dtc;  // ufix7
  wire [6:0] Switch28_out1_6;  // ufix7
  reg [6:0] Delay8_out1_4;  // ufix7
  wire Compare_To_Constant5_out1_1;  // ufix1
  wire [6:0] Delay6_out1_dtc;  // ufix7
  wire [6:0] Switch4_out1_1;  // ufix7
  wire Compare_To_Constant6_out1;  // ufix1
  wire [6:0] Switch3_out1_dtc;  // ufix7
  wire [6:0] Switch5_out1_3;  // ufix7
  wire [6:0] Switch6_out1_dtc;  // ufix7
  wire [6:0] Switch7_out1;  // ufix7
  reg [6:0] Delay3_out1_12;  // ufix7
  wire [7:0] dynamic_shift_4;  // uint8
  wire [61:0] Shift_Arithmetic_out1_2;  // ufix62
  reg [61:0] Delay7_out1_6;  // ufix62
  wire [1:0] Bit_Slice2_out1_1;  // ufix2
  wire Bit_Slice4_out1_1;  // ufix1
  wire Bit_Slice5_out1_2;  // ufix1
  wire Bit_Slice3_out1_1;  // ufix1
  wire [35:0] Bit_Slice1_out1_2;  // ufix36
  wire Bit_Reduce_out1_1;  // ufix1
  wire Logical_Operator1_out1_3;  // ufix1
  wire Logical_Operator_out1_3;  // ufix1
  wire [22:0] Bit_Slice1_out1_3;  // ufix23
  wire [23:0] Bit_Slice1_out1_dtc_1;  // ufix24
  wire [22:0] Constant2_out1_7;  // ufix23
  wire [31:0] Add1_add_temp_1;  // ufix32
  wire [31:0] Add1_4;  // ufix32
  wire [31:0] Add1_5;  // ufix32
  wire [23:0] Add1_out1_1;  // ufix24
  wire [23:0] Switch2_out1_8;  // ufix24
  wire Bit_Slice5_out1_3;  // ufix1
  wire [7:0] C1_out1_2;  // ufix8
  wire signed [31:0] Sum1_sub_temp;  // sfix32
  wire signed [31:0] Sum1_1;  // sfix32
  wire signed [31:0] Sum1_2;  // sfix32
  wire [7:0] Sum1_out1;  // ufix8
  reg [7:0] Delay2_out1_7;  // ufix8
  wire [31:0] Sum2_add_temp;  // ufix32
  wire [31:0] Sum2_4;  // ufix32
  wire [31:0] Sum2_5;  // ufix32
  wire [7:0] Sum2_out1_1;  // ufix8
  reg [7:0] Delay6_out1_6;  // ufix8
  reg signed [9:0] Delay4_reg_4 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay4_reg_next_4 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay4_out1_9;  // sfix10
  wire exp_127_out1;  // ufix1
  wire signed [9:0] C4_out1_1;  // sfix10
  wire signed [31:0] exp_127_add_temp;  // sfix32
  wire signed [31:0] exp_127_2;  // sfix32
  wire signed [31:0] exp_127_3;  // sfix32
  wire signed [10:0] exp_127_out1_1;  // sfix11
  reg signed [10:0] Delay5_reg_4 [0:1];  // sfix11 [2]
  wire signed [10:0] Delay5_reg_next_4 [0:1];  // sfix11 [2]
  wire signed [10:0] Delay5_out1_6;  // sfix11
  wire [7:0] DTC_out1_5;  // ufix8
  wire [7:0] C5_out1;  // ufix8
  wire [7:0] if_exp_127_out1;  // ufix8
  reg [7:0] Delay1_reg_2 [0:1];  // ufix8 [2]
  wire [7:0] Delay1_reg_next_2 [0:1];  // ufix8 [2]
  wire [7:0] Delay1_out1_7;  // ufix8
  wire [7:0] if_exp_12_swapped_out1;  // ufix8
  reg [7:0] outputCorrection_out2;  // ufix8
  wire Compare_To_Zero_out1;  // ufix1
  wire Constant2_out1_8;  // ufix1
  wire [22:0] Bit_Slice6_out1_1;  // ufix23
  wire [22:0] Bit_Shift2_out1_1;  // ufix23
  wire [22:0] Switch3_out1_9;  // ufix23
  reg [22:0] Delay4_out1_10;  // ufix23
  reg [23:0] Delay3_reg_3 [0:1];  // ufix24 [2]
  wire [23:0] Delay3_reg_next_3 [0:1];  // ufix24_En23 [2]
  wire [23:0] Delay3_out1_13;  // ufix24_En23
  wire signed [9:0] C_out1_3;  // sfix10
  wire signed [31:0] alpha126_exp_sub_temp;  // sfix32
  wire signed [31:0] alpha126_exp_1;  // sfix32
  wire signed [31:0] alpha126_exp_2;  // sfix32
  wire signed [10:0] alpha126_exp_out1;  // sfix11
  reg signed [10:0] Delay2_reg_2 [0:1];  // sfix11 [2]
  wire signed [10:0] Delay2_reg_next_2 [0:1];  // sfix11 [2]
  wire signed [10:0] Delay2_out1_8;  // sfix11
  wire shift_x_m_WordLength_out1;  // ufix1
  wire shift_0_out1_1;  // ufix1
  wire shift_x_m_WordLength_shif_out1;  // ufix1
  wire C2_out1_2;  // ufix1
  wire C1_out1_3;  // ufix1
  wire if_shift_x_m_WordLength_shif_out1;  // ufix1
  wire [23:0] C3_out1_1;  // ufix24_En23
  wire [23:0] if_doShift_out1_1;  // ufix24_En23
  wire [23:0] if_exp_127_1_out1;  // ufix24_En23
  wire [22:0] Bit_Slice_out1_1;  // ufix23
  reg [22:0] Delay7_reg_3 [0:1];  // ufix23 [2]
  wire [22:0] Delay7_reg_next_3 [0:1];  // ufix23 [2]
  wire [22:0] Delay7_out1_7;  // ufix23
  wire [22:0] if_exp_12_swapped_1_out1;  // ufix23
  reg [22:0] outputCorrection_out3;  // ufix23
  wire [23:0] Bit_Concat2_out1;  // ufix24
  wire Constant_out1_2;  // ufix1
  wire [23:0] Bit_Concat_out1_3;  // ufix24
  wire [23:0] Switch_out1_1;  // ufix24
  wire [31:0] Bit_Concat_out1_4;  // ufix32
  wire [7:0] Constant1_out1_6;  // ufix8
  reg [7:0] Delay4_out1_11;  // ufix8
  wire Compare_To_Zero1_out1;  // ufix1
  wire Constant1_out1_7;  // ufix1
  wire [22:0] C2_out1_3;  // ufix23
  reg [22:0] Delay5_out1_7;  // ufix23
  wire [23:0] Bit_Concat1_out1;  // ufix24
  wire Constant3_out1_11;  // ufix1
  wire [23:0] Bit_Concat3_out1;  // ufix24
  wire [23:0] Switch1_out1_9;  // ufix24
  wire [31:0] Bit_Concat1_out1_1;  // ufix32
  wire Relational_Operator4_relop1;
  reg  Delay4_out1_12;  // ufix1
  wire Relational_Operator1_relop1;
  wire Logical_Operator_out1_4;  // ufix1
  reg  Delay1_out1_8;  // ufix1
  wire Switch1_out1_10;  // ufix1
  reg  [0:25] Delay8_reg;  // ufix1 [26]
  wire [0:25] Delay8_reg_next;  // ufix1 [26]
  wire Delay8_out1_5;  // ufix1
  reg  [0:3] Delay9_reg;  // ufix1 [4]
  wire [0:3] Delay9_reg_next;  // ufix1 [4]
  wire Delay9_out1_2;  // ufix1
  wire Logical_Operator_out1_5;  // ufix1
  wire C4_out1_2;  // ufix1
  wire C3_out1_2;  // ufix1
  wire orig_y_s_0_out1;  // ufix1
  reg  Delay1_out1_9;  // ufix1
  reg  Delay7_out1_8;  // ufix1
  wire Constant4_out1_5;  // ufix1
  wire Constant3_out1_12;  // ufix1
  wire Switch3_out1_10;  // ufix1
  wire Logical_Operator_out1_6;  // ufix1
  reg  [0:3] Delay1_reg_3;  // ufix1 [4]
  wire [0:3] Delay1_reg_next_3;  // ufix1 [4]
  wire Delay1_out1_10;  // ufix1
  reg  outputCorrection_out1;  // ufix1
  reg  Delay6_out1_7;  // ufix1
  wire Constant2_out1_9;  // ufix1
  wire Constant1_out1_8;  // ufix1
  wire Switch2_out1_9;  // ufix1
  wire Switch1_out1_11;  // ufix1
  wire Logical_Operator1_out1_4;  // ufix1
  wire Switch4_out1_2;  // ufix1
  reg  Delay4_out1_13;  // ufix1
  reg  Delay9_out1_3;  // ufix1
  reg  [0:1] Delay11_reg_1;  // ufix1 [2]
  wire [0:1] Delay11_reg_next_1;  // ufix1 [2]
  wire Delay11_out1_4;  // ufix1
  wire Data_Type_Conversion1_out1;  // ufix1
  reg  Delay12_out1_3;  // ufix1
  reg  [0:5] reduced_reg_1;  // ufix1 [6]
  wire [0:5] reduced_reg_next_1;  // ufix1 [6]
  wire outputCorrection_out1_1;  // ufix1
  wire orig_x_s_0_out1;  // ufix1
  wire Switch_out1_2;  // ufix1
  reg  Delay2_out1_9;  // ufix1
  wire Constant8_out1;  // ufix1
  wire [7:0] Constant7_out1;  // uint8
  wire Relational_Operator_relop1;
  reg  Delay4_out1_14;
  wire Logical_Operator2_out1;
  wire Logical_Operator_out1_7;  // ufix1
  wire [7:0] Add_out1;  // uint8
  reg [7:0] Delay3_out1_14;  // uint8
  wire [7:0] Add_1;  // ufix8
  wire [7:0] Constant_out1_3;  // ufix8
  wire [7:0] Constant1_out1_9;  // ufix8
  wire [7:0] Switch1_out1_12;  // ufix8
  reg [7:0] Delay_out1;  // ufix8
  reg [7:0] Delay19_reg [0:1];  // ufix8 [2]
  wire [7:0] Delay19_reg_next [0:1];  // ufix8 [2]
  wire [7:0] Delay19_out1;  // ufix8
  wire Compare_To_Zero_out1_1;  // ufix1
  reg  Delay1_out1_11;  // ufix1
  wire Logical_Operator_out1_8;  // ufix1
  reg  Delay5_out1_8;  // ufix1
  reg [23:0] Delay1_out1_12;  // ufix24
  reg [23:0] Delay_out1_1;  // ufix24
  wire [23:0] Switch_out1_3;  // ufix24
  reg [23:0] Delay5_out1_9;  // ufix24
  wire [22:0] Constant_out1_4;  // ufix23
  wire [46:0] Bit_Concat_out1_5;  // ufix47
  wire [7:0] Constant1_out1_10;  // ufix8
  wire [7:0] Subtract1_out1;  // ufix8
  wire [7:0] Subtract_out1;  // ufix8
  wire [7:0] Switch_out1_4;  // ufix8
  reg [7:0] Delay_out1_2;  // ufix8
  wire Relational_Operator2_relop1;
  wire [7:0] Constant_out1_5;  // ufix8
  wire Relational_Operator1_relop1_1;
  reg  Delay2_out1_10;  // ufix1
  wire [23:0] Switch1_out1_13;  // ufix24
  wire [22:0] Constant_out1_6;  // ufix23
  wire [46:0] Bit_Concat_out1_6;  // ufix47
  wire signed [7:0] Constant_out1_7;  // sfix8
  wire [7:0] Constant_out1_dtc;  // ufix8
  wire [7:0] Switch1_out1_14;  // ufix8
  wire [5:0] Bit_Slice_out1_2;  // ufix6
  wire [7:0] dynamic_shift_6;  // uint8
  wire [46:0] Shift_Arithmetic_out1_3;  // ufix47
  reg [46:0] Delay3_out1_15;  // ufix47
  reg  Delay1_out1_13;  // ufix1
  wire [46:0] Constant_out1_8;  // ufix47
  wire [46:0] Switch1_out1_15;  // ufix47
  reg [46:0] Delay2_out1_11;  // ufix47
  wire [46:0] Switch_out1_5;  // ufix47
  wire [47:0] Add_3;  // ufix48
  wire [47:0] Add_4;  // ufix48
  wire [47:0] Add_out1_1;  // ufix48
  wire [47:0] Subtract_2;  // ufix48
  wire [47:0] Subtract_3;  // ufix48
  wire [47:0] Subtract_out1_1;  // ufix48
  wire [47:0] Switch_out1_6;  // ufix48
  reg [47:0] Delay3_out1_16;  // ufix48
  reg [47:0] Mantissa_Cal_out1;  // ufix48
  wire Bit_Slice24_out1_6;  // ufix1
  wire signed [5:0] Constant25_out1;  // sfix6
  wire Bit_Slice23_out1;  // ufix1
  wire signed [5:0] Constant23_out1;  // sfix6
  wire signed [5:0] Switch24_out1;  // sfix6
  wire Bit_Slice22_out1;  // ufix1
  wire signed [5:0] Constant24_out1;  // sfix6
  wire signed [5:0] Switch23_out1;  // sfix6
  wire Bit_Slice21_out1;  // ufix1
  wire signed [5:0] Constant22_out1;  // sfix6
  wire signed [5:0] Switch22_out1;  // sfix6
  wire Bit_Slice20_out1;  // ufix1
  wire signed [5:0] Constant21_out1;  // sfix6
  wire signed [5:0] Switch21_out1;  // sfix6
  wire Bit_Slice19_out1;  // ufix1
  wire signed [5:0] Constant20_out1;  // sfix6
  wire signed [5:0] Switch20_out1;  // sfix6
  wire Bit_Slice18_out1;  // ufix1
  wire signed [5:0] Constant19_out1;  // sfix6
  wire signed [5:0] Switch19_out1_8;  // sfix6
  wire Bit_Slice17_out1_8;  // ufix1
  wire signed [5:0] Constant18_out1;  // sfix6
  wire signed [5:0] Switch18_out1_8;  // sfix6
  wire Bit_Slice16_out1_8;  // ufix1
  wire signed [5:0] Constant17_out1;  // sfix6
  wire signed [5:0] Switch17_out1_8;  // sfix6
  wire Bit_Slice15_out1_8;  // ufix1
  wire signed [5:0] Constant16_out1;  // sfix6
  wire signed [5:0] Switch16_out1;  // sfix6
  wire Bit_Slice14_out1;  // ufix1
  wire signed [5:0] Constant15_out1;  // sfix6
  wire signed [5:0] Switch15_out1;  // sfix6
  wire Bit_Slice13_out1;  // ufix1
  wire signed [5:0] Constant14_out1;  // sfix6
  wire signed [5:0] Switch14_out1;  // sfix6
  wire Bit_Slice12_out1;  // ufix1
  wire signed [5:0] Constant13_out1;  // sfix6
  wire signed [5:0] Switch13_out1;  // sfix6
  wire Bit_Slice11_out1;  // ufix1
  wire signed [5:0] Constant12_out1;  // sfix6
  wire signed [5:0] Switch12_out1;  // sfix6
  wire Bit_Slice10_out1;  // ufix1
  wire signed [5:0] Constant11_out1;  // sfix6
  wire signed [5:0] Switch11_out1;  // sfix6
  wire Bit_Slice9_out1;  // ufix1
  wire signed [5:0] Constant10_out1;  // sfix6
  wire signed [5:0] Switch10_out1;  // sfix6
  wire Bit_Slice8_out1;  // ufix1
  wire signed [5:0] Constant9_out1;  // sfix6
  wire signed [5:0] Switch9_out1;  // sfix6
  wire Bit_Slice7_out1;  // ufix1
  wire signed [5:0] Constant8_out1_1;  // sfix6
  wire signed [5:0] Switch8_out1;  // sfix6
  wire Bit_Slice6_out1_2;  // ufix1
  wire signed [5:0] Constant7_out1_1;  // sfix6
  wire signed [5:0] Switch7_out1_1;  // sfix6
  wire Bit_Slice5_out1_4;  // ufix1
  wire signed [5:0] Constant6_out1_2;  // sfix6
  wire signed [5:0] Switch6_out1_1;  // sfix6
  wire Bit_Slice4_out1_2;  // ufix1
  wire signed [5:0] Constant5_out1;  // sfix6
  wire signed [5:0] Switch5_out1_4;  // sfix6
  wire Bit_Slice3_out1_2;  // ufix1
  wire signed [5:0] Constant4_out1_6;  // sfix6
  wire signed [5:0] Switch4_out1_3;  // sfix6
  wire Bit_Slice2_out1_2;  // ufix1
  wire signed [5:0] Constant3_out1_13;  // sfix6
  wire signed [5:0] Switch3_out1_11;  // sfix6
  wire Bit_Slice1_out1_4;  // ufix1
  wire signed [5:0] Constant2_out1_10;  // sfix6
  wire signed [5:0] Switch2_out1_10;  // sfix6
  wire Bit_Slice_out1_3;  // ufix1
  wire signed [5:0] Constant1_out1_11;  // sfix6
  wire signed [5:0] Switch1_out1_16;  // sfix6
  wire signed [5:0] Constant_out1_9;  // sfix6
  wire signed [5:0] Switch_out1_7;  // sfix6
  reg signed [5:0] Delay3_out1_17;  // sfix6
  wire Compare_To_Zero_out1_2;  // ufix1
  wire [4:0] Bit_Slice_out1_4;  // ufix5
  wire [7:0] dynamic_shift_8;  // uint8
  wire [47:0] Shift_Arithmetic_out1_4;  // ufix48
  wire [47:0] Bit_Shift_out1;  // ufix48
  reg [47:0] Delay1_out1_14;  // ufix48
  wire [47:0] Switch_out1_8;  // ufix48
  wire [47:0] Switch2_out1_11;  // ufix48
  reg [47:0] Delay2_out1_12;  // ufix48
  wire [46:0] Bit_Slice_out1_5;  // ufix47
  wire [1:0] Bit_Slice2_out1_3;  // ufix2
  wire Bit_Slice4_out1_3;  // ufix1
  wire [20:0] Bit_Slice1_out1_5;  // ufix21
  wire Bit_Reduce_out1_2;  // ufix1
  wire Bit_Slice5_out1_5;  // ufix1
  wire Bit_Slice3_out1_3;  // ufix1
  wire Logical_Operator1_out1_5;  // ufix1
  wire Logical_Operator_out1_9;  // ufix1
  wire [22:0] Bit_Slice1_out1_6;  // ufix23
  wire [23:0] Delay2_out1_dtc;  // ufix24
  wire [22:0] Constant1_out1_12;  // ufix23
  wire [31:0] Add_add_temp;  // ufix32
  wire [31:0] Add_6;  // ufix32
  wire [31:0] Add_7;  // ufix32
  wire [23:0] Add_out1_2;  // ufix24
  wire [23:0] Switch_out1_9;  // ufix24
  wire Bit_Slice2_out1_4;  // ufix1
  wire Compare_To_Constant_out1;  // ufix1
  reg  Delay1_out1_15;  // ufix1
  wire [7:0] Denormalised_FP_out1_dtc;  // ufix8
  wire [47:0] Constant_out1_10;  // ufix48
  wire Relational_Operator_relop1_1;
  reg  Delay2_out1_13;  // ufix1
  reg [7:0] Delay4_out1_15;  // ufix8
  wire signed [31:0] Subtract_sub_temp;  // sfix32
  wire signed [31:0] Subtract_5;  // sfix32
  wire signed [31:0] Subtract_6;  // sfix32
  wire [7:0] Subtract_out1_2;  // ufix8
  wire [7:0] Constant1_out1_13;  // ufix8
  wire [7:0] Switch1_out1_17;  // ufix8
  wire [7:0] Switch1_out1_18;  // ufix8
  reg [7:0] Delay3_out1_18;  // ufix8
  wire [31:0] Subtract_add_temp;  // ufix32
  wire [31:0] Subtract_8;  // ufix32
  wire [31:0] Subtract_9;  // ufix32
  wire [7:0] Subtract_out1_3;  // ufix8
  reg [7:0] Delay13_out1_3;  // ufix8
  reg [7:0] reduced_reg_2 [0:5];  // ufix8 [6]
  wire [7:0] reduced_reg_next_2 [0:5];  // ufix8 [6]
  wire [7:0] outputCorrection_out2_1;  // ufix8
  wire [7:0] orig_x_s_0_1_out1;  // ufix8
  wire [7:0] Switch1_out1_19;  // ufix8
  wire [7:0] Switch4_out1_4;  // ufix8
  reg [7:0] Delay5_out1_10;  // ufix8
  wire [22:0] Constant1_out1_14;  // ufix23
  wire [22:0] C2_out1_4;  // ufix23
  wire [22:0] Bit_Slice3_out1_4;  // ufix23
  wire [22:0] Bit_Shift1_out1;  // ufix23
  wire [22:0] Switch1_out1_20;  // ufix23
  reg [22:0] Delay14_out1_2;  // ufix23
  reg [22:0] reduced_reg_3 [0:5];  // ufix23 [6]
  wire [22:0] reduced_reg_next_3 [0:5];  // ufix23 [6]
  wire [22:0] outputCorrection_out3_1;  // ufix23
  wire [22:0] orig_x_s_0_2_out1;  // ufix23
  wire [22:0] Switch2_out1_12;  // ufix23
  wire [22:0] Switch3_out1_12;  // ufix23
  reg [22:0] Delay6_out1_8;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32

  // 4
  // 
  // 4
  // 
  // 4


  // Split 32 bit word into FP sign, exponent, mantissa
  assign X_S = nfp_in2[31];
  assign X_E = nfp_in2[30:23];
  assign X_M = nfp_in2[22:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay9_process
      if (i_RST_N == 1'b0) begin
        Delay9_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= X_E;
        end
      end
    end



  assign Constant6_out1 = 1'b0;



  assign Constant_out1 = 1'b1;



  assign Switch5_out1 = (Delay9_out1 == 8'b00000000 ? Constant6_out1 :
              Constant_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_process
      if (i_RST_N == 1'b0) begin
        Delay8_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= X_M;
        end
      end
    end



  assign Bit_Concat_out1 = {Switch5_out1, Delay8_out1};



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Bit_Concat_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Delay3_out1;
        end
      end
    end



  assign Data_Type_Conversion_out1 = Delay2_out1;



  assign x_m_0_out1 = Data_Type_Conversion_out1 == 24'b000000000000000000000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay16_process
      if (i_RST_N == 1'b0) begin
        Delay16_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= x_m_0_out1;
        end
      end
    end



  // Split 32 bit word into FP sign, exponent, mantissa
  assign Y_S = nfp_in1[31];
  assign Y_E = nfp_in1[30:23];
  assign Y_M = nfp_in1[22:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay12_process
      if (i_RST_N == 1'b0) begin
        Delay12_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Y_E;
        end
      end
    end



  assign Constant6_out1_1 = 1'b0;



  assign Constant_out1_1 = 1'b1;



  assign Switch5_out1_1 = (Delay12_out1 == 8'b00000000 ? Constant6_out1_1 :
              Constant_out1_1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay11_process
      if (i_RST_N == 1'b0) begin
        Delay11_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Y_M;
        end
      end
    end



  assign Bit_Concat_out1_1 = {Switch5_out1_1, Delay11_out1};



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_1_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_1 <= Bit_Concat_out1_1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_1_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_1 <= Delay3_out1_1;
        end
      end
    end



  assign Data_Type_Conversion_out1_1 = Delay2_out1_1;



  assign y_m_0_out1 = Data_Type_Conversion_out1_1 != 24'b000000000000000000000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay17_process
      if (i_RST_N == 1'b0) begin
        Delay17_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= y_m_0_out1;
        end
      end
    end



  assign x_0_out1 =  ~ (Delay16_out1 & Delay17_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay15_process
      if (i_RST_N == 1'b0) begin
        Delay15_reg[0] <= 1'b0;
        Delay15_reg[1] <= 1'b0;
        Delay15_reg[2] <= 1'b0;
        Delay15_reg[3] <= 1'b0;
        Delay15_reg[4] <= 1'b0;
        Delay15_reg[5] <= 1'b0;
        Delay15_reg[6] <= 1'b0;
        Delay15_reg[7] <= 1'b0;
        Delay15_reg[8] <= 1'b0;
        Delay15_reg[9] <= 1'b0;
        Delay15_reg[10] <= 1'b0;
        Delay15_reg[11] <= 1'b0;
        Delay15_reg[12] <= 1'b0;
        Delay15_reg[13] <= 1'b0;
        Delay15_reg[14] <= 1'b0;
        Delay15_reg[15] <= 1'b0;
        Delay15_reg[16] <= 1'b0;
        Delay15_reg[17] <= 1'b0;
        Delay15_reg[18] <= 1'b0;
        Delay15_reg[19] <= 1'b0;
        Delay15_reg[20] <= 1'b0;
        Delay15_reg[21] <= 1'b0;
        Delay15_reg[22] <= 1'b0;
        Delay15_reg[23] <= 1'b0;
        Delay15_reg[24] <= 1'b0;
        Delay15_reg[25] <= 1'b0;
        Delay15_reg[26] <= 1'b0;
        Delay15_reg[27] <= 1'b0;
        Delay15_reg[28] <= 1'b0;
        Delay15_reg[29] <= 1'b0;
        Delay15_reg[30] <= 1'b0;
        Delay15_reg[31] <= 1'b0;
        Delay15_reg[32] <= 1'b0;
        Delay15_reg[33] <= 1'b0;
        Delay15_reg[34] <= 1'b0;
        Delay15_reg[35] <= 1'b0;
        Delay15_reg[36] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay15_reg[0] <= Delay15_reg_next[0];
          Delay15_reg[1] <= Delay15_reg_next[1];
          Delay15_reg[2] <= Delay15_reg_next[2];
          Delay15_reg[3] <= Delay15_reg_next[3];
          Delay15_reg[4] <= Delay15_reg_next[4];
          Delay15_reg[5] <= Delay15_reg_next[5];
          Delay15_reg[6] <= Delay15_reg_next[6];
          Delay15_reg[7] <= Delay15_reg_next[7];
          Delay15_reg[8] <= Delay15_reg_next[8];
          Delay15_reg[9] <= Delay15_reg_next[9];
          Delay15_reg[10] <= Delay15_reg_next[10];
          Delay15_reg[11] <= Delay15_reg_next[11];
          Delay15_reg[12] <= Delay15_reg_next[12];
          Delay15_reg[13] <= Delay15_reg_next[13];
          Delay15_reg[14] <= Delay15_reg_next[14];
          Delay15_reg[15] <= Delay15_reg_next[15];
          Delay15_reg[16] <= Delay15_reg_next[16];
          Delay15_reg[17] <= Delay15_reg_next[17];
          Delay15_reg[18] <= Delay15_reg_next[18];
          Delay15_reg[19] <= Delay15_reg_next[19];
          Delay15_reg[20] <= Delay15_reg_next[20];
          Delay15_reg[21] <= Delay15_reg_next[21];
          Delay15_reg[22] <= Delay15_reg_next[22];
          Delay15_reg[23] <= Delay15_reg_next[23];
          Delay15_reg[24] <= Delay15_reg_next[24];
          Delay15_reg[25] <= Delay15_reg_next[25];
          Delay15_reg[26] <= Delay15_reg_next[26];
          Delay15_reg[27] <= Delay15_reg_next[27];
          Delay15_reg[28] <= Delay15_reg_next[28];
          Delay15_reg[29] <= Delay15_reg_next[29];
          Delay15_reg[30] <= Delay15_reg_next[30];
          Delay15_reg[31] <= Delay15_reg_next[31];
          Delay15_reg[32] <= Delay15_reg_next[32];
          Delay15_reg[33] <= Delay15_reg_next[33];
          Delay15_reg[34] <= Delay15_reg_next[34];
          Delay15_reg[35] <= Delay15_reg_next[35];
          Delay15_reg[36] <= Delay15_reg_next[36];
        end
      end
    end

  assign Delay15_out1 = Delay15_reg[36];
  assign Delay15_reg_next[0] = x_0_out1;
  assign Delay15_reg_next[1] = Delay15_reg[0];
  assign Delay15_reg_next[2] = Delay15_reg[1];
  assign Delay15_reg_next[3] = Delay15_reg[2];
  assign Delay15_reg_next[4] = Delay15_reg[3];
  assign Delay15_reg_next[5] = Delay15_reg[4];
  assign Delay15_reg_next[6] = Delay15_reg[5];
  assign Delay15_reg_next[7] = Delay15_reg[6];
  assign Delay15_reg_next[8] = Delay15_reg[7];
  assign Delay15_reg_next[9] = Delay15_reg[8];
  assign Delay15_reg_next[10] = Delay15_reg[9];
  assign Delay15_reg_next[11] = Delay15_reg[10];
  assign Delay15_reg_next[12] = Delay15_reg[11];
  assign Delay15_reg_next[13] = Delay15_reg[12];
  assign Delay15_reg_next[14] = Delay15_reg[13];
  assign Delay15_reg_next[15] = Delay15_reg[14];
  assign Delay15_reg_next[16] = Delay15_reg[15];
  assign Delay15_reg_next[17] = Delay15_reg[16];
  assign Delay15_reg_next[18] = Delay15_reg[17];
  assign Delay15_reg_next[19] = Delay15_reg[18];
  assign Delay15_reg_next[20] = Delay15_reg[19];
  assign Delay15_reg_next[21] = Delay15_reg[20];
  assign Delay15_reg_next[22] = Delay15_reg[21];
  assign Delay15_reg_next[23] = Delay15_reg[22];
  assign Delay15_reg_next[24] = Delay15_reg[23];
  assign Delay15_reg_next[25] = Delay15_reg[24];
  assign Delay15_reg_next[26] = Delay15_reg[25];
  assign Delay15_reg_next[27] = Delay15_reg[26];
  assign Delay15_reg_next[28] = Delay15_reg[27];
  assign Delay15_reg_next[29] = Delay15_reg[28];
  assign Delay15_reg_next[30] = Delay15_reg[29];
  assign Delay15_reg_next[31] = Delay15_reg[30];
  assign Delay15_reg_next[32] = Delay15_reg[31];
  assign Delay15_reg_next[33] = Delay15_reg[32];
  assign Delay15_reg_next[34] = Delay15_reg[33];
  assign Delay15_reg_next[35] = Delay15_reg[34];
  assign Delay15_reg_next[36] = Delay15_reg[35];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_2_process
      if (i_RST_N == 1'b0) begin
        Delay3_reg[0] <= 1'b0;
        Delay3_reg[1] <= 1'b0;
        Delay3_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
          Delay3_reg[2] <= Delay3_reg_next[2];
        end
      end
    end

  assign Delay3_out1_2 = Delay3_reg[2];
  assign Delay3_reg_next[0] = Y_S;
  assign Delay3_reg_next[1] = Delay3_reg[0];
  assign Delay3_reg_next[2] = Delay3_reg[1];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_3 <= Delay3_out1_2;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_1_process
      if (i_RST_N == 1'b0) begin
        reduced_reg[0] <= 1'b0;
        reduced_reg[1] <= 1'b0;
        reduced_reg[2] <= 1'b0;
        reduced_reg[3] <= 1'b0;
        reduced_reg[4] <= 1'b0;
        reduced_reg[5] <= 1'b0;
        reduced_reg[6] <= 1'b0;
        reduced_reg[7] <= 1'b0;
        reduced_reg[8] <= 1'b0;
        reduced_reg[9] <= 1'b0;
        reduced_reg[10] <= 1'b0;
        reduced_reg[11] <= 1'b0;
        reduced_reg[12] <= 1'b0;
        reduced_reg[13] <= 1'b0;
        reduced_reg[14] <= 1'b0;
        reduced_reg[15] <= 1'b0;
        reduced_reg[16] <= 1'b0;
        reduced_reg[17] <= 1'b0;
        reduced_reg[18] <= 1'b0;
        reduced_reg[19] <= 1'b0;
        reduced_reg[20] <= 1'b0;
        reduced_reg[21] <= 1'b0;
        reduced_reg[22] <= 1'b0;
        reduced_reg[23] <= 1'b0;
        reduced_reg[24] <= 1'b0;
        reduced_reg[25] <= 1'b0;
        reduced_reg[26] <= 1'b0;
        reduced_reg[27] <= 1'b0;
        reduced_reg[28] <= 1'b0;
        reduced_reg[29] <= 1'b0;
        reduced_reg[30] <= 1'b0;
        reduced_reg[31] <= 1'b0;
        reduced_reg[32] <= 1'b0;
        reduced_reg[33] <= 1'b0;
        reduced_reg[34] <= 1'b0;
        reduced_reg[35] <= 1'b0;
        reduced_reg[36] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
          reduced_reg[10] <= reduced_reg_next[10];
          reduced_reg[11] <= reduced_reg_next[11];
          reduced_reg[12] <= reduced_reg_next[12];
          reduced_reg[13] <= reduced_reg_next[13];
          reduced_reg[14] <= reduced_reg_next[14];
          reduced_reg[15] <= reduced_reg_next[15];
          reduced_reg[16] <= reduced_reg_next[16];
          reduced_reg[17] <= reduced_reg_next[17];
          reduced_reg[18] <= reduced_reg_next[18];
          reduced_reg[19] <= reduced_reg_next[19];
          reduced_reg[20] <= reduced_reg_next[20];
          reduced_reg[21] <= reduced_reg_next[21];
          reduced_reg[22] <= reduced_reg_next[22];
          reduced_reg[23] <= reduced_reg_next[23];
          reduced_reg[24] <= reduced_reg_next[24];
          reduced_reg[25] <= reduced_reg_next[25];
          reduced_reg[26] <= reduced_reg_next[26];
          reduced_reg[27] <= reduced_reg_next[27];
          reduced_reg[28] <= reduced_reg_next[28];
          reduced_reg[29] <= reduced_reg_next[29];
          reduced_reg[30] <= reduced_reg_next[30];
          reduced_reg[31] <= reduced_reg_next[31];
          reduced_reg[32] <= reduced_reg_next[32];
          reduced_reg[33] <= reduced_reg_next[33];
          reduced_reg[34] <= reduced_reg_next[34];
          reduced_reg[35] <= reduced_reg_next[35];
          reduced_reg[36] <= reduced_reg_next[36];
        end
      end
    end

  assign Delay3_out1_4 = reduced_reg[36];
  assign reduced_reg_next[0] = Delay3_out1_3;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];
  assign reduced_reg_next[10] = reduced_reg[9];
  assign reduced_reg_next[11] = reduced_reg[10];
  assign reduced_reg_next[12] = reduced_reg[11];
  assign reduced_reg_next[13] = reduced_reg[12];
  assign reduced_reg_next[14] = reduced_reg[13];
  assign reduced_reg_next[15] = reduced_reg[14];
  assign reduced_reg_next[16] = reduced_reg[15];
  assign reduced_reg_next[17] = reduced_reg[16];
  assign reduced_reg_next[18] = reduced_reg[17];
  assign reduced_reg_next[19] = reduced_reg[18];
  assign reduced_reg_next[20] = reduced_reg[19];
  assign reduced_reg_next[21] = reduced_reg[20];
  assign reduced_reg_next[22] = reduced_reg[21];
  assign reduced_reg_next[23] = reduced_reg[22];
  assign reduced_reg_next[24] = reduced_reg[23];
  assign reduced_reg_next[25] = reduced_reg[24];
  assign reduced_reg_next[26] = reduced_reg[25];
  assign reduced_reg_next[27] = reduced_reg[26];
  assign reduced_reg_next[28] = reduced_reg[27];
  assign reduced_reg_next[29] = reduced_reg[28];
  assign reduced_reg_next[30] = reduced_reg[29];
  assign reduced_reg_next[31] = reduced_reg[30];
  assign reduced_reg_next[32] = reduced_reg[31];
  assign reduced_reg_next[33] = reduced_reg[32];
  assign reduced_reg_next[34] = reduced_reg[33];
  assign reduced_reg_next[35] = reduced_reg[34];
  assign reduced_reg_next[36] = reduced_reg[35];



  assign y_m_0_out1_1 = Data_Type_Conversion_out1_1 == 24'b000000000000000000000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay11_1_process
      if (i_RST_N == 1'b0) begin
        Delay11_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1_1 <= y_m_0_out1_1;
        end
      end
    end



  assign x_m_0_out1_1 = Data_Type_Conversion_out1 == 24'b000000000000000000000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay12_1_process
      if (i_RST_N == 1'b0) begin
        Delay12_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay12_out1_1 <= x_m_0_out1_1;
        end
      end
    end



  assign Logical_Operator_out1 = Delay11_out1_1 & Delay12_out1_1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay13_process
      if (i_RST_N == 1'b0) begin
        Delay13_reg[0] <= 1'b0;
        Delay13_reg[1] <= 1'b0;
        Delay13_reg[2] <= 1'b0;
        Delay13_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_reg[0] <= Delay13_reg_next[0];
          Delay13_reg[1] <= Delay13_reg_next[1];
          Delay13_reg[2] <= Delay13_reg_next[2];
          Delay13_reg[3] <= Delay13_reg_next[3];
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[3];
  assign Delay13_reg_next[0] = X_S;
  assign Delay13_reg_next[1] = Delay13_reg[0];
  assign Delay13_reg_next[2] = Delay13_reg[1];
  assign Delay13_reg_next[3] = Delay13_reg[2];



  assign sign_0_out1 = 1'b0;



  assign Switch_out1 = (Logical_Operator_out1 == 1'b0 ? Delay13_out1 :
              sign_0_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_process
      if (i_RST_N == 1'b0) begin
        Delay6_reg[0] <= 1'b0;
        Delay6_reg[1] <= 1'b0;
        Delay6_reg[2] <= 1'b0;
        Delay6_reg[3] <= 1'b0;
        Delay6_reg[4] <= 1'b0;
        Delay6_reg[5] <= 1'b0;
        Delay6_reg[6] <= 1'b0;
        Delay6_reg[7] <= 1'b0;
        Delay6_reg[8] <= 1'b0;
        Delay6_reg[9] <= 1'b0;
        Delay6_reg[10] <= 1'b0;
        Delay6_reg[11] <= 1'b0;
        Delay6_reg[12] <= 1'b0;
        Delay6_reg[13] <= 1'b0;
        Delay6_reg[14] <= 1'b0;
        Delay6_reg[15] <= 1'b0;
        Delay6_reg[16] <= 1'b0;
        Delay6_reg[17] <= 1'b0;
        Delay6_reg[18] <= 1'b0;
        Delay6_reg[19] <= 1'b0;
        Delay6_reg[20] <= 1'b0;
        Delay6_reg[21] <= 1'b0;
        Delay6_reg[22] <= 1'b0;
        Delay6_reg[23] <= 1'b0;
        Delay6_reg[24] <= 1'b0;
        Delay6_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Delay6_reg_next[0];
          Delay6_reg[1] <= Delay6_reg_next[1];
          Delay6_reg[2] <= Delay6_reg_next[2];
          Delay6_reg[3] <= Delay6_reg_next[3];
          Delay6_reg[4] <= Delay6_reg_next[4];
          Delay6_reg[5] <= Delay6_reg_next[5];
          Delay6_reg[6] <= Delay6_reg_next[6];
          Delay6_reg[7] <= Delay6_reg_next[7];
          Delay6_reg[8] <= Delay6_reg_next[8];
          Delay6_reg[9] <= Delay6_reg_next[9];
          Delay6_reg[10] <= Delay6_reg_next[10];
          Delay6_reg[11] <= Delay6_reg_next[11];
          Delay6_reg[12] <= Delay6_reg_next[12];
          Delay6_reg[13] <= Delay6_reg_next[13];
          Delay6_reg[14] <= Delay6_reg_next[14];
          Delay6_reg[15] <= Delay6_reg_next[15];
          Delay6_reg[16] <= Delay6_reg_next[16];
          Delay6_reg[17] <= Delay6_reg_next[17];
          Delay6_reg[18] <= Delay6_reg_next[18];
          Delay6_reg[19] <= Delay6_reg_next[19];
          Delay6_reg[20] <= Delay6_reg_next[20];
          Delay6_reg[21] <= Delay6_reg_next[21];
          Delay6_reg[22] <= Delay6_reg_next[22];
          Delay6_reg[23] <= Delay6_reg_next[23];
          Delay6_reg[24] <= Delay6_reg_next[24];
          Delay6_reg[25] <= Delay6_reg_next[25];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[25];
  assign Delay6_reg_next[0] = Switch_out1;
  assign Delay6_reg_next[1] = Delay6_reg[0];
  assign Delay6_reg_next[2] = Delay6_reg[1];
  assign Delay6_reg_next[3] = Delay6_reg[2];
  assign Delay6_reg_next[4] = Delay6_reg[3];
  assign Delay6_reg_next[5] = Delay6_reg[4];
  assign Delay6_reg_next[6] = Delay6_reg[5];
  assign Delay6_reg_next[7] = Delay6_reg[6];
  assign Delay6_reg_next[8] = Delay6_reg[7];
  assign Delay6_reg_next[9] = Delay6_reg[8];
  assign Delay6_reg_next[10] = Delay6_reg[9];
  assign Delay6_reg_next[11] = Delay6_reg[10];
  assign Delay6_reg_next[12] = Delay6_reg[11];
  assign Delay6_reg_next[13] = Delay6_reg[12];
  assign Delay6_reg_next[14] = Delay6_reg[13];
  assign Delay6_reg_next[15] = Delay6_reg[14];
  assign Delay6_reg_next[16] = Delay6_reg[15];
  assign Delay6_reg_next[17] = Delay6_reg[16];
  assign Delay6_reg_next[18] = Delay6_reg[17];
  assign Delay6_reg_next[19] = Delay6_reg[18];
  assign Delay6_reg_next[20] = Delay6_reg[19];
  assign Delay6_reg_next[21] = Delay6_reg[20];
  assign Delay6_reg_next[22] = Delay6_reg[21];
  assign Delay6_reg_next[23] = Delay6_reg[22];
  assign Delay6_reg_next[24] = Delay6_reg[23];
  assign Delay6_reg_next[25] = Delay6_reg[24];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay10_process
      if (i_RST_N == 1'b0) begin
        Delay10_reg[0] <= 1'b0;
        Delay10_reg[1] <= 1'b0;
        Delay10_reg[2] <= 1'b0;
        Delay10_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_reg[0] <= Delay10_reg_next[0];
          Delay10_reg[1] <= Delay10_reg_next[1];
          Delay10_reg[2] <= Delay10_reg_next[2];
          Delay10_reg[3] <= Delay10_reg_next[3];
        end
      end
    end

  assign Delay10_out1 = Delay10_reg[3];
  assign Delay10_reg_next[0] = Delay6_out1;
  assign Delay10_reg_next[1] = Delay10_reg[0];
  assign Delay10_reg_next[2] = Delay10_reg[1];
  assign Delay10_reg_next[3] = Delay10_reg[2];



  assign Logical_Operator1_out1 =  ~ Delay10_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_process
      if (i_RST_N == 1'b0) begin
        Delay4_reg[0] <= 1'b0;
        Delay4_reg[1] <= 1'b0;
        Delay4_reg[2] <= 1'b0;
        Delay4_reg[3] <= 1'b0;
        Delay4_reg[4] <= 1'b0;
        Delay4_reg[5] <= 1'b0;
        Delay4_reg[6] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
          Delay4_reg[2] <= Delay4_reg_next[2];
          Delay4_reg[3] <= Delay4_reg_next[3];
          Delay4_reg[4] <= Delay4_reg_next[4];
          Delay4_reg[5] <= Delay4_reg_next[5];
          Delay4_reg[6] <= Delay4_reg_next[6];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[6];
  assign Delay4_reg_next[0] = Logical_Operator1_out1;
  assign Delay4_reg_next[1] = Delay4_reg[0];
  assign Delay4_reg_next[2] = Delay4_reg[1];
  assign Delay4_reg_next[3] = Delay4_reg[2];
  assign Delay4_reg_next[4] = Delay4_reg[3];
  assign Delay4_reg_next[5] = Delay4_reg[4];
  assign Delay4_reg_next[6] = Delay4_reg[5];



  assign y_m_x_m_relop1 = Data_Type_Conversion_out1_1 > Data_Type_Conversion_out1;



  assign Constant4_out1 = 8'b01111110;



  assign Constant4_out1_dtc = {1'b0, Constant4_out1};



  assign Constant3_out1 = 8'b01111111;



  assign Constant3_out1_dtc = {1'b0, Constant3_out1};



  assign Switch1_out1 = (Delay12_out1 == 8'b00000000 ? Constant4_out1_dtc :
              Constant3_out1_dtc);



  assign Sum_1 = {24'b0, Delay12_out1};
  assign Sum_2 = {{23{Switch1_out1[8]}}, Switch1_out1};
  assign Sum_sub_temp = Sum_1 - Sum_2;
  assign Sum_out1 = Sum_sub_temp[8:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Sum_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_1_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_1 <= Delay1_out1;
        end
      end
    end



  assign Constant4_out1_1 = 8'b01111110;



  assign Constant4_out1_dtc_1 = {1'b0, Constant4_out1_1};



  assign Constant3_out1_1 = 8'b01111111;



  assign Constant3_out1_dtc_1 = {1'b0, Constant3_out1_1};



  assign Switch1_out1_1 = (Delay9_out1 == 8'b00000000 ? Constant4_out1_dtc_1 :
              Constant3_out1_dtc_1);



  assign Sum_4 = {24'b0, Delay9_out1};
  assign Sum_5 = {{23{Switch1_out1_1[8]}}, Switch1_out1_1};
  assign Sum_sub_temp_1 = Sum_4 - Sum_5;
  assign Sum_out1_1 = Sum_sub_temp_1[8:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_1_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_1 <= Sum_out1_1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_2_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_2 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_2 <= Delay1_out1_1;
        end
      end
    end



  assign y_exp_x_exp_relop1 = Delay4_out1_1 == Delay4_out1_2;



  assign Logical_Operator_out1_1 = y_m_x_m_relop1 & y_exp_x_exp_relop1;



  assign y_exp_x_exp_relop1_1 = Delay4_out1_1 > Delay4_out1_2;



  assign Logical_Operator1_out1_1 = Logical_Operator_out1_1 | y_exp_x_exp_relop1_1;



  assign if_swap3_out1 = (Logical_Operator1_out1_1 == 1'b0 ? Data_Type_Conversion_out1_1 :
              Data_Type_Conversion_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_3_process
      if (i_RST_N == 1'b0) begin
        Delay4_reg_1[0] <= 24'b000000000000000000000000;
        Delay4_reg_1[1] <= 24'b000000000000000000000000;
        Delay4_reg_1[2] <= 24'b000000000000000000000000;
        Delay4_reg_1[3] <= 24'b000000000000000000000000;
        Delay4_reg_1[4] <= 24'b000000000000000000000000;
        Delay4_reg_1[5] <= 24'b000000000000000000000000;
        Delay4_reg_1[6] <= 24'b000000000000000000000000;
        Delay4_reg_1[7] <= 24'b000000000000000000000000;
        Delay4_reg_1[8] <= 24'b000000000000000000000000;
        Delay4_reg_1[9] <= 24'b000000000000000000000000;
        Delay4_reg_1[10] <= 24'b000000000000000000000000;
        Delay4_reg_1[11] <= 24'b000000000000000000000000;
        Delay4_reg_1[12] <= 24'b000000000000000000000000;
        Delay4_reg_1[13] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_reg_1[0] <= Delay4_reg_next_1[0];
          Delay4_reg_1[1] <= Delay4_reg_next_1[1];
          Delay4_reg_1[2] <= Delay4_reg_next_1[2];
          Delay4_reg_1[3] <= Delay4_reg_next_1[3];
          Delay4_reg_1[4] <= Delay4_reg_next_1[4];
          Delay4_reg_1[5] <= Delay4_reg_next_1[5];
          Delay4_reg_1[6] <= Delay4_reg_next_1[6];
          Delay4_reg_1[7] <= Delay4_reg_next_1[7];
          Delay4_reg_1[8] <= Delay4_reg_next_1[8];
          Delay4_reg_1[9] <= Delay4_reg_next_1[9];
          Delay4_reg_1[10] <= Delay4_reg_next_1[10];
          Delay4_reg_1[11] <= Delay4_reg_next_1[11];
          Delay4_reg_1[12] <= Delay4_reg_next_1[12];
          Delay4_reg_1[13] <= Delay4_reg_next_1[13];
        end
      end
    end

  assign Delay4_out1_3 = Delay4_reg_1[13];
  assign Delay4_reg_next_1[0] = if_swap3_out1;
  assign Delay4_reg_next_1[1] = Delay4_reg_1[0];
  assign Delay4_reg_next_1[2] = Delay4_reg_1[1];
  assign Delay4_reg_next_1[3] = Delay4_reg_1[2];
  assign Delay4_reg_next_1[4] = Delay4_reg_1[3];
  assign Delay4_reg_next_1[5] = Delay4_reg_1[4];
  assign Delay4_reg_next_1[6] = Delay4_reg_1[5];
  assign Delay4_reg_next_1[7] = Delay4_reg_1[6];
  assign Delay4_reg_next_1[8] = Delay4_reg_1[7];
  assign Delay4_reg_next_1[9] = Delay4_reg_1[8];
  assign Delay4_reg_next_1[10] = Delay4_reg_1[9];
  assign Delay4_reg_next_1[11] = Delay4_reg_1[10];
  assign Delay4_reg_next_1[12] = Delay4_reg_1[11];
  assign Delay4_reg_next_1[13] = Delay4_reg_1[12];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_2_process
      if (i_RST_N == 1'b0) begin
        Delay2_reg[0] <= 24'b000000000000000000000000;
        Delay2_reg[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
        end
      end
    end

  assign Delay2_out1_2 = Delay2_reg[1];
  assign Delay2_reg_next[0] = Delay4_out1_3;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  assign y_m_0_out1_2 = Delay2_out1_2 == 24'b000000000000000000000000;



  assign alpha1_out1 = 1'b1;



  assign if_swap1_out1 = (Logical_Operator1_out1_1 == 1'b0 ? Data_Type_Conversion_out1 :
              Data_Type_Conversion_out1_1);



  assign BitSlice_out1 = if_swap1_out1[22:18];



  assign DTC_out1 = {3'b0, BitSlice_out1};



  assign coeffs_table_out1[0] = 27'sb110000011111000001111100001;
  assign coeffs_table_out1[1] = 27'sb110001011001011100001011011;
  assign coeffs_table_out1[2] = 27'sb110010001110110101111111110;
  assign coeffs_table_out1[3] = 27'sb110010111111110010111111110;
  assign coeffs_table_out1[4] = 27'sb110011101100110001111110001;
  assign coeffs_table_out1[5] = 27'sb110100010110001101101010000;
  assign coeffs_table_out1[6] = 27'sb110100111100011101010111011;
  assign coeffs_table_out1[7] = 27'sb110101011111110101011111111;
  assign coeffs_table_out1[8] = 27'sb110110000000100111111101100;
  assign coeffs_table_out1[9] = 27'sb110110011111000100100010010;
  assign coeffs_table_out1[10] = 27'sb110110111011011001001010010;
  assign coeffs_table_out1[11] = 27'sb110111010101110010001100110;
  assign coeffs_table_out1[12] = 27'sb110111101110011010101000101;
  assign coeffs_table_out1[13] = 27'sb111000000101011100010000101;
  assign coeffs_table_out1[14] = 27'sb111000011010111111110100101;
  assign coeffs_table_out1[15] = 27'sb111000101111001101001010100;
  assign coeffs_table_out1[16] = 27'sb111001000010001011010100100;
  assign coeffs_table_out1[17] = 27'sb111001010100000000101000001;
  assign coeffs_table_out1[18] = 27'sb111001100100110010110011001;
  assign coeffs_table_out1[19] = 27'sb111001110100100110111111111;
  assign coeffs_table_out1[20] = 27'sb111010000011100001111001111;
  assign coeffs_table_out1[21] = 27'sb111010010001100111110000101;
  assign coeffs_table_out1[22] = 27'sb111010011110111100011011001;
  assign coeffs_table_out1[23] = 27'sb111010101011100011011010001;
  assign coeffs_table_out1[24] = 27'sb111010110111011111111010111;
  assign coeffs_table_out1[25] = 27'sb111011000010110100111000111;
  assign coeffs_table_out1[26] = 27'sb111011001101100100111111101;
  assign coeffs_table_out1[27] = 27'sb111011010111110010101100011;
  assign coeffs_table_out1[28] = 27'sb111011100001100000001111101;
  assign coeffs_table_out1[29] = 27'sb111011101010101111101110001;
  assign coeffs_table_out1[30] = 27'sb111011110011100011000010000;
  assign coeffs_table_out1[31] = 27'sb111011111011111011111011111;



  assign coeffs_table_domain_out1 = (DTC_out1 == 8'b00000000 ? coeffs_table_out1[0] :
              (DTC_out1 == 8'b00000001 ? coeffs_table_out1[1] :
              (DTC_out1 == 8'b00000010 ? coeffs_table_out1[2] :
              (DTC_out1 == 8'b00000011 ? coeffs_table_out1[3] :
              (DTC_out1 == 8'b00000100 ? coeffs_table_out1[4] :
              (DTC_out1 == 8'b00000101 ? coeffs_table_out1[5] :
              (DTC_out1 == 8'b00000110 ? coeffs_table_out1[6] :
              (DTC_out1 == 8'b00000111 ? coeffs_table_out1[7] :
              (DTC_out1 == 8'b00001000 ? coeffs_table_out1[8] :
              (DTC_out1 == 8'b00001001 ? coeffs_table_out1[9] :
              (DTC_out1 == 8'b00001010 ? coeffs_table_out1[10] :
              (DTC_out1 == 8'b00001011 ? coeffs_table_out1[11] :
              (DTC_out1 == 8'b00001100 ? coeffs_table_out1[12] :
              (DTC_out1 == 8'b00001101 ? coeffs_table_out1[13] :
              (DTC_out1 == 8'b00001110 ? coeffs_table_out1[14] :
              (DTC_out1 == 8'b00001111 ? coeffs_table_out1[15] :
              (DTC_out1 == 8'b00010000 ? coeffs_table_out1[16] :
              (DTC_out1 == 8'b00010001 ? coeffs_table_out1[17] :
              (DTC_out1 == 8'b00010010 ? coeffs_table_out1[18] :
              (DTC_out1 == 8'b00010011 ? coeffs_table_out1[19] :
              (DTC_out1 == 8'b00010100 ? coeffs_table_out1[20] :
              (DTC_out1 == 8'b00010101 ? coeffs_table_out1[21] :
              (DTC_out1 == 8'b00010110 ? coeffs_table_out1[22] :
              (DTC_out1 == 8'b00010111 ? coeffs_table_out1[23] :
              (DTC_out1 == 8'b00011000 ? coeffs_table_out1[24] :
              (DTC_out1 == 8'b00011001 ? coeffs_table_out1[25] :
              (DTC_out1 == 8'b00011010 ? coeffs_table_out1[26] :
              (DTC_out1 == 8'b00011011 ? coeffs_table_out1[27] :
              (DTC_out1 == 8'b00011100 ? coeffs_table_out1[28] :
              (DTC_out1 == 8'b00011101 ? coeffs_table_out1[29] :
              (DTC_out1 == 8'b00011110 ? coeffs_table_out1[30] :
              coeffs_table_out1[31])))))))))))))))))))))))))))))));



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_3_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_5 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_5 <= coeffs_table_domain_out1;
        end
      end
    end



  assign DTC1_out1 = {1'b0, {if_swap1_out1, 2'b00}};



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_4_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_4 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_4 <= DTC1_out1;
        end
      end
    end



  assign res_x_mul_temp = Delay3_out1_5 * Delay4_out1_4;
  assign res_x_out1 = res_x_mul_temp[51:25];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_process
      if (i_RST_N == 1'b0) begin
        Delay5_reg[0] <= 27'sb000000000000000000000000000;
        Delay5_reg[1] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= Delay5_reg_next[0];
          Delay5_reg[1] <= Delay5_reg_next[1];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];
  assign Delay5_reg_next[0] = res_x_out1;
  assign Delay5_reg_next[1] = Delay5_reg[0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_2_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_2 <= DTC_out1;
        end
      end
    end



  assign coeffs_table1_out1[0] = 27'sb011111100000110110011011000;
  assign coeffs_table1_out1[1] = 27'sb011110100100101000000001110;
  assign coeffs_table1_out1[2] = 27'sb011101101011111001001011110;
  assign coeffs_table1_out1[3] = 27'sb011100110110010110111111011;
  assign coeffs_table1_out1[4] = 27'sb011100000011110000100111010;
  assign coeffs_table1_out1[5] = 27'sb011011010011110111000001011;
  assign coeffs_table1_out1[6] = 27'sb011010100110011100101111101;
  assign coeffs_table1_out1[7] = 27'sb011001111011010101101011001;
  assign coeffs_table1_out1[8] = 27'sb011001010010010110111001110;
  assign coeffs_table1_out1[9] = 27'sb011000101011010110100100100;
  assign coeffs_table1_out1[10] = 27'sb011000000110001011110000001;
  assign coeffs_table1_out1[11] = 27'sb010111100010101110010101101;
  assign coeffs_table1_out1[12] = 27'sb010111000000110110111100101;
  assign coeffs_table1_out1[13] = 27'sb010110100000011110110110110;
  assign coeffs_table1_out1[14] = 27'sb010110000001011111111010001;
  assign coeffs_table1_out1[15] = 27'sb010101100011110100011110100;
  assign coeffs_table1_out1[16] = 27'sb010101000111010111011000111;
  assign coeffs_table1_out1[17] = 27'sb010100101100000011111001100;
  assign coeffs_table1_out1[18] = 27'sb010100010001110101101000011;
  assign coeffs_table1_out1[19] = 27'sb010011111000101000100011100;
  assign coeffs_table1_out1[20] = 27'sb010011100000011000111100001;
  assign coeffs_table1_out1[21] = 27'sb010011001001000011010101111;
  assign coeffs_table1_out1[22] = 27'sb010010110010100100100100001;
  assign coeffs_table1_out1[23] = 27'sb010010011100111001101001011;
  assign coeffs_table1_out1[24] = 27'sb010010000111111111110101001;
  assign coeffs_table1_out1[25] = 27'sb010001110011110100100011100;
  assign coeffs_table1_out1[26] = 27'sb010001100000010101011011110;
  assign coeffs_table1_out1[27] = 27'sb010001001101100000001111010;
  assign coeffs_table1_out1[28] = 27'sb010000111011010010111001000;
  assign coeffs_table1_out1[29] = 27'sb010000101001101011011100100;
  assign coeffs_table1_out1[30] = 27'sb010000011000101000000101100;
  assign coeffs_table1_out1[31] = 27'sb010000001000000111000110101;



  assign coeffs_table_domain_1_out1 = (Delay1_out1_2 == 8'b00000000 ? coeffs_table1_out1[0] :
              (Delay1_out1_2 == 8'b00000001 ? coeffs_table1_out1[1] :
              (Delay1_out1_2 == 8'b00000010 ? coeffs_table1_out1[2] :
              (Delay1_out1_2 == 8'b00000011 ? coeffs_table1_out1[3] :
              (Delay1_out1_2 == 8'b00000100 ? coeffs_table1_out1[4] :
              (Delay1_out1_2 == 8'b00000101 ? coeffs_table1_out1[5] :
              (Delay1_out1_2 == 8'b00000110 ? coeffs_table1_out1[6] :
              (Delay1_out1_2 == 8'b00000111 ? coeffs_table1_out1[7] :
              (Delay1_out1_2 == 8'b00001000 ? coeffs_table1_out1[8] :
              (Delay1_out1_2 == 8'b00001001 ? coeffs_table1_out1[9] :
              (Delay1_out1_2 == 8'b00001010 ? coeffs_table1_out1[10] :
              (Delay1_out1_2 == 8'b00001011 ? coeffs_table1_out1[11] :
              (Delay1_out1_2 == 8'b00001100 ? coeffs_table1_out1[12] :
              (Delay1_out1_2 == 8'b00001101 ? coeffs_table1_out1[13] :
              (Delay1_out1_2 == 8'b00001110 ? coeffs_table1_out1[14] :
              (Delay1_out1_2 == 8'b00001111 ? coeffs_table1_out1[15] :
              (Delay1_out1_2 == 8'b00010000 ? coeffs_table1_out1[16] :
              (Delay1_out1_2 == 8'b00010001 ? coeffs_table1_out1[17] :
              (Delay1_out1_2 == 8'b00010010 ? coeffs_table1_out1[18] :
              (Delay1_out1_2 == 8'b00010011 ? coeffs_table1_out1[19] :
              (Delay1_out1_2 == 8'b00010100 ? coeffs_table1_out1[20] :
              (Delay1_out1_2 == 8'b00010101 ? coeffs_table1_out1[21] :
              (Delay1_out1_2 == 8'b00010110 ? coeffs_table1_out1[22] :
              (Delay1_out1_2 == 8'b00010111 ? coeffs_table1_out1[23] :
              (Delay1_out1_2 == 8'b00011000 ? coeffs_table1_out1[24] :
              (Delay1_out1_2 == 8'b00011001 ? coeffs_table1_out1[25] :
              (Delay1_out1_2 == 8'b00011010 ? coeffs_table1_out1[26] :
              (Delay1_out1_2 == 8'b00011011 ? coeffs_table1_out1[27] :
              (Delay1_out1_2 == 8'b00011100 ? coeffs_table1_out1[28] :
              (Delay1_out1_2 == 8'b00011101 ? coeffs_table1_out1[29] :
              (Delay1_out1_2 == 8'b00011110 ? coeffs_table1_out1[30] :
              coeffs_table1_out1[31])))))))))))))))))))))))))))))));



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_1_process
      if (i_RST_N == 1'b0) begin
        Delay6_reg_1[0] <= 27'sb000000000000000000000000000;
        Delay6_reg_1[1] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_reg_1[0] <= Delay6_reg_next_1[0];
          Delay6_reg_1[1] <= Delay6_reg_next_1[1];
        end
      end
    end

  assign Delay6_out1_1 = Delay6_reg_1[1];
  assign Delay6_reg_next_1[0] = coeffs_table_domain_1_out1;
  assign Delay6_reg_next_1[1] = Delay6_reg_1[0];



  assign res_x_coeffs_2_1_add_cast = {{5{Delay5_out1[26]}}, Delay5_out1};
  assign res_x_coeffs_2_1_add_cast_1 = {{5{Delay6_out1_1[26]}}, Delay6_out1_1};
  assign res_x_coeffs_2_1_add_temp = res_x_coeffs_2_1_add_cast + res_x_coeffs_2_1_add_cast_1;
  assign res_x_coeffs_2_1_out1 = {res_x_coeffs_2_1_add_temp[25:0], 1'b0};



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_1_process
      if (i_RST_N == 1'b0) begin
        Delay8_out1_1 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_1 <= res_x_coeffs_2_1_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay13_1_process
      if (i_RST_N == 1'b0) begin
        Delay13_reg_1[0] <= 27'sb000000000000000000000000000;
        Delay13_reg_1[1] <= 27'sb000000000000000000000000000;
        Delay13_reg_1[2] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_reg_1[0] <= Delay13_reg_next_1[0];
          Delay13_reg_1[1] <= Delay13_reg_next_1[1];
          Delay13_reg_1[2] <= Delay13_reg_next_1[2];
        end
      end
    end

  assign Delay13_out1_1 = Delay13_reg_1[2];
  assign Delay13_reg_next_1[0] = Delay8_out1_1;
  assign Delay13_reg_next_1[1] = Delay13_reg_1[0];
  assign Delay13_reg_next_1[2] = Delay13_reg_1[1];



  assign fi_2_0_2_0_fm_out1 = 2'b10;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_process
      if (i_RST_N == 1'b0) begin
        Delay7_reg[0] <= 27'sb000000000000000000000000000;
        Delay7_reg[1] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= Delay7_reg_next[0];
          Delay7_reg[1] <= Delay7_reg_next[1];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[1];
  assign Delay7_reg_next[0] = Delay4_out1_4;
  assign Delay7_reg_next[1] = Delay7_reg[0];



  assign DTC5_out1 = {Delay7_out1[25:0], 1'b0};



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay9_1_process
      if (i_RST_N == 1'b0) begin
        Delay9_out1_1 <= 27'b000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_1 <= DTC5_out1;
        end
      end
    end



  assign res_d_cast = {1'b0, Delay9_out1_1};
  assign res_d_mul_temp = Delay8_out1_1 * res_d_cast;
  assign res_d_cast_1 = res_d_mul_temp[53:0];
  assign res_d_out1 = res_d_cast_1[52:26];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay10_1_process
      if (i_RST_N == 1'b0) begin
        Delay10_reg_1[0] <= 27'b000000000000000000000000000;
        Delay10_reg_1[1] <= 27'b000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_reg_1[0] <= Delay10_reg_next_1[0];
          Delay10_reg_1[1] <= Delay10_reg_next_1[1];
        end
      end
    end

  assign Delay10_out1_1 = Delay10_reg_1[1];
  assign Delay10_reg_next_1[0] = res_d_out1;
  assign Delay10_reg_next_1[1] = Delay10_reg_1[0];



  assign fi_2_0_2_0_fm_res_d_sub_cast = {4'b0, {fi_2_0_2_0_fm_out1, 26'b00000000000000000000000000}};
  assign fi_2_0_2_0_fm_res_d_sub_cast_1 = {5'b0, Delay10_out1_1};
  assign fi_2_0_2_0_fm_res_d_sub_temp = fi_2_0_2_0_fm_res_d_sub_cast - fi_2_0_2_0_fm_res_d_sub_cast_1;
  assign fi_2_0_2_0_fm_res_d_out1 = fi_2_0_2_0_fm_res_d_sub_temp[26:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay14_process
      if (i_RST_N == 1'b0) begin
        Delay14_out1 <= 27'b000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= fi_2_0_2_0_fm_res_d_out1;
        end
      end
    end



  assign res_fi_2_0_2_0_fm_res_cast = {1'b0, Delay14_out1};
  assign res_fi_2_0_2_0_fm_res_mul_temp = Delay13_out1_1 * res_fi_2_0_2_0_fm_res_cast;
  assign res_fi_2_0_2_0_fm_res_cast_1 = res_fi_2_0_2_0_fm_res_mul_temp[53:0];
  assign res_fi_2_0_2_0_fm_res_out1 = res_fi_2_0_2_0_fm_res_cast_1[52:26];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay12_2_process
      if (i_RST_N == 1'b0) begin
        Delay12_reg[0] <= 27'b000000000000000000000000000;
        Delay12_reg[1] <= 27'b000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_reg[0] <= Delay12_reg_next[0];
          Delay12_reg[1] <= Delay12_reg_next[1];
        end
      end
    end

  assign Delay12_out1_2 = Delay12_reg[1];
  assign Delay12_reg_next[0] = res_fi_2_0_2_0_fm_res_out1;
  assign Delay12_reg_next[1] = Delay12_reg[0];



  assign Abs_y = {1'b0, Delay12_out1_2};
  assign Abs_out1 = Abs_y[26:0];



  assign Data_Type_Conversion_out1_2 = Abs_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_1_process
      if (i_RST_N == 1'b0) begin
        Delay5_reg_1[0] <= 27'b000000000000000000000000000;
        Delay5_reg_1[1] <= 27'b000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg_1[0] <= Delay5_reg_next_1[0];
          Delay5_reg_1[1] <= Delay5_reg_next_1[1];
        end
      end
    end

  assign Delay5_out1_1 = Delay5_reg_1[1];
  assign Delay5_reg_next_1[0] = Data_Type_Conversion_out1_2;
  assign Delay5_reg_next_1[1] = Delay5_reg_1[0];



  assign Bit_Slice32_out1 = Data_Type_Conversion_out1_2[24];



  assign Constant32_out1 = 5'b00011;



  assign Bit_Slice33_out1 = Data_Type_Conversion_out1_2[25];



  assign Constant33_out1 = 5'b00010;



  assign Switch32_out1 = (Bit_Slice32_out1 == 1'b0 ? Constant32_out1 :
              Constant33_out1);



  assign Bit_Slice34_out1 = Data_Type_Conversion_out1_2[26];



  assign Constant34_out1 = 5'b00001;



  assign Switch33_out1 = (Bit_Slice33_out1 == 1'b0 ? Switch32_out1 :
              Constant34_out1);



  assign Constant35_out1 = 5'b00000;



  assign Switch34_out1 = (Bit_Slice34_out1 == 1'b0 ? Switch33_out1 :
              Constant35_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_4_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_6 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay3_out1_6 <= Switch34_out1;
        end
      end
    end



  assign Compare_To_Constant3_out1 = Delay3_out1_6 < 5'b00011;



  assign Bit_Slice25_out1 = Data_Type_Conversion_out1_2[16];



  assign Constant3_out1_2 = 5'b01011;



  assign Bit_Slice24_out1 = Data_Type_Conversion_out1_2[17];



  assign Constant2_out1 = 5'b01010;



  assign Switch2_out1 = (Bit_Slice25_out1 == 1'b0 ? Constant3_out1_2 :
              Constant2_out1);



  assign Bit_Slice27_out1 = Data_Type_Conversion_out1_2[18];



  assign Constant1_out1 = 5'b01001;



  assign Switch1_out1_2 = (Bit_Slice24_out1 == 1'b0 ? Switch2_out1 :
              Constant1_out1);



  assign Bit_Slice15_out1 = Data_Type_Conversion_out1_2[19];



  assign Constant124_out1 = 5'b01000;



  assign Switch116_out1 = (Bit_Slice27_out1 == 1'b0 ? Switch1_out1_2 :
              Constant124_out1);



  assign Bit_Slice16_out1 = Data_Type_Conversion_out1_2[20];



  assign Constant28_out1 = 5'b00111;



  assign Switch17_out1 = (Bit_Slice15_out1 == 1'b0 ? Switch116_out1 :
              Constant28_out1);



  assign Bit_Slice17_out1 = Data_Type_Conversion_out1_2[21];



  assign Constant26_out1 = 5'b00110;



  assign Switch18_out1 = (Bit_Slice16_out1 == 1'b0 ? Switch17_out1 :
              Constant26_out1);



  assign Bit_Slice28_out1 = Data_Type_Conversion_out1_2[22];



  assign Constant27_out1 = 5'b00101;



  assign Switch19_out1 = (Bit_Slice17_out1 == 1'b0 ? Switch18_out1 :
              Constant27_out1);



  assign Bit_Slice29_out1 = Data_Type_Conversion_out1_2[23];



  assign Constant29_out1 = 5'b00100;



  assign Switch28_out1 = (Bit_Slice28_out1 == 1'b0 ? Switch19_out1 :
              Constant29_out1);



  assign Constant30_out1 = 5'b00011;



  assign Switch29_out1 = (Bit_Slice29_out1 == 1'b0 ? Switch28_out1 :
              Constant30_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_2_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1_2 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay5_out1_2 <= Switch29_out1;
        end
      end
    end



  assign Switch3_out1 = (Compare_To_Constant3_out1 == 1'b0 ? Delay5_out1_2 :
              Delay3_out1_6);



  assign Compare_To_Constant5_out1 = Switch3_out1 < 5'b01011;



  assign Bit_Slice29_out1_1 = Data_Type_Conversion_out1_2[8];



  assign Constant29_out1_1 = 5'b10011;



  assign Bit_Slice30_out1 = Data_Type_Conversion_out1_2[9];



  assign Constant30_out1_1 = 5'b10010;



  assign Switch29_out1_1 = (Bit_Slice29_out1_1 == 1'b0 ? Constant29_out1_1 :
              Constant30_out1_1);



  assign Bit_Slice31_out1 = Data_Type_Conversion_out1_2[10];



  assign Constant31_out1 = 5'b10001;



  assign Switch30_out1 = (Bit_Slice30_out1 == 1'b0 ? Switch29_out1_1 :
              Constant31_out1);



  assign Bit_Slice32_out1_1 = Data_Type_Conversion_out1_2[11];



  assign Constant32_out1_1 = 5'b10000;



  assign Switch31_out1 = (Bit_Slice31_out1 == 1'b0 ? Switch30_out1 :
              Constant32_out1_1);



  assign Bit_Slice33_out1_1 = Data_Type_Conversion_out1_2[12];



  assign Constant33_out1_1 = 5'b01111;



  assign Switch32_out1_1 = (Bit_Slice32_out1_1 == 1'b0 ? Switch31_out1 :
              Constant33_out1_1);



  assign Bit_Slice34_out1_1 = Data_Type_Conversion_out1_2[13];



  assign Constant34_out1_1 = 5'b01110;



  assign Switch33_out1_1 = (Bit_Slice33_out1_1 == 1'b0 ? Switch32_out1_1 :
              Constant34_out1_1);



  assign Bit_Slice35_out1 = Data_Type_Conversion_out1_2[14];



  assign Constant35_out1_1 = 5'b01101;



  assign Switch34_out1_1 = (Bit_Slice34_out1_1 == 1'b0 ? Switch33_out1_1 :
              Constant35_out1_1);



  assign Bit_Slice26_out1 = Data_Type_Conversion_out1_2[15];



  assign Constant36_out1 = 5'b01100;



  assign Switch35_out1 = (Bit_Slice35_out1 == 1'b0 ? Switch34_out1_1 :
              Constant36_out1);



  assign Constant3_out1_3 = 5'b01011;



  assign Switch3_out1_1 = (Bit_Slice26_out1 == 1'b0 ? Switch35_out1 :
              Constant3_out1_3);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_2_process
      if (i_RST_N == 1'b0) begin
        Delay6_out1_2 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay6_out1_2 <= Switch3_out1_1;
        end
      end
    end



  assign Compare_To_Constant4_out1 = Delay6_out1_2 < 5'b10011;



  assign Bit_Slice26_out1_1 = Data_Type_Conversion_out1_2[0];



  assign Constant4_out1_2 = 5'b11011;



  assign Bit_Slice25_out1_1 = Data_Type_Conversion_out1_2[1];



  assign Constant3_out1_4 = 5'b11010;



  assign Switch3_out1_2 = (Bit_Slice26_out1_1 == 1'b0 ? Constant4_out1_2 :
              Constant3_out1_4);



  assign Bit_Slice24_out1_1 = Data_Type_Conversion_out1_2[2];



  assign Constant2_out1_1 = 5'b11001;



  assign Switch2_out1_1 = (Bit_Slice25_out1_1 == 1'b0 ? Switch3_out1_2 :
              Constant2_out1_1);



  assign Bit_Slice27_out1_1 = Data_Type_Conversion_out1_2[3];



  assign Constant1_out1_1 = 5'b11000;



  assign Switch1_out1_3 = (Bit_Slice24_out1_1 == 1'b0 ? Switch2_out1_1 :
              Constant1_out1_1);



  assign Bit_Slice15_out1_1 = Data_Type_Conversion_out1_2[4];



  assign Constant124_out1_1 = 5'b10111;



  assign Switch116_out1_1 = (Bit_Slice27_out1_1 == 1'b0 ? Switch1_out1_3 :
              Constant124_out1_1);



  assign Bit_Slice16_out1_1 = Data_Type_Conversion_out1_2[5];



  assign Constant28_out1_1 = 5'b10110;



  assign Switch17_out1_1 = (Bit_Slice15_out1_1 == 1'b0 ? Switch116_out1_1 :
              Constant28_out1_1);



  assign Bit_Slice17_out1_1 = Data_Type_Conversion_out1_2[6];



  assign Constant26_out1_1 = 5'b10101;



  assign Switch18_out1_1 = (Bit_Slice16_out1_1 == 1'b0 ? Switch17_out1_1 :
              Constant26_out1_1);



  assign Bit_Slice28_out1_1 = Data_Type_Conversion_out1_2[7];



  assign Constant27_out1_1 = 5'b10100;



  assign Switch19_out1_1 = (Bit_Slice17_out1_1 == 1'b0 ? Switch18_out1_1 :
              Constant27_out1_1);



  assign Constant29_out1_2 = 5'b10011;



  assign Switch28_out1_1 = (Bit_Slice28_out1_1 == 1'b0 ? Switch19_out1_1 :
              Constant29_out1_2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_2_process
      if (i_RST_N == 1'b0) begin
        Delay8_out1_2 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay8_out1_2 <= Switch28_out1_1;
        end
      end
    end



  assign Switch4_out1 = (Compare_To_Constant4_out1 == 1'b0 ? Delay8_out1_2 :
              Delay6_out1_2);



  assign Switch5_out1_2 = (Compare_To_Constant5_out1 == 1'b0 ? Switch4_out1 :
              Switch3_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_5_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_7 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay3_out1_7 <= Switch5_out1_2;
        end
      end
    end



  assign dynamic_shift_1 = {3'b0, Delay3_out1_7};
  assign Shift_Arithmetic_out1 = Delay5_out1_1 <<< dynamic_shift_1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_1_process
      if (i_RST_N == 1'b0) begin
        Delay7_out1_1 <= 27'b000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_1 <= Shift_Arithmetic_out1;
        end
      end
    end



  assign Bit_Slice2_out1 = Delay7_out1_1[2:1];



  assign Bit_Slice4_out1 = Bit_Slice2_out1[0];



  assign Bit_Slice5_out1 = Bit_Slice2_out1[1];



  assign Bit_Slice3_out1 = Delay7_out1_1[3];



  assign Bit_Slice1_out1 = Delay7_out1_1[0];



  assign Bit_Reduce_out1 = Bit_Slice1_out1;



  assign Logical_Operator1_out1_2 = Bit_Reduce_out1 | (Bit_Slice4_out1 | Bit_Slice3_out1);



  assign Logical_Operator_out1_2 = Bit_Slice5_out1 & Logical_Operator1_out1_2;



  assign Bit_Slice1_out1_1 = Delay7_out1_1[25:3];



  assign Bit_Slice1_out1_dtc = {1'b0, Bit_Slice1_out1_1};



  assign Constant2_out1_2 = 23'b00000000000000000000001;



  assign Add1_1 = {9'b0, Constant2_out1_2};
  assign Add1_2 = {9'b0, Bit_Slice1_out1_1};
  assign Add1_add_temp = Add1_1 + Add1_2;
  assign Add1_out1 = Add1_add_temp[23:0];



  assign Switch2_out1_2 = (Logical_Operator_out1_2 == 1'b0 ? Bit_Slice1_out1_dtc :
              Add1_out1);



  assign Bit_Slice5_out1_1 = Switch2_out1_2[23];



  assign Bit_Slice6_out1 = Switch2_out1_2[22:0];



  assign Bit_Shift2_out1 = Bit_Slice6_out1 >>> 8'd1;



  assign Switch3_out1_3 = (Bit_Slice5_out1_1 == 1'b0 ? Bit_Slice6_out1 :
              Bit_Shift2_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay11_2_process
      if (i_RST_N == 1'b0) begin
        Delay11_out1_2 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_2 <= Switch3_out1_3;
        end
      end
    end



  assign Bit_Concat_out1_2 = {alpha1_out1, Delay11_out1_2};



  assign reinterpretcast_y_m_numericty_out1 = Bit_Concat_out1_2;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay16_1_process
      if (i_RST_N == 1'b0) begin
        Delay16_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1_1 <= reinterpretcast_y_m_numericty_out1;
        end
      end
    end



  assign x_m_y_m_out1 = Delay16_out1_1 * Delay4_out1_3;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_3_process
      if (i_RST_N == 1'b0) begin
        Delay1_reg[0] <= 48'h000000000000;
        Delay1_reg[1] <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1_3 = Delay1_reg[1];
  assign Delay1_reg_next[0] = x_m_y_m_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  assign Bit_Slice_out1 = Delay1_out1_3[47];



  assign if_swap2_out1 = (Logical_Operator1_out1_1 == 1'b0 ? Delay4_out1_1 :
              Delay4_out1_2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_4_process
      if (i_RST_N == 1'b0) begin
        Delay1_reg_1[0] <= 9'sb000000000;
        Delay1_reg_1[1] <= 9'sb000000000;
        Delay1_reg_1[2] <= 9'sb000000000;
        Delay1_reg_1[3] <= 9'sb000000000;
        Delay1_reg_1[4] <= 9'sb000000000;
        Delay1_reg_1[5] <= 9'sb000000000;
        Delay1_reg_1[6] <= 9'sb000000000;
        Delay1_reg_1[7] <= 9'sb000000000;
        Delay1_reg_1[8] <= 9'sb000000000;
        Delay1_reg_1[9] <= 9'sb000000000;
        Delay1_reg_1[10] <= 9'sb000000000;
        Delay1_reg_1[11] <= 9'sb000000000;
        Delay1_reg_1[12] <= 9'sb000000000;
        Delay1_reg_1[13] <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg_1[0] <= Delay1_reg_next_1[0];
          Delay1_reg_1[1] <= Delay1_reg_next_1[1];
          Delay1_reg_1[2] <= Delay1_reg_next_1[2];
          Delay1_reg_1[3] <= Delay1_reg_next_1[3];
          Delay1_reg_1[4] <= Delay1_reg_next_1[4];
          Delay1_reg_1[5] <= Delay1_reg_next_1[5];
          Delay1_reg_1[6] <= Delay1_reg_next_1[6];
          Delay1_reg_1[7] <= Delay1_reg_next_1[7];
          Delay1_reg_1[8] <= Delay1_reg_next_1[8];
          Delay1_reg_1[9] <= Delay1_reg_next_1[9];
          Delay1_reg_1[10] <= Delay1_reg_next_1[10];
          Delay1_reg_1[11] <= Delay1_reg_next_1[11];
          Delay1_reg_1[12] <= Delay1_reg_next_1[12];
          Delay1_reg_1[13] <= Delay1_reg_next_1[13];
        end
      end
    end

  assign Delay1_out1_4 = Delay1_reg_1[13];
  assign Delay1_reg_next_1[0] = if_swap2_out1;
  assign Delay1_reg_next_1[1] = Delay1_reg_1[0];
  assign Delay1_reg_next_1[2] = Delay1_reg_1[1];
  assign Delay1_reg_next_1[3] = Delay1_reg_1[2];
  assign Delay1_reg_next_1[4] = Delay1_reg_1[3];
  assign Delay1_reg_next_1[5] = Delay1_reg_1[4];
  assign Delay1_reg_next_1[6] = Delay1_reg_1[5];
  assign Delay1_reg_next_1[7] = Delay1_reg_1[6];
  assign Delay1_reg_next_1[8] = Delay1_reg_1[7];
  assign Delay1_reg_next_1[9] = Delay1_reg_1[8];
  assign Delay1_reg_next_1[10] = Delay1_reg_1[9];
  assign Delay1_reg_next_1[11] = Delay1_reg_1[10];
  assign Delay1_reg_next_1[12] = Delay1_reg_1[11];
  assign Delay1_reg_next_1[13] = Delay1_reg_1[12];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_5_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_5 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay4_out1_5 <= Delay3_out1_7;
        end
      end
    end



  assign Sum2_1 = {31'b0, Bit_Slice5_out1_1};
  assign Sum2_2 = {27'b0, Delay4_out1_5};
  assign Sum2_sub_temp = Sum2_1 - Sum2_2;
  assign Sum2_out1 = Sum2_sub_temp[8:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_3_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_3 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_3 <= Sum2_out1;
        end
      end
    end



  assign if_swap_out1 = (Logical_Operator1_out1_1 == 1'b0 ? Delay4_out1_2 :
              Delay4_out1_1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay17_1_process
      if (i_RST_N == 1'b0) begin
        Delay17_reg[0] <= 9'sb000000000;
        Delay17_reg[1] <= 9'sb000000000;
        Delay17_reg[2] <= 9'sb000000000;
        Delay17_reg[3] <= 9'sb000000000;
        Delay17_reg[4] <= 9'sb000000000;
        Delay17_reg[5] <= 9'sb000000000;
        Delay17_reg[6] <= 9'sb000000000;
        Delay17_reg[7] <= 9'sb000000000;
        Delay17_reg[8] <= 9'sb000000000;
        Delay17_reg[9] <= 9'sb000000000;
        Delay17_reg[10] <= 9'sb000000000;
        Delay17_reg[11] <= 9'sb000000000;
        Delay17_reg[12] <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay17_reg[0] <= Delay17_reg_next[0];
          Delay17_reg[1] <= Delay17_reg_next[1];
          Delay17_reg[2] <= Delay17_reg_next[2];
          Delay17_reg[3] <= Delay17_reg_next[3];
          Delay17_reg[4] <= Delay17_reg_next[4];
          Delay17_reg[5] <= Delay17_reg_next[5];
          Delay17_reg[6] <= Delay17_reg_next[6];
          Delay17_reg[7] <= Delay17_reg_next[7];
          Delay17_reg[8] <= Delay17_reg_next[8];
          Delay17_reg[9] <= Delay17_reg_next[9];
          Delay17_reg[10] <= Delay17_reg_next[10];
          Delay17_reg[11] <= Delay17_reg_next[11];
          Delay17_reg[12] <= Delay17_reg_next[12];
        end
      end
    end

  assign Delay17_out1_1 = Delay17_reg[12];
  assign Delay17_reg_next[0] = if_swap_out1;
  assign Delay17_reg_next[1] = Delay17_reg[0];
  assign Delay17_reg_next[2] = Delay17_reg[1];
  assign Delay17_reg_next[3] = Delay17_reg[2];
  assign Delay17_reg_next[4] = Delay17_reg[3];
  assign Delay17_reg_next[5] = Delay17_reg[4];
  assign Delay17_reg_next[6] = Delay17_reg[5];
  assign Delay17_reg_next[7] = Delay17_reg[6];
  assign Delay17_reg_next[8] = Delay17_reg[7];
  assign Delay17_reg_next[9] = Delay17_reg[8];
  assign Delay17_reg_next[10] = Delay17_reg[9];
  assign Delay17_reg_next[11] = Delay17_reg[10];
  assign Delay17_reg_next[12] = Delay17_reg[11];



  assign y_e_fi_exp_fimath_y_e_1 = {{23{Delay2_out1_3[8]}}, Delay2_out1_3};
  assign y_e_fi_exp_fimath_y_e_2 = {{23{Delay17_out1_1[8]}}, Delay17_out1_1};
  assign y_e_fi_exp_fimath_y_e_sub_temp = y_e_fi_exp_fimath_y_e_1 - y_e_fi_exp_fimath_y_e_2;
  assign y_e_fi_exp_fimath_y_e_out1 = y_e_fi_exp_fimath_y_e_sub_temp[8:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay15_1_process
      if (i_RST_N == 1'b0) begin
        Delay15_out1_1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1_1 <= y_e_fi_exp_fimath_y_e_out1;
        end
      end
    end



  assign y_exp_fi_1 = {{23{Delay1_out1_4[8]}}, Delay1_out1_4};
  assign y_exp_fi_2 = {{23{Delay15_out1_1[8]}}, Delay15_out1_1};
  assign y_exp_fi_add_temp = y_exp_fi_1 + y_exp_fi_2;
  assign y_exp_fi_out1 = y_exp_fi_add_temp[9:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_6_process
      if (i_RST_N == 1'b0) begin
        Delay3_reg_1[0] <= 10'sb0000000000;
        Delay3_reg_1[1] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay3_reg_1[0] <= Delay3_reg_next_1[0];
          Delay3_reg_1[1] <= Delay3_reg_next_1[1];
        end
      end
    end

  assign Delay3_out1_8 = Delay3_reg_1[1];
  assign Delay3_reg_next_1[0] = y_exp_fi_out1;
  assign Delay3_reg_next_1[1] = Delay3_reg_1[0];



  assign C_out1 = 10'sb0000000001;



  assign x_exp_1_1 = {{22{Delay3_out1_8[9]}}, Delay3_out1_8};
  assign x_exp_1_2 = {{22{C_out1[9]}}, C_out1};
  assign x_exp_1_add_temp = x_exp_1_1 + x_exp_1_2;
  assign x_exp_1_out1 = x_exp_1_add_temp[9:0];



  assign t_out1 = (Bit_Slice_out1 == 1'b0 ? Delay3_out1_8 :
              x_exp_1_out1);



  assign C1_out1 = 10'sb0000000000;



  assign y_m_0_out1_3 = (y_m_0_out1_2 == 1'b0 ? t_out1 :
              C1_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_2_process
      if (i_RST_N == 1'b0) begin
        Delay7_reg_1[0] <= 10'sb0000000000;
        Delay7_reg_1[1] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay7_reg_1[0] <= Delay7_reg_next_1[0];
          Delay7_reg_1[1] <= Delay7_reg_next_1[1];
        end
      end
    end

  assign Delay7_out1_2 = Delay7_reg_1[1];
  assign Delay7_reg_next_1[0] = y_m_0_out1_3;
  assign Delay7_reg_next_1[1] = Delay7_reg_1[0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_6_process
      if (i_RST_N == 1'b0) begin
        Delay4_reg_2[0] <= 10'sb0000000000;
        Delay4_reg_2[1] <= 10'sb0000000000;
        Delay4_reg_2[2] <= 10'sb0000000000;
        Delay4_reg_2[3] <= 10'sb0000000000;
        Delay4_reg_2[4] <= 10'sb0000000000;
        Delay4_reg_2[5] <= 10'sb0000000000;
        Delay4_reg_2[6] <= 10'sb0000000000;
        Delay4_reg_2[7] <= 10'sb0000000000;
        Delay4_reg_2[8] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay4_reg_2[0] <= Delay4_reg_next_2[0];
          Delay4_reg_2[1] <= Delay4_reg_next_2[1];
          Delay4_reg_2[2] <= Delay4_reg_next_2[2];
          Delay4_reg_2[3] <= Delay4_reg_next_2[3];
          Delay4_reg_2[4] <= Delay4_reg_next_2[4];
          Delay4_reg_2[5] <= Delay4_reg_next_2[5];
          Delay4_reg_2[6] <= Delay4_reg_next_2[6];
          Delay4_reg_2[7] <= Delay4_reg_next_2[7];
          Delay4_reg_2[8] <= Delay4_reg_next_2[8];
        end
      end
    end

  assign Delay4_out1_6 = Delay4_reg_2[8];
  assign Delay4_reg_next_2[0] = Delay7_out1_2;
  assign Delay4_reg_next_2[1] = Delay4_reg_2[0];
  assign Delay4_reg_next_2[2] = Delay4_reg_2[1];
  assign Delay4_reg_next_2[3] = Delay4_reg_2[2];
  assign Delay4_reg_next_2[4] = Delay4_reg_2[3];
  assign Delay4_reg_next_2[5] = Delay4_reg_2[4];
  assign Delay4_reg_next_2[6] = Delay4_reg_2[5];
  assign Delay4_reg_next_2[7] = Delay4_reg_2[6];
  assign Delay4_reg_next_2[8] = Delay4_reg_2[7];



  assign exp_12_out1 = Delay4_out1_6 < 10'sb1111110100;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_7_process
      if (i_RST_N == 1'b0) begin
        Delay3_reg_2[0] <= 1'b0;
        Delay3_reg_2[1] <= 1'b0;
        Delay3_reg_2[2] <= 1'b0;
        Delay3_reg_2[3] <= 1'b0;
        Delay3_reg_2[4] <= 1'b0;
        Delay3_reg_2[5] <= 1'b0;
        Delay3_reg_2[6] <= 1'b0;
        Delay3_reg_2[7] <= 1'b0;
        Delay3_reg_2[8] <= 1'b0;
        Delay3_reg_2[9] <= 1'b0;
        Delay3_reg_2[10] <= 1'b0;
        Delay3_reg_2[11] <= 1'b0;
        Delay3_reg_2[12] <= 1'b0;
        Delay3_reg_2[13] <= 1'b0;
        Delay3_reg_2[14] <= 1'b0;
        Delay3_reg_2[15] <= 1'b0;
        Delay3_reg_2[16] <= 1'b0;
        Delay3_reg_2[17] <= 1'b0;
        Delay3_reg_2[18] <= 1'b0;
        Delay3_reg_2[19] <= 1'b0;
        Delay3_reg_2[20] <= 1'b0;
        Delay3_reg_2[21] <= 1'b0;
        Delay3_reg_2[22] <= 1'b0;
        Delay3_reg_2[23] <= 1'b0;
        Delay3_reg_2[24] <= 1'b0;
        Delay3_reg_2[25] <= 1'b0;
        Delay3_reg_2[26] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_reg_2[0] <= Delay3_reg_next_2[0];
          Delay3_reg_2[1] <= Delay3_reg_next_2[1];
          Delay3_reg_2[2] <= Delay3_reg_next_2[2];
          Delay3_reg_2[3] <= Delay3_reg_next_2[3];
          Delay3_reg_2[4] <= Delay3_reg_next_2[4];
          Delay3_reg_2[5] <= Delay3_reg_next_2[5];
          Delay3_reg_2[6] <= Delay3_reg_next_2[6];
          Delay3_reg_2[7] <= Delay3_reg_next_2[7];
          Delay3_reg_2[8] <= Delay3_reg_next_2[8];
          Delay3_reg_2[9] <= Delay3_reg_next_2[9];
          Delay3_reg_2[10] <= Delay3_reg_next_2[10];
          Delay3_reg_2[11] <= Delay3_reg_next_2[11];
          Delay3_reg_2[12] <= Delay3_reg_next_2[12];
          Delay3_reg_2[13] <= Delay3_reg_next_2[13];
          Delay3_reg_2[14] <= Delay3_reg_next_2[14];
          Delay3_reg_2[15] <= Delay3_reg_next_2[15];
          Delay3_reg_2[16] <= Delay3_reg_next_2[16];
          Delay3_reg_2[17] <= Delay3_reg_next_2[17];
          Delay3_reg_2[18] <= Delay3_reg_next_2[18];
          Delay3_reg_2[19] <= Delay3_reg_next_2[19];
          Delay3_reg_2[20] <= Delay3_reg_next_2[20];
          Delay3_reg_2[21] <= Delay3_reg_next_2[21];
          Delay3_reg_2[22] <= Delay3_reg_next_2[22];
          Delay3_reg_2[23] <= Delay3_reg_next_2[23];
          Delay3_reg_2[24] <= Delay3_reg_next_2[24];
          Delay3_reg_2[25] <= Delay3_reg_next_2[25];
          Delay3_reg_2[26] <= Delay3_reg_next_2[26];
        end
      end
    end

  assign Delay3_out1_9 = Delay3_reg_2[26];
  assign Delay3_reg_next_2[0] = Logical_Operator1_out1_1;
  assign Delay3_reg_next_2[1] = Delay3_reg_2[0];
  assign Delay3_reg_next_2[2] = Delay3_reg_2[1];
  assign Delay3_reg_next_2[3] = Delay3_reg_2[2];
  assign Delay3_reg_next_2[4] = Delay3_reg_2[3];
  assign Delay3_reg_next_2[5] = Delay3_reg_2[4];
  assign Delay3_reg_next_2[6] = Delay3_reg_2[5];
  assign Delay3_reg_next_2[7] = Delay3_reg_2[6];
  assign Delay3_reg_next_2[8] = Delay3_reg_2[7];
  assign Delay3_reg_next_2[9] = Delay3_reg_2[8];
  assign Delay3_reg_next_2[10] = Delay3_reg_2[9];
  assign Delay3_reg_next_2[11] = Delay3_reg_2[10];
  assign Delay3_reg_next_2[12] = Delay3_reg_2[11];
  assign Delay3_reg_next_2[13] = Delay3_reg_2[12];
  assign Delay3_reg_next_2[14] = Delay3_reg_2[13];
  assign Delay3_reg_next_2[15] = Delay3_reg_2[14];
  assign Delay3_reg_next_2[16] = Delay3_reg_2[15];
  assign Delay3_reg_next_2[17] = Delay3_reg_2[16];
  assign Delay3_reg_next_2[18] = Delay3_reg_2[17];
  assign Delay3_reg_next_2[19] = Delay3_reg_2[18];
  assign Delay3_reg_next_2[20] = Delay3_reg_2[19];
  assign Delay3_reg_next_2[21] = Delay3_reg_2[20];
  assign Delay3_reg_next_2[22] = Delay3_reg_2[21];
  assign Delay3_reg_next_2[23] = Delay3_reg_2[22];
  assign Delay3_reg_next_2[24] = Delay3_reg_2[23];
  assign Delay3_reg_next_2[25] = Delay3_reg_2[24];
  assign Delay3_reg_next_2[26] = Delay3_reg_2[25];



  assign alphaswapped_out1 =  ~ Delay3_out1_9;



  assign exp_12_swapped_out1 = exp_12_out1 & alphaswapped_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_3_process
      if (i_RST_N == 1'b0) begin
        Delay7_reg_2[0] <= 1'b0;
        Delay7_reg_2[1] <= 1'b0;
        Delay7_reg_2[2] <= 1'b0;
        Delay7_reg_2[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_reg_2[0] <= Delay7_reg_next_2[0];
          Delay7_reg_2[1] <= Delay7_reg_next_2[1];
          Delay7_reg_2[2] <= Delay7_reg_next_2[2];
          Delay7_reg_2[3] <= Delay7_reg_next_2[3];
        end
      end
    end

  assign Delay7_out1_3 = Delay7_reg_2[3];
  assign Delay7_reg_next_2[0] = exp_12_swapped_out1;
  assign Delay7_reg_next_2[1] = Delay7_reg_2[0];
  assign Delay7_reg_next_2[2] = Delay7_reg_2[1];
  assign Delay7_reg_next_2[3] = Delay7_reg_2[2];



  assign dtc1_out1_1 = Delay1_out1_3[46:23];



  assign castsi_out1 = Delay1_out1_3;



  assign dtc_out1_1 = castsi_out1[47:24];



  assign t_47_out1 = (Bit_Slice_out1 == 1'b0 ? dtc1_out1_1 :
              dtc_out1_1);



  assign C2_out1 = 24'b000000000000000000000000;



  assign y_m_0_1_out1 = (y_m_0_out1_2 == 1'b0 ? t_47_out1 :
              C2_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_4_process
      if (i_RST_N == 1'b0) begin
        Delay2_reg_1[0] <= 24'b000000000000000000000000;
        Delay2_reg_1[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg_1[0] <= Delay2_reg_next_1[0];
          Delay2_reg_1[1] <= Delay2_reg_next_1[1];
        end
      end
    end

  assign Delay2_out1_4 = Delay2_reg_1[1];
  assign Delay2_reg_next_1[0] = y_m_0_1_out1;
  assign Delay2_reg_next_1[1] = Delay2_reg_1[0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_3_process
      if (i_RST_N == 1'b0) begin
        Delay5_reg_2[0] <= 24'b000000000000000000000000;
        Delay5_reg_2[1] <= 24'b000000000000000000000000;
        Delay5_reg_2[2] <= 24'b000000000000000000000000;
        Delay5_reg_2[3] <= 24'b000000000000000000000000;
        Delay5_reg_2[4] <= 24'b000000000000000000000000;
        Delay5_reg_2[5] <= 24'b000000000000000000000000;
        Delay5_reg_2[6] <= 24'b000000000000000000000000;
        Delay5_reg_2[7] <= 24'b000000000000000000000000;
        Delay5_reg_2[8] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg_2[0] <= Delay5_reg_next_2[0];
          Delay5_reg_2[1] <= Delay5_reg_next_2[1];
          Delay5_reg_2[2] <= Delay5_reg_next_2[2];
          Delay5_reg_2[3] <= Delay5_reg_next_2[3];
          Delay5_reg_2[4] <= Delay5_reg_next_2[4];
          Delay5_reg_2[5] <= Delay5_reg_next_2[5];
          Delay5_reg_2[6] <= Delay5_reg_next_2[6];
          Delay5_reg_2[7] <= Delay5_reg_next_2[7];
          Delay5_reg_2[8] <= Delay5_reg_next_2[8];
        end
      end
    end

  assign Delay5_out1_3 = Delay5_reg_2[8];
  assign Delay5_reg_next_2[0] = Delay2_out1_4;
  assign Delay5_reg_next_2[1] = Delay5_reg_2[0];
  assign Delay5_reg_next_2[2] = Delay5_reg_2[1];
  assign Delay5_reg_next_2[3] = Delay5_reg_2[2];
  assign Delay5_reg_next_2[4] = Delay5_reg_2[3];
  assign Delay5_reg_next_2[5] = Delay5_reg_2[4];
  assign Delay5_reg_next_2[6] = Delay5_reg_2[5];
  assign Delay5_reg_next_2[7] = Delay5_reg_2[6];
  assign Delay5_reg_next_2[8] = Delay5_reg_2[7];



  assign x_m_1_out1 = Delay5_out1_3 == 24'b100000000000000000000000;



  assign exp_0_out1 = Delay4_out1_6 == 10'sb0000000000;



  assign x_m_1_exp_0_out1 = x_m_1_out1 & exp_0_out1;



  assign x_exp_36_out1 = y_m_0_out1_3 >= 10'sb1111011100;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_3_process
      if (i_RST_N == 1'b0) begin
        Delay6_reg_2[0] <= 1'b0;
        Delay6_reg_2[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_reg_2[0] <= Delay6_reg_next_2[0];
          Delay6_reg_2[1] <= Delay6_reg_next_2[1];
        end
      end
    end

  assign Delay6_out1_3 = Delay6_reg_2[1];
  assign Delay6_reg_next_2[0] = x_exp_36_out1;
  assign Delay6_reg_next_2[1] = Delay6_reg_2[0];



  assign alphax_exp_1 = {y_m_0_out1_3[9], y_m_0_out1_3};
  assign alphax_exp_in0 =  - (alphax_exp_1);
  assign alphax_exp_out1 = alphax_exp_in0[9:0];



  assign shift_0_out1 = alphax_exp_out1 > 10'sb0000000000;



  assign shift_x_wide_WordLength_out1 = alphax_exp_out1 <= 10'sb0000100101;



  assign shift_0_shift_x_wide_W_out1 = shift_0_out1 & shift_x_wide_WordLength_out1;



  assign C1_out1_1 = 1'b0;



  assign C_out1_1 = 1'b1;



  assign if_shift_0_shift_x_wide_W_out1 = (shift_0_shift_x_wide_W_out1 == 1'b0 ? C1_out1_1 :
              C_out1_1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_7_process
      if (i_RST_N == 1'b0) begin
        Delay4_reg_3[0] <= 1'b0;
        Delay4_reg_3[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_reg_3[0] <= Delay4_reg_next_3[0];
          Delay4_reg_3[1] <= Delay4_reg_next_3[1];
        end
      end
    end

  assign Delay4_out1_7 = Delay4_reg_3[1];
  assign Delay4_reg_next_3[0] = if_shift_0_shift_x_wide_W_out1;
  assign Delay4_reg_next_3[1] = Delay4_reg_3[0];



  assign C3_out1 = 37'h0000000000;



  assign DTC_out1_2 = {y_m_0_1_out1, 13'b0000000000000};



  assign C2_out1_1 = 10'sb0000000000;



  assign if_shift_0_shift_x_wide_W_1_out1 = (shift_0_shift_x_wide_W_out1 == 1'b0 ? C2_out1_1 :
              alphax_exp_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_8_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_10 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_10 <= if_shift_0_shift_x_wide_W_1_out1;
        end
      end
    end



  assign shift_arithmetic_zerosig = 10'sb0000000000;



  assign shift_arithmetic_selsig = (Delay3_out1_10 >= shift_arithmetic_zerosig ? Delay3_out1_10 :
              shift_arithmetic_zerosig);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_5_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_5 <= 37'h0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_5 <= DTC_out1_2;
        end
      end
    end



  assign dynamic_shift_zerosig = 10'sb0000000000;



  assign dynamic_shift_selsig = (shift_arithmetic_selsig >= dynamic_shift_zerosig ? shift_arithmetic_selsig :
              dynamic_shift_zerosig);



  assign dynamic_shift_cast = {{6{dynamic_shift_selsig[9]}}, dynamic_shift_selsig};
  assign Shift_Arithmetic_out1_1 = Delay2_out1_5 >>> dynamic_shift_cast;



  assign C4_out1 = 37'h0000000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_5_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_5 <= 37'h0000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_5 <= Shift_Arithmetic_out1_1;
        end
      end
    end



  assign if_doShift_out1 = (Delay4_out1_7 == 1'b0 ? C3_out1 :
              Delay1_out1_5);



  assign if_x_exp_36_out1 = (Delay6_out1_3 == 1'b0 ? C4_out1 :
              if_doShift_out1);



  assign DTC_out1_3 = if_x_exp_36_out1[36:13];



  assign DTC2_out1 = {1'b0, {DTC_out1_3, 2'b00}};



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_4_process
      if (i_RST_N == 1'b0) begin
        Delay6_out1_4 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_4 <= DTC2_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay16_2_process
      if (i_RST_N == 1'b0) begin
        Delay16_reg[0] <= 27'sb000000000000000000000000000;
        Delay16_reg[1] <= 27'sb000000000000000000000000000;
        Delay16_reg[2] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_reg[0] <= Delay16_reg_next[0];
          Delay16_reg[1] <= Delay16_reg_next[1];
          Delay16_reg[2] <= Delay16_reg_next[2];
        end
      end
    end

  assign Delay16_out1_2 = Delay16_reg[2];
  assign Delay16_reg_next[0] = Delay6_out1_4;
  assign Delay16_reg_next[1] = Delay16_reg[0];
  assign Delay16_reg_next[2] = Delay16_reg[1];



  assign BitSlice_out1_1 = DTC_out1_3[22:17];



  assign DTC1_out1_2 = {2'b0, BitSlice_out1_1};



  assign coeffs_table1_out1_1[0] = 27'sb111010101010110000011101101;
  assign coeffs_table1_out1_1[1] = 27'sb111010101011010110110100011;
  assign coeffs_table1_out1_1[2] = 27'sb111010101100100011010100110;
  assign coeffs_table1_out1_1[3] = 27'sb111010101110010101100101011;
  assign coeffs_table1_out1_1[4] = 27'sb111010110000101101000000011;
  assign coeffs_table1_out1_1[5] = 27'sb111010110011101000110011111;
  assign coeffs_table1_out1_1[6] = 27'sb111010110111001000000010100;
  assign coeffs_table1_out1_1[7] = 27'sb111010111011001001100011111;
  assign coeffs_table1_out1_1[8] = 27'sb111010111111101100000101101;
  assign coeffs_table1_out1_1[9] = 27'sb111011000100101110001100001;
  assign coeffs_table1_out1_1[10] = 27'sb111011001010001110010011010;
  assign coeffs_table1_out1_1[11] = 27'sb111011010000001010101111011;
  assign coeffs_table1_out1_1[12] = 27'sb111011010110100001101110100;
  assign coeffs_table1_out1_1[13] = 27'sb111011011101010001011001011;
  assign coeffs_table1_out1_1[14] = 27'sb111011100100010111110100000;
  assign coeffs_table1_out1_1[15] = 27'sb111011101011110010111111101;
  assign coeffs_table1_out1_1[16] = 27'sb111011110011100000111010101;
  assign coeffs_table1_out1_1[17] = 27'sb111011111011011111100010100;
  assign coeffs_table1_out1_1[18] = 27'sb111100000011101100110100100;
  assign coeffs_table1_out1_1[19] = 27'sb111100001100000110101110011;
  assign coeffs_table1_out1_1[20] = 27'sb111100010100101011001111011;
  assign coeffs_table1_out1_1[21] = 27'sb111100011101011000011001011;
  assign coeffs_table1_out1_1[22] = 27'sb111100100110001100010001000;
  assign coeffs_table1_out1_1[23] = 27'sb111100101111000100111110110;
  assign coeffs_table1_out1_1[24] = 27'sb111100111000000000101111101;
  assign coeffs_table1_out1_1[25] = 27'sb111101000000111101110101000;
  assign coeffs_table1_out1_1[26] = 27'sb111101001001111010100110000;
  assign coeffs_table1_out1_1[27] = 27'sb111101010010110101011111010;
  assign coeffs_table1_out1_1[28] = 27'sb111101011011101101000011000;
  assign coeffs_table1_out1_1[29] = 27'sb111101100100011111111010000;
  assign coeffs_table1_out1_1[30] = 27'sb111101101101001100110011000;
  assign coeffs_table1_out1_1[31] = 27'sb111101110101110010100011010;
  assign coeffs_table1_out1_1[32] = 27'sb111101111110010000000110000;
  assign coeffs_table1_out1_1[33] = 27'sb111110000110100100011101000;
  assign coeffs_table1_out1_1[34] = 27'sb111110001110101110110000011;
  assign coeffs_table1_out1_1[35] = 27'sb111110010110101110001110001;
  assign coeffs_table1_out1_1[36] = 27'sb111110011110100010001010001;
  assign coeffs_table1_out1_1[37] = 27'sb111110100110001001111110000;
  assign coeffs_table1_out1_1[38] = 27'sb111110101101100101001001000;
  assign coeffs_table1_out1_1[39] = 27'sb111110110100110011001111010;
  assign coeffs_table1_out1_1[40] = 27'sb111110111011110011111010011;
  assign coeffs_table1_out1_1[41] = 27'sb111111000010100110111000001;
  assign coeffs_table1_out1_1[42] = 27'sb111111001001001011111011000;
  assign coeffs_table1_out1_1[43] = 27'sb111111001111100010111001101;
  assign coeffs_table1_out1_1[44] = 27'sb111111010101101011101110011;
  assign coeffs_table1_out1_1[45] = 27'sb111111011011100110010111000;
  assign coeffs_table1_out1_1[46] = 27'sb111111100001010010110100110;
  assign coeffs_table1_out1_1[47] = 27'sb111111100110110001001011110;
  assign coeffs_table1_out1_1[48] = 27'sb111111101100000001100010110;
  assign coeffs_table1_out1_1[49] = 27'sb111111110001000100000010111;
  assign coeffs_table1_out1_1[50] = 27'sb111111110101111000110111110;
  assign coeffs_table1_out1_1[51] = 27'sb111111111010100000001110100;
  assign coeffs_table1_out1_1[52] = 27'sb111111111110111010010110011;
  assign coeffs_table1_out1_1[53] = 27'sb000000000011000111011111101;
  assign coeffs_table1_out1_1[54] = 27'sb000000000111000111111100010;
  assign coeffs_table1_out1_1[55] = 27'sb000000001010111011111111000;
  assign coeffs_table1_out1_1[56] = 27'sb000000001110100011111011111;
  assign coeffs_table1_out1_1[57] = 27'sb000000010010000000000111001;
  assign coeffs_table1_out1_1[58] = 27'sb000000010101010000110110001;
  assign coeffs_table1_out1_1[59] = 27'sb000000011000010110011110011;
  assign coeffs_table1_out1_1[60] = 27'sb000000011011010001010101110;
  assign coeffs_table1_out1_1[61] = 27'sb000000011110000001110010100;
  assign coeffs_table1_out1_1[62] = 27'sb000000100000101000001010110;
  assign coeffs_table1_out1_1[63] = 27'sb000000100011000100110100110;



  assign coeffs_table_domain_1_out1_1 = (DTC1_out1_2 == 8'b00000000 ? coeffs_table1_out1_1[0] :
              (DTC1_out1_2 == 8'b00000001 ? coeffs_table1_out1_1[1] :
              (DTC1_out1_2 == 8'b00000010 ? coeffs_table1_out1_1[2] :
              (DTC1_out1_2 == 8'b00000011 ? coeffs_table1_out1_1[3] :
              (DTC1_out1_2 == 8'b00000100 ? coeffs_table1_out1_1[4] :
              (DTC1_out1_2 == 8'b00000101 ? coeffs_table1_out1_1[5] :
              (DTC1_out1_2 == 8'b00000110 ? coeffs_table1_out1_1[6] :
              (DTC1_out1_2 == 8'b00000111 ? coeffs_table1_out1_1[7] :
              (DTC1_out1_2 == 8'b00001000 ? coeffs_table1_out1_1[8] :
              (DTC1_out1_2 == 8'b00001001 ? coeffs_table1_out1_1[9] :
              (DTC1_out1_2 == 8'b00001010 ? coeffs_table1_out1_1[10] :
              (DTC1_out1_2 == 8'b00001011 ? coeffs_table1_out1_1[11] :
              (DTC1_out1_2 == 8'b00001100 ? coeffs_table1_out1_1[12] :
              (DTC1_out1_2 == 8'b00001101 ? coeffs_table1_out1_1[13] :
              (DTC1_out1_2 == 8'b00001110 ? coeffs_table1_out1_1[14] :
              (DTC1_out1_2 == 8'b00001111 ? coeffs_table1_out1_1[15] :
              (DTC1_out1_2 == 8'b00010000 ? coeffs_table1_out1_1[16] :
              (DTC1_out1_2 == 8'b00010001 ? coeffs_table1_out1_1[17] :
              (DTC1_out1_2 == 8'b00010010 ? coeffs_table1_out1_1[18] :
              (DTC1_out1_2 == 8'b00010011 ? coeffs_table1_out1_1[19] :
              (DTC1_out1_2 == 8'b00010100 ? coeffs_table1_out1_1[20] :
              (DTC1_out1_2 == 8'b00010101 ? coeffs_table1_out1_1[21] :
              (DTC1_out1_2 == 8'b00010110 ? coeffs_table1_out1_1[22] :
              (DTC1_out1_2 == 8'b00010111 ? coeffs_table1_out1_1[23] :
              (DTC1_out1_2 == 8'b00011000 ? coeffs_table1_out1_1[24] :
              (DTC1_out1_2 == 8'b00011001 ? coeffs_table1_out1_1[25] :
              (DTC1_out1_2 == 8'b00011010 ? coeffs_table1_out1_1[26] :
              (DTC1_out1_2 == 8'b00011011 ? coeffs_table1_out1_1[27] :
              (DTC1_out1_2 == 8'b00011100 ? coeffs_table1_out1_1[28] :
              (DTC1_out1_2 == 8'b00011101 ? coeffs_table1_out1_1[29] :
              (DTC1_out1_2 == 8'b00011110 ? coeffs_table1_out1_1[30] :
              (DTC1_out1_2 == 8'b00011111 ? coeffs_table1_out1_1[31] :
              (DTC1_out1_2 == 8'b00100000 ? coeffs_table1_out1_1[32] :
              (DTC1_out1_2 == 8'b00100001 ? coeffs_table1_out1_1[33] :
              (DTC1_out1_2 == 8'b00100010 ? coeffs_table1_out1_1[34] :
              (DTC1_out1_2 == 8'b00100011 ? coeffs_table1_out1_1[35] :
              (DTC1_out1_2 == 8'b00100100 ? coeffs_table1_out1_1[36] :
              (DTC1_out1_2 == 8'b00100101 ? coeffs_table1_out1_1[37] :
              (DTC1_out1_2 == 8'b00100110 ? coeffs_table1_out1_1[38] :
              (DTC1_out1_2 == 8'b00100111 ? coeffs_table1_out1_1[39] :
              (DTC1_out1_2 == 8'b00101000 ? coeffs_table1_out1_1[40] :
              (DTC1_out1_2 == 8'b00101001 ? coeffs_table1_out1_1[41] :
              (DTC1_out1_2 == 8'b00101010 ? coeffs_table1_out1_1[42] :
              (DTC1_out1_2 == 8'b00101011 ? coeffs_table1_out1_1[43] :
              (DTC1_out1_2 == 8'b00101100 ? coeffs_table1_out1_1[44] :
              (DTC1_out1_2 == 8'b00101101 ? coeffs_table1_out1_1[45] :
              (DTC1_out1_2 == 8'b00101110 ? coeffs_table1_out1_1[46] :
              (DTC1_out1_2 == 8'b00101111 ? coeffs_table1_out1_1[47] :
              (DTC1_out1_2 == 8'b00110000 ? coeffs_table1_out1_1[48] :
              (DTC1_out1_2 == 8'b00110001 ? coeffs_table1_out1_1[49] :
              (DTC1_out1_2 == 8'b00110010 ? coeffs_table1_out1_1[50] :
              (DTC1_out1_2 == 8'b00110011 ? coeffs_table1_out1_1[51] :
              (DTC1_out1_2 == 8'b00110100 ? coeffs_table1_out1_1[52] :
              (DTC1_out1_2 == 8'b00110101 ? coeffs_table1_out1_1[53] :
              (DTC1_out1_2 == 8'b00110110 ? coeffs_table1_out1_1[54] :
              (DTC1_out1_2 == 8'b00110111 ? coeffs_table1_out1_1[55] :
              (DTC1_out1_2 == 8'b00111000 ? coeffs_table1_out1_1[56] :
              (DTC1_out1_2 == 8'b00111001 ? coeffs_table1_out1_1[57] :
              (DTC1_out1_2 == 8'b00111010 ? coeffs_table1_out1_1[58] :
              (DTC1_out1_2 == 8'b00111011 ? coeffs_table1_out1_1[59] :
              (DTC1_out1_2 == 8'b00111100 ? coeffs_table1_out1_1[60] :
              (DTC1_out1_2 == 8'b00111101 ? coeffs_table1_out1_1[61] :
              (DTC1_out1_2 == 8'b00111110 ? coeffs_table1_out1_1[62] :
              coeffs_table1_out1_1[63])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_4_process
      if (i_RST_N == 1'b0) begin
        Delay7_out1_4 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_4 <= coeffs_table_domain_1_out1_1;
        end
      end
    end



  assign res_x_mul_temp_1 = Delay7_out1_4 * Delay6_out1_4;
  assign res_x_out1_1 = res_x_mul_temp_1[51:25];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay11_3_process
      if (i_RST_N == 1'b0) begin
        Delay11_reg[0] <= 27'sb000000000000000000000000000;
        Delay11_reg[1] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_reg[0] <= Delay11_reg_next[0];
          Delay11_reg[1] <= Delay11_reg_next[1];
        end
      end
    end

  assign Delay11_out1_3 = Delay11_reg[1];
  assign Delay11_reg_next[0] = res_x_out1_1;
  assign Delay11_reg_next[1] = Delay11_reg[0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_3_process
      if (i_RST_N == 1'b0) begin
        Delay8_out1_3 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_3 <= DTC1_out1_2;
        end
      end
    end



  assign coeffs_table2_out1[0] = 27'sb111111111111111111111101000;
  assign coeffs_table2_out1[1] = 27'sb111111111111111110101010010;
  assign coeffs_table2_out1[2] = 27'sb111111111111111001110010011;
  assign coeffs_table2_out1[3] = 27'sb111111111111101110111110111;
  assign coeffs_table2_out1[4] = 27'sb111111111111011011111101110;
  assign coeffs_table2_out1[5] = 27'sb111111111110111110100010001;
  assign coeffs_table2_out1[6] = 27'sb111111111110010100100110000;
  assign coeffs_table2_out1[7] = 27'sb111111111101011100001011011;
  assign coeffs_table2_out1[8] = 27'sb111111111100010011011101111;
  assign coeffs_table2_out1[9] = 27'sb111111111010111000110011010;
  assign coeffs_table2_out1[10] = 27'sb111111111001001010101100100;
  assign coeffs_table2_out1[11] = 27'sb111111110111000111110110100;
  assign coeffs_table2_out1[12] = 27'sb111111110100101111001010111;
  assign coeffs_table2_out1[13] = 27'sb111111110001111111101111110;
  assign coeffs_table2_out1[14] = 27'sb111111101110111000111000101;
  assign coeffs_table2_out1[15] = 27'sb111111101011011010000110001;
  assign coeffs_table2_out1[16] = 27'sb111111100111100011000101111;
  assign coeffs_table2_out1[17] = 27'sb111111100011010011110010010;
  assign coeffs_table2_out1[18] = 27'sb111111011110101100010010000;
  assign coeffs_table2_out1[19] = 27'sb111111011001101100110111110;
  assign coeffs_table2_out1[20] = 27'sb111111010100010110000001101;
  assign coeffs_table2_out1[21] = 27'sb111111001110101000010111111;
  assign coeffs_table2_out1[22] = 27'sb111111001000100100101100110;
  assign coeffs_table2_out1[23] = 27'sb111111000010001011111011010;
  assign coeffs_table2_out1[24] = 27'sb111110111011011111000110011;
  assign coeffs_table2_out1[25] = 27'sb111110110100011111011000000;
  assign coeffs_table2_out1[26] = 27'sb111110101101001110000000011;
  assign coeffs_table2_out1[27] = 27'sb111110100101101100010100100;
  assign coeffs_table2_out1[28] = 27'sb111110011101111011101101110;
  assign coeffs_table2_out1[29] = 27'sb111110010101111101101000110;
  assign coeffs_table2_out1[30] = 27'sb111110001101110011100100011;
  assign coeffs_table2_out1[31] = 27'sb111110000101011111000000111;
  assign coeffs_table2_out1[32] = 27'sb111101111101000001011111100;
  assign coeffs_table2_out1[33] = 27'sb111101110100011100100001010;
  assign coeffs_table2_out1[34] = 27'sb111101101011110001100110010;
  assign coeffs_table2_out1[35] = 27'sb111101100011000010001101100;
  assign coeffs_table2_out1[36] = 27'sb111101011010001111110011111;
  assign coeffs_table2_out1[37] = 27'sb111101010001011011110011110;
  assign coeffs_table2_out1[38] = 27'sb111101001000100111100100110;
  assign coeffs_table2_out1[39] = 27'sb111100111111110100011011001;
  assign coeffs_table2_out1[40] = 27'sb111100110111000011100111100;
  assign coeffs_table2_out1[41] = 27'sb111100101110010110010110100;
  assign coeffs_table2_out1[42] = 27'sb111100100101101101110000111;
  assign coeffs_table2_out1[43] = 27'sb111100011101001010111010111;
  assign coeffs_table2_out1[44] = 27'sb111100010100101110110100101;
  assign coeffs_table2_out1[45] = 27'sb111100001100011010011001110;
  assign coeffs_table2_out1[46] = 27'sb111100000100001110100001001;
  assign coeffs_table2_out1[47] = 27'sb111011111100001011111101101;
  assign coeffs_table2_out1[48] = 27'sb111011110100010011011101011;
  assign coeffs_table2_out1[49] = 27'sb111011101100100101101010001;
  assign coeffs_table2_out1[50] = 27'sb111011100101000011001001110;
  assign coeffs_table2_out1[51] = 27'sb111011011101101100011101100;
  assign coeffs_table2_out1[52] = 27'sb111011010110100010000010111;
  assign coeffs_table2_out1[53] = 27'sb111011001111100100010011100;
  assign coeffs_table2_out1[54] = 27'sb111011001000110011100101001;
  assign coeffs_table2_out1[55] = 27'sb111011000010010000001010010;
  assign coeffs_table2_out1[56] = 27'sb111010111011111010010001110;
  assign coeffs_table2_out1[57] = 27'sb111010110101110010000111100;
  assign coeffs_table2_out1[58] = 27'sb111010101111110111110100000;
  assign coeffs_table2_out1[59] = 27'sb111010101010001011011101100;
  assign coeffs_table2_out1[60] = 27'sb111010100100101101000111010;
  assign coeffs_table2_out1[61] = 27'sb111010011111011100110010001;
  assign coeffs_table2_out1[62] = 27'sb111010011010011010011100110;
  assign coeffs_table2_out1[63] = 27'sb111010010101100110000011100;



  assign coeffs_table_domain_2_out1 = (Delay8_out1_3 == 8'b00000000 ? coeffs_table2_out1[0] :
              (Delay8_out1_3 == 8'b00000001 ? coeffs_table2_out1[1] :
              (Delay8_out1_3 == 8'b00000010 ? coeffs_table2_out1[2] :
              (Delay8_out1_3 == 8'b00000011 ? coeffs_table2_out1[3] :
              (Delay8_out1_3 == 8'b00000100 ? coeffs_table2_out1[4] :
              (Delay8_out1_3 == 8'b00000101 ? coeffs_table2_out1[5] :
              (Delay8_out1_3 == 8'b00000110 ? coeffs_table2_out1[6] :
              (Delay8_out1_3 == 8'b00000111 ? coeffs_table2_out1[7] :
              (Delay8_out1_3 == 8'b00001000 ? coeffs_table2_out1[8] :
              (Delay8_out1_3 == 8'b00001001 ? coeffs_table2_out1[9] :
              (Delay8_out1_3 == 8'b00001010 ? coeffs_table2_out1[10] :
              (Delay8_out1_3 == 8'b00001011 ? coeffs_table2_out1[11] :
              (Delay8_out1_3 == 8'b00001100 ? coeffs_table2_out1[12] :
              (Delay8_out1_3 == 8'b00001101 ? coeffs_table2_out1[13] :
              (Delay8_out1_3 == 8'b00001110 ? coeffs_table2_out1[14] :
              (Delay8_out1_3 == 8'b00001111 ? coeffs_table2_out1[15] :
              (Delay8_out1_3 == 8'b00010000 ? coeffs_table2_out1[16] :
              (Delay8_out1_3 == 8'b00010001 ? coeffs_table2_out1[17] :
              (Delay8_out1_3 == 8'b00010010 ? coeffs_table2_out1[18] :
              (Delay8_out1_3 == 8'b00010011 ? coeffs_table2_out1[19] :
              (Delay8_out1_3 == 8'b00010100 ? coeffs_table2_out1[20] :
              (Delay8_out1_3 == 8'b00010101 ? coeffs_table2_out1[21] :
              (Delay8_out1_3 == 8'b00010110 ? coeffs_table2_out1[22] :
              (Delay8_out1_3 == 8'b00010111 ? coeffs_table2_out1[23] :
              (Delay8_out1_3 == 8'b00011000 ? coeffs_table2_out1[24] :
              (Delay8_out1_3 == 8'b00011001 ? coeffs_table2_out1[25] :
              (Delay8_out1_3 == 8'b00011010 ? coeffs_table2_out1[26] :
              (Delay8_out1_3 == 8'b00011011 ? coeffs_table2_out1[27] :
              (Delay8_out1_3 == 8'b00011100 ? coeffs_table2_out1[28] :
              (Delay8_out1_3 == 8'b00011101 ? coeffs_table2_out1[29] :
              (Delay8_out1_3 == 8'b00011110 ? coeffs_table2_out1[30] :
              (Delay8_out1_3 == 8'b00011111 ? coeffs_table2_out1[31] :
              (Delay8_out1_3 == 8'b00100000 ? coeffs_table2_out1[32] :
              (Delay8_out1_3 == 8'b00100001 ? coeffs_table2_out1[33] :
              (Delay8_out1_3 == 8'b00100010 ? coeffs_table2_out1[34] :
              (Delay8_out1_3 == 8'b00100011 ? coeffs_table2_out1[35] :
              (Delay8_out1_3 == 8'b00100100 ? coeffs_table2_out1[36] :
              (Delay8_out1_3 == 8'b00100101 ? coeffs_table2_out1[37] :
              (Delay8_out1_3 == 8'b00100110 ? coeffs_table2_out1[38] :
              (Delay8_out1_3 == 8'b00100111 ? coeffs_table2_out1[39] :
              (Delay8_out1_3 == 8'b00101000 ? coeffs_table2_out1[40] :
              (Delay8_out1_3 == 8'b00101001 ? coeffs_table2_out1[41] :
              (Delay8_out1_3 == 8'b00101010 ? coeffs_table2_out1[42] :
              (Delay8_out1_3 == 8'b00101011 ? coeffs_table2_out1[43] :
              (Delay8_out1_3 == 8'b00101100 ? coeffs_table2_out1[44] :
              (Delay8_out1_3 == 8'b00101101 ? coeffs_table2_out1[45] :
              (Delay8_out1_3 == 8'b00101110 ? coeffs_table2_out1[46] :
              (Delay8_out1_3 == 8'b00101111 ? coeffs_table2_out1[47] :
              (Delay8_out1_3 == 8'b00110000 ? coeffs_table2_out1[48] :
              (Delay8_out1_3 == 8'b00110001 ? coeffs_table2_out1[49] :
              (Delay8_out1_3 == 8'b00110010 ? coeffs_table2_out1[50] :
              (Delay8_out1_3 == 8'b00110011 ? coeffs_table2_out1[51] :
              (Delay8_out1_3 == 8'b00110100 ? coeffs_table2_out1[52] :
              (Delay8_out1_3 == 8'b00110101 ? coeffs_table2_out1[53] :
              (Delay8_out1_3 == 8'b00110110 ? coeffs_table2_out1[54] :
              (Delay8_out1_3 == 8'b00110111 ? coeffs_table2_out1[55] :
              (Delay8_out1_3 == 8'b00111000 ? coeffs_table2_out1[56] :
              (Delay8_out1_3 == 8'b00111001 ? coeffs_table2_out1[57] :
              (Delay8_out1_3 == 8'b00111010 ? coeffs_table2_out1[58] :
              (Delay8_out1_3 == 8'b00111011 ? coeffs_table2_out1[59] :
              (Delay8_out1_3 == 8'b00111100 ? coeffs_table2_out1[60] :
              (Delay8_out1_3 == 8'b00111101 ? coeffs_table2_out1[61] :
              (Delay8_out1_3 == 8'b00111110 ? coeffs_table2_out1[62] :
              coeffs_table2_out1[63])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay13_2_process
      if (i_RST_N == 1'b0) begin
        Delay13_reg_2[0] <= 27'sb000000000000000000000000000;
        Delay13_reg_2[1] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_reg_2[0] <= Delay13_reg_next_2[0];
          Delay13_reg_2[1] <= Delay13_reg_next_2[1];
        end
      end
    end

  assign Delay13_out1_2 = Delay13_reg_2[1];
  assign Delay13_reg_next_2[0] = coeffs_table_domain_2_out1;
  assign Delay13_reg_next_2[1] = Delay13_reg_2[0];



  assign res_x_coeffs_3_1_add_cast = {{5{Delay11_out1_3[26]}}, Delay11_out1_3};
  assign res_x_coeffs_3_1_add_cast_1 = {{5{Delay13_out1_2[26]}}, Delay13_out1_2};
  assign res_x_coeffs_3_1_add_temp = res_x_coeffs_3_1_add_cast + res_x_coeffs_3_1_add_cast_1;
  assign res_x_coeffs_3_1_out1 = res_x_coeffs_3_1_add_temp[26:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay17_2_process
      if (i_RST_N == 1'b0) begin
        Delay17_out1_2 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay17_out1_2 <= res_x_coeffs_3_1_out1;
        end
      end
    end



  assign res_x_mul_temp_2 = Delay16_out1_2 * Delay17_out1_2;
  assign res_x_out1_2 = res_x_mul_temp_2[51:25];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay20_process
      if (i_RST_N == 1'b0) begin
        Delay20_reg[0] <= 27'sb000000000000000000000000000;
        Delay20_reg[1] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay20_reg[0] <= Delay20_reg_next[0];
          Delay20_reg[1] <= Delay20_reg_next[1];
        end
      end
    end

  assign Delay20_out1 = Delay20_reg[1];
  assign Delay20_reg_next[0] = res_x_out1_2;
  assign Delay20_reg_next[1] = Delay20_reg[0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay14_1_process
      if (i_RST_N == 1'b0) begin
        Delay14_reg[0] <= 8'b00000000;
        Delay14_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay14_reg[0] <= Delay14_reg_next[0];
          Delay14_reg[1] <= Delay14_reg_next[1];
        end
      end
    end

  assign Delay14_out1_1 = Delay14_reg[1];
  assign Delay14_reg_next[0] = Delay8_out1_3;
  assign Delay14_reg_next[1] = Delay14_reg[0];



  assign coeffs_table3_out1[0] = 27'sb010000000000000000000000000;
  assign coeffs_table3_out1[1] = 27'sb010000000000000000000000110;
  assign coeffs_table3_out1[2] = 27'sb010000000000000000000101110;
  assign coeffs_table3_out1[3] = 27'sb010000000000000000010110001;
  assign coeffs_table3_out1[4] = 27'sb010000000000000000111100011;
  assign coeffs_table3_out1[5] = 27'sb010000000000000010000110010;
  assign coeffs_table3_out1[6] = 27'sb010000000000000100000100011;
  assign coeffs_table3_out1[7] = 27'sb010000000000000111001010001;
  assign coeffs_table3_out1[8] = 27'sb010000000000001011101101011;
  assign coeffs_table3_out1[9] = 27'sb010000000000010010000101111;
  assign coeffs_table3_out1[10] = 27'sb010000000000011010101100111;
  assign coeffs_table3_out1[11] = 27'sb010000000000100101111101000;
  assign coeffs_table3_out1[12] = 27'sb010000000000110100010001101;
  assign coeffs_table3_out1[13] = 27'sb010000000001000110000110011;
  assign coeffs_table3_out1[14] = 27'sb010000000001011011110110111;
  assign coeffs_table3_out1[15] = 27'sb010000000001110101111110011;
  assign coeffs_table3_out1[16] = 27'sb010000000010010100110110111;
  assign coeffs_table3_out1[17] = 27'sb010000000010111000111001100;
  assign coeffs_table3_out1[18] = 27'sb010000000011100010011101100;
  assign coeffs_table3_out1[19] = 27'sb010000000100010001111000011;
  assign coeffs_table3_out1[20] = 27'sb010000000101000111011101010;
  assign coeffs_table3_out1[21] = 27'sb010000000110000011011100111;
  assign coeffs_table3_out1[22] = 27'sb010000000111000110000101110;
  assign coeffs_table3_out1[23] = 27'sb010000001000001111100010111;
  assign coeffs_table3_out1[24] = 27'sb010000001001011111111101000;
  assign coeffs_table3_out1[25] = 27'sb010000001010110111011001110;
  assign coeffs_table3_out1[26] = 27'sb010000001100010101111011110;
  assign coeffs_table3_out1[27] = 27'sb010000001101111011100010101;
  assign coeffs_table3_out1[28] = 27'sb010000001111101000001011001;
  assign coeffs_table3_out1[29] = 27'sb010000010001011011101111010;
  assign coeffs_table3_out1[30] = 27'sb010000010011010110000110010;
  assign coeffs_table3_out1[31] = 27'sb010000010101010111000100110;
  assign coeffs_table3_out1[32] = 27'sb010000010111011110011100111;
  assign coeffs_table3_out1[33] = 27'sb010000011001101011111110110;
  assign coeffs_table3_out1[34] = 27'sb010000011011111111011000001;
  assign coeffs_table3_out1[35] = 27'sb010000011110011000010101001;
  assign coeffs_table3_out1[36] = 27'sb010000100000110110100000000;
  assign coeffs_table3_out1[37] = 27'sb010000100011011001100001100;
  assign coeffs_table3_out1[38] = 27'sb010000100110000001000001101;
  assign coeffs_table3_out1[39] = 27'sb010000101000101100100110100;
  assign coeffs_table3_out1[40] = 27'sb010000101011011011110110001;
  assign coeffs_table3_out1[41] = 27'sb010000101110001110010101100;
  assign coeffs_table3_out1[42] = 27'sb010000110001000011101001011;
  assign coeffs_table3_out1[43] = 27'sb010000110011111011010101111;
  assign coeffs_table3_out1[44] = 27'sb010000110110110100111111011;
  assign coeffs_table3_out1[45] = 27'sb010000111001110000001010001;
  assign coeffs_table3_out1[46] = 27'sb010000111100101100011010111;
  assign coeffs_table3_out1[47] = 27'sb010000111111101001010110001;
  assign coeffs_table3_out1[48] = 27'sb010001000010100110100001101;
  assign coeffs_table3_out1[49] = 27'sb010001000101100011100010111;
  assign coeffs_table3_out1[50] = 27'sb010001001000100000000000111;
  assign coeffs_table3_out1[51] = 27'sb010001001011011011100010110;
  assign coeffs_table3_out1[52] = 27'sb010001001110010101110000111;
  assign coeffs_table3_out1[53] = 27'sb010001010001001110010100010;
  assign coeffs_table3_out1[54] = 27'sb010001010100000100110111000;
  assign coeffs_table3_out1[55] = 27'sb010001010110111001000100011;
  assign coeffs_table3_out1[56] = 27'sb010001011001101010101000010;
  assign coeffs_table3_out1[57] = 27'sb010001011100011001010000001;
  assign coeffs_table3_out1[58] = 27'sb010001011111000100101010010;
  assign coeffs_table3_out1[59] = 27'sb010001100001101100100101111;
  assign coeffs_table3_out1[60] = 27'sb010001100100010000110011101;
  assign coeffs_table3_out1[61] = 27'sb010001100110110001000101000;
  assign coeffs_table3_out1[62] = 27'sb010001101001001101001100101;
  assign coeffs_table3_out1[63] = 27'sb010001101011100100111110011;



  assign coeffs_table_domain_3_out1 = (Delay14_out1_1 == 8'b00000000 ? coeffs_table3_out1[0] :
              (Delay14_out1_1 == 8'b00000001 ? coeffs_table3_out1[1] :
              (Delay14_out1_1 == 8'b00000010 ? coeffs_table3_out1[2] :
              (Delay14_out1_1 == 8'b00000011 ? coeffs_table3_out1[3] :
              (Delay14_out1_1 == 8'b00000100 ? coeffs_table3_out1[4] :
              (Delay14_out1_1 == 8'b00000101 ? coeffs_table3_out1[5] :
              (Delay14_out1_1 == 8'b00000110 ? coeffs_table3_out1[6] :
              (Delay14_out1_1 == 8'b00000111 ? coeffs_table3_out1[7] :
              (Delay14_out1_1 == 8'b00001000 ? coeffs_table3_out1[8] :
              (Delay14_out1_1 == 8'b00001001 ? coeffs_table3_out1[9] :
              (Delay14_out1_1 == 8'b00001010 ? coeffs_table3_out1[10] :
              (Delay14_out1_1 == 8'b00001011 ? coeffs_table3_out1[11] :
              (Delay14_out1_1 == 8'b00001100 ? coeffs_table3_out1[12] :
              (Delay14_out1_1 == 8'b00001101 ? coeffs_table3_out1[13] :
              (Delay14_out1_1 == 8'b00001110 ? coeffs_table3_out1[14] :
              (Delay14_out1_1 == 8'b00001111 ? coeffs_table3_out1[15] :
              (Delay14_out1_1 == 8'b00010000 ? coeffs_table3_out1[16] :
              (Delay14_out1_1 == 8'b00010001 ? coeffs_table3_out1[17] :
              (Delay14_out1_1 == 8'b00010010 ? coeffs_table3_out1[18] :
              (Delay14_out1_1 == 8'b00010011 ? coeffs_table3_out1[19] :
              (Delay14_out1_1 == 8'b00010100 ? coeffs_table3_out1[20] :
              (Delay14_out1_1 == 8'b00010101 ? coeffs_table3_out1[21] :
              (Delay14_out1_1 == 8'b00010110 ? coeffs_table3_out1[22] :
              (Delay14_out1_1 == 8'b00010111 ? coeffs_table3_out1[23] :
              (Delay14_out1_1 == 8'b00011000 ? coeffs_table3_out1[24] :
              (Delay14_out1_1 == 8'b00011001 ? coeffs_table3_out1[25] :
              (Delay14_out1_1 == 8'b00011010 ? coeffs_table3_out1[26] :
              (Delay14_out1_1 == 8'b00011011 ? coeffs_table3_out1[27] :
              (Delay14_out1_1 == 8'b00011100 ? coeffs_table3_out1[28] :
              (Delay14_out1_1 == 8'b00011101 ? coeffs_table3_out1[29] :
              (Delay14_out1_1 == 8'b00011110 ? coeffs_table3_out1[30] :
              (Delay14_out1_1 == 8'b00011111 ? coeffs_table3_out1[31] :
              (Delay14_out1_1 == 8'b00100000 ? coeffs_table3_out1[32] :
              (Delay14_out1_1 == 8'b00100001 ? coeffs_table3_out1[33] :
              (Delay14_out1_1 == 8'b00100010 ? coeffs_table3_out1[34] :
              (Delay14_out1_1 == 8'b00100011 ? coeffs_table3_out1[35] :
              (Delay14_out1_1 == 8'b00100100 ? coeffs_table3_out1[36] :
              (Delay14_out1_1 == 8'b00100101 ? coeffs_table3_out1[37] :
              (Delay14_out1_1 == 8'b00100110 ? coeffs_table3_out1[38] :
              (Delay14_out1_1 == 8'b00100111 ? coeffs_table3_out1[39] :
              (Delay14_out1_1 == 8'b00101000 ? coeffs_table3_out1[40] :
              (Delay14_out1_1 == 8'b00101001 ? coeffs_table3_out1[41] :
              (Delay14_out1_1 == 8'b00101010 ? coeffs_table3_out1[42] :
              (Delay14_out1_1 == 8'b00101011 ? coeffs_table3_out1[43] :
              (Delay14_out1_1 == 8'b00101100 ? coeffs_table3_out1[44] :
              (Delay14_out1_1 == 8'b00101101 ? coeffs_table3_out1[45] :
              (Delay14_out1_1 == 8'b00101110 ? coeffs_table3_out1[46] :
              (Delay14_out1_1 == 8'b00101111 ? coeffs_table3_out1[47] :
              (Delay14_out1_1 == 8'b00110000 ? coeffs_table3_out1[48] :
              (Delay14_out1_1 == 8'b00110001 ? coeffs_table3_out1[49] :
              (Delay14_out1_1 == 8'b00110010 ? coeffs_table3_out1[50] :
              (Delay14_out1_1 == 8'b00110011 ? coeffs_table3_out1[51] :
              (Delay14_out1_1 == 8'b00110100 ? coeffs_table3_out1[52] :
              (Delay14_out1_1 == 8'b00110101 ? coeffs_table3_out1[53] :
              (Delay14_out1_1 == 8'b00110110 ? coeffs_table3_out1[54] :
              (Delay14_out1_1 == 8'b00110111 ? coeffs_table3_out1[55] :
              (Delay14_out1_1 == 8'b00111000 ? coeffs_table3_out1[56] :
              (Delay14_out1_1 == 8'b00111001 ? coeffs_table3_out1[57] :
              (Delay14_out1_1 == 8'b00111010 ? coeffs_table3_out1[58] :
              (Delay14_out1_1 == 8'b00111011 ? coeffs_table3_out1[59] :
              (Delay14_out1_1 == 8'b00111100 ? coeffs_table3_out1[60] :
              (Delay14_out1_1 == 8'b00111101 ? coeffs_table3_out1[61] :
              (Delay14_out1_1 == 8'b00111110 ? coeffs_table3_out1[62] :
              coeffs_table3_out1[63])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay21_process
      if (i_RST_N == 1'b0) begin
        Delay21_reg[0] <= 27'sb000000000000000000000000000;
        Delay21_reg[1] <= 27'sb000000000000000000000000000;
        Delay21_reg[2] <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_reg[0] <= Delay21_reg_next[0];
          Delay21_reg[1] <= Delay21_reg_next[1];
          Delay21_reg[2] <= Delay21_reg_next[2];
        end
      end
    end

  assign Delay21_out1 = Delay21_reg[2];
  assign Delay21_reg_next[0] = coeffs_table_domain_3_out1;
  assign Delay21_reg_next[1] = Delay21_reg[0];
  assign Delay21_reg_next[2] = Delay21_reg[1];



  assign res_x_coeffs_2_1_add_cast_2 = {{5{Delay20_out1[26]}}, Delay20_out1};
  assign res_x_coeffs_2_1_add_cast_3 = {{5{Delay21_out1[26]}}, Delay21_out1};
  assign res_x_coeffs_2_1_add_temp_1 = res_x_coeffs_2_1_add_cast_2 + res_x_coeffs_2_1_add_cast_3;
  assign res_x_coeffs_2_1_out1_1 = res_x_coeffs_2_1_add_temp_1[26:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay23_process
      if (i_RST_N == 1'b0) begin
        Delay23_out1 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= res_x_coeffs_2_1_out1_1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay25_process
      if (i_RST_N == 1'b0) begin
        Delay25_reg[0] <= 37'h0000000000;
        Delay25_reg[1] <= 37'h0000000000;
        Delay25_reg[2] <= 37'h0000000000;
        Delay25_reg[3] <= 37'h0000000000;
        Delay25_reg[4] <= 37'h0000000000;
        Delay25_reg[5] <= 37'h0000000000;
        Delay25_reg[6] <= 37'h0000000000;
      end
      else begin
        if (enb) begin
          Delay25_reg[0] <= Delay25_reg_next[0];
          Delay25_reg[1] <= Delay25_reg_next[1];
          Delay25_reg[2] <= Delay25_reg_next[2];
          Delay25_reg[3] <= Delay25_reg_next[3];
          Delay25_reg[4] <= Delay25_reg_next[4];
          Delay25_reg[5] <= Delay25_reg_next[5];
          Delay25_reg[6] <= Delay25_reg_next[6];
        end
      end
    end

  assign Delay25_out1 = Delay25_reg[6];
  assign Delay25_reg_next[0] = if_x_exp_36_out1;
  assign Delay25_reg_next[1] = Delay25_reg[0];
  assign Delay25_reg_next[2] = Delay25_reg[1];
  assign Delay25_reg_next[3] = Delay25_reg[2];
  assign Delay25_reg_next[4] = Delay25_reg[3];
  assign Delay25_reg_next[5] = Delay25_reg[4];
  assign Delay25_reg_next[6] = Delay25_reg[5];



  assign res_x_cast = {1'b0, Delay25_out1};
  assign res_x_mul_temp_3 = Delay23_out1 * res_x_cast;
  assign res_x_out1_3 = res_x_mul_temp_3[63:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay24_process
      if (i_RST_N == 1'b0) begin
        Delay24_reg[0] <= 64'sh0000000000000000;
        Delay24_reg[1] <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay24_reg[0] <= Delay24_reg_next[0];
          Delay24_reg[1] <= Delay24_reg_next[1];
        end
      end
    end

  assign Delay24_out1 = Delay24_reg[1];
  assign Delay24_reg_next[0] = res_x_out1_3;
  assign Delay24_reg_next[1] = Delay24_reg[0];



  assign C_out1_2 = 64'sh1921FB54442D1800;



  assign if_x_m_1_exp_0_out1 = (x_m_1_exp_0_out1 == 1'b0 ? Delay24_out1 :
              C_out1_2);



  assign pi_2_out1 = 64'sh3243F6A8885A3000;



  assign pi_2_res_out1 = pi_2_out1 - if_x_m_1_exp_0_out1;



  assign if_swapped_out1 = (Delay3_out1_9 == 1'b0 ? if_x_m_1_exp_0_out1 :
              pi_2_res_out1);



  assign DTC_out1_4 = if_swapped_out1[61:0];



  assign Abs_y_1 = {1'b0, DTC_out1_4};
  assign Abs_out1_1 = Abs_y_1[61:0];



  assign Data_Type_Conversion_out1_3 = Abs_out1_1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_4_process
      if (i_RST_N == 1'b0) begin
        Delay5_reg_3[0] <= 62'h0000000000000000;
        Delay5_reg_3[1] <= 62'h0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg_3[0] <= Delay5_reg_next_3[0];
          Delay5_reg_3[1] <= Delay5_reg_next_3[1];
        end
      end
    end

  assign Delay5_out1_4 = Delay5_reg_3[1];
  assign Delay5_reg_next_3[0] = Data_Type_Conversion_out1_3;
  assign Delay5_reg_next_3[1] = Delay5_reg_3[0];



  assign Bit_Slice32_out1_2 = Data_Type_Conversion_out1_3[56];



  assign Constant32_out1_2 = 6'b000110;



  assign Bit_Slice33_out1_2 = Data_Type_Conversion_out1_3[57];



  assign Constant33_out1_2 = 6'b000101;



  assign Switch32_out1_2 = (Bit_Slice32_out1_2 == 1'b0 ? Constant32_out1_2 :
              Constant33_out1_2);



  assign Bit_Slice34_out1_2 = Data_Type_Conversion_out1_3[58];



  assign Constant34_out1_2 = 6'b000100;



  assign Switch33_out1_2 = (Bit_Slice33_out1_2 == 1'b0 ? Switch32_out1_2 :
              Constant34_out1_2);



  assign Bit_Slice15_out1_2 = Data_Type_Conversion_out1_3[59];



  assign Constant35_out1_2 = 6'b000011;



  assign Switch34_out1_2 = (Bit_Slice34_out1_2 == 1'b0 ? Switch33_out1_2 :
              Constant35_out1_2);



  assign Bit_Slice16_out1_2 = Data_Type_Conversion_out1_3[60];



  assign Constant28_out1_2 = 6'b000010;



  assign Switch17_out1_2 = (Bit_Slice15_out1_2 == 1'b0 ? Switch34_out1_2 :
              Constant28_out1_2);



  assign Bit_Slice17_out1_2 = Data_Type_Conversion_out1_3[61];



  assign Constant26_out1_2 = 6'b000001;



  assign Switch18_out1_2 = (Bit_Slice16_out1_2 == 1'b0 ? Switch17_out1_2 :
              Constant26_out1_2);



  assign Constant27_out1_2 = 6'b000000;



  assign Switch19_out1_2 = (Bit_Slice17_out1_2 == 1'b0 ? Switch18_out1_2 :
              Constant27_out1_2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_6_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_6 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_6 <= Switch19_out1_2;
        end
      end
    end



  assign Compare_To_Constant1_out1 = Delay1_out1_6 < 6'b000110;



  assign Bit_Slice25_out1_2 = Data_Type_Conversion_out1_3[48];



  assign Constant3_out1_5 = 6'b001110;



  assign Bit_Slice24_out1_2 = Data_Type_Conversion_out1_3[49];



  assign Constant2_out1_3 = 6'b001101;



  assign Switch2_out1_3 = (Bit_Slice25_out1_2 == 1'b0 ? Constant3_out1_5 :
              Constant2_out1_3);



  assign Bit_Slice27_out1_2 = Data_Type_Conversion_out1_3[50];



  assign Constant1_out1_2 = 6'b001100;



  assign Switch1_out1_4 = (Bit_Slice24_out1_2 == 1'b0 ? Switch2_out1_3 :
              Constant1_out1_2);



  assign Bit_Slice15_out1_3 = Data_Type_Conversion_out1_3[51];



  assign Constant124_out1_2 = 6'b001011;



  assign Switch116_out1_2 = (Bit_Slice27_out1_2 == 1'b0 ? Switch1_out1_4 :
              Constant124_out1_2);



  assign Bit_Slice16_out1_3 = Data_Type_Conversion_out1_3[52];



  assign Constant28_out1_3 = 6'b001010;



  assign Switch17_out1_3 = (Bit_Slice15_out1_3 == 1'b0 ? Switch116_out1_2 :
              Constant28_out1_3);



  assign Bit_Slice17_out1_3 = Data_Type_Conversion_out1_3[53];



  assign Constant26_out1_3 = 6'b001001;



  assign Switch18_out1_3 = (Bit_Slice16_out1_3 == 1'b0 ? Switch17_out1_3 :
              Constant26_out1_3);



  assign Bit_Slice28_out1_2 = Data_Type_Conversion_out1_3[54];



  assign Constant27_out1_3 = 6'b001000;



  assign Switch19_out1_3 = (Bit_Slice17_out1_3 == 1'b0 ? Switch18_out1_3 :
              Constant27_out1_3);



  assign Bit_Slice29_out1_2 = Data_Type_Conversion_out1_3[55];



  assign Constant29_out1_3 = 6'b000111;



  assign Switch28_out1_2 = (Bit_Slice28_out1_2 == 1'b0 ? Switch19_out1_3 :
              Constant29_out1_3);



  assign Constant30_out1_2 = 6'b000110;



  assign Switch29_out1_2 = (Bit_Slice29_out1_2 == 1'b0 ? Switch28_out1_2 :
              Constant30_out1_2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_6_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_6 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_6 <= Switch29_out1_2;
        end
      end
    end



  assign Switch1_out1_5 = (Compare_To_Constant1_out1 == 1'b0 ? Delay2_out1_6 :
              Delay1_out1_6);



  assign Compare_To_Constant7_out1 = Switch1_out1_5 < 6'b001110;



  assign Bit_Slice29_out1_3 = Data_Type_Conversion_out1_3[40];



  assign Constant29_out1_4 = 6'b010110;



  assign Bit_Slice30_out1_1 = Data_Type_Conversion_out1_3[41];



  assign Constant30_out1_3 = 6'b010101;



  assign Switch29_out1_3 = (Bit_Slice29_out1_3 == 1'b0 ? Constant29_out1_4 :
              Constant30_out1_3);



  assign Bit_Slice31_out1_1 = Data_Type_Conversion_out1_3[42];



  assign Constant31_out1_1 = 6'b010100;



  assign Switch30_out1_1 = (Bit_Slice30_out1_1 == 1'b0 ? Switch29_out1_3 :
              Constant31_out1_1);



  assign Bit_Slice32_out1_3 = Data_Type_Conversion_out1_3[43];



  assign Constant32_out1_3 = 6'b010011;



  assign Switch31_out1_1 = (Bit_Slice31_out1_1 == 1'b0 ? Switch30_out1_1 :
              Constant32_out1_3);



  assign Bit_Slice33_out1_3 = Data_Type_Conversion_out1_3[44];



  assign Constant33_out1_3 = 6'b010010;



  assign Switch32_out1_3 = (Bit_Slice32_out1_3 == 1'b0 ? Switch31_out1_1 :
              Constant33_out1_3);



  assign Bit_Slice34_out1_3 = Data_Type_Conversion_out1_3[45];



  assign Constant34_out1_3 = 6'b010001;



  assign Switch33_out1_3 = (Bit_Slice33_out1_3 == 1'b0 ? Switch32_out1_3 :
              Constant34_out1_3);



  assign Bit_Slice35_out1_1 = Data_Type_Conversion_out1_3[46];



  assign Constant35_out1_3 = 6'b010000;



  assign Switch34_out1_3 = (Bit_Slice34_out1_3 == 1'b0 ? Switch33_out1_3 :
              Constant35_out1_3);



  assign Bit_Slice26_out1_2 = Data_Type_Conversion_out1_3[47];



  assign Constant36_out1_1 = 6'b001111;



  assign Switch35_out1_1 = (Bit_Slice35_out1_1 == 1'b0 ? Switch34_out1_3 :
              Constant36_out1_1);



  assign Constant3_out1_6 = 6'b001110;



  assign Switch3_out1_4 = (Bit_Slice26_out1_2 == 1'b0 ? Switch35_out1_1 :
              Constant3_out1_6);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_8_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_8 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_8 <= Switch3_out1_4;
        end
      end
    end



  assign Compare_To_Constant2_out1 = Delay4_out1_8 < 6'b010110;



  assign Bit_Slice26_out1_3 = Data_Type_Conversion_out1_3[32];



  assign Constant4_out1_3 = 6'b011110;



  assign Bit_Slice25_out1_3 = Data_Type_Conversion_out1_3[33];



  assign Constant3_out1_7 = 6'b011101;



  assign Switch3_out1_5 = (Bit_Slice26_out1_3 == 1'b0 ? Constant4_out1_3 :
              Constant3_out1_7);



  assign Bit_Slice24_out1_3 = Data_Type_Conversion_out1_3[34];



  assign Constant2_out1_4 = 6'b011100;



  assign Switch2_out1_4 = (Bit_Slice25_out1_3 == 1'b0 ? Switch3_out1_5 :
              Constant2_out1_4);



  assign Bit_Slice27_out1_3 = Data_Type_Conversion_out1_3[35];



  assign Constant1_out1_3 = 6'b011011;



  assign Switch1_out1_6 = (Bit_Slice24_out1_3 == 1'b0 ? Switch2_out1_4 :
              Constant1_out1_3);



  assign Bit_Slice15_out1_4 = Data_Type_Conversion_out1_3[36];



  assign Constant124_out1_3 = 6'b011010;



  assign Switch116_out1_3 = (Bit_Slice27_out1_3 == 1'b0 ? Switch1_out1_6 :
              Constant124_out1_3);



  assign Bit_Slice16_out1_4 = Data_Type_Conversion_out1_3[37];



  assign Constant28_out1_4 = 6'b011001;



  assign Switch17_out1_4 = (Bit_Slice15_out1_4 == 1'b0 ? Switch116_out1_3 :
              Constant28_out1_4);



  assign Bit_Slice17_out1_4 = Data_Type_Conversion_out1_3[38];



  assign Constant26_out1_4 = 6'b011000;



  assign Switch18_out1_4 = (Bit_Slice16_out1_4 == 1'b0 ? Switch17_out1_4 :
              Constant26_out1_4);



  assign Bit_Slice28_out1_3 = Data_Type_Conversion_out1_3[39];



  assign Constant27_out1_4 = 6'b010111;



  assign Switch19_out1_4 = (Bit_Slice17_out1_4 == 1'b0 ? Switch18_out1_4 :
              Constant27_out1_4);



  assign Constant29_out1_5 = 6'b010110;



  assign Switch28_out1_3 = (Bit_Slice28_out1_3 == 1'b0 ? Switch19_out1_4 :
              Constant29_out1_5);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_5_process
      if (i_RST_N == 1'b0) begin
        Delay7_out1_5 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_5 <= Switch28_out1_3;
        end
      end
    end



  assign Switch2_out1_5 = (Compare_To_Constant2_out1 == 1'b0 ? Delay7_out1_5 :
              Delay4_out1_8);



  assign Switch6_out1 = (Compare_To_Constant7_out1 == 1'b0 ? Switch2_out1_5 :
              Switch1_out1_5);



  assign Bit_Slice32_out1_4 = Data_Type_Conversion_out1_3[24];



  assign Constant32_out1_4 = 6'b100110;



  assign Bit_Slice33_out1_4 = Data_Type_Conversion_out1_3[25];



  assign Constant33_out1_4 = 6'b100101;



  assign Switch32_out1_4 = (Bit_Slice32_out1_4 == 1'b0 ? Constant32_out1_4 :
              Constant33_out1_4);



  assign Bit_Slice34_out1_4 = Data_Type_Conversion_out1_3[26];



  assign Constant34_out1_4 = 6'b100100;



  assign Switch33_out1_4 = (Bit_Slice33_out1_4 == 1'b0 ? Switch32_out1_4 :
              Constant34_out1_4);



  assign Bit_Slice15_out1_5 = Data_Type_Conversion_out1_3[27];



  assign Constant35_out1_4 = 6'b100011;



  assign Switch34_out1_4 = (Bit_Slice34_out1_4 == 1'b0 ? Switch33_out1_4 :
              Constant35_out1_4);



  assign Bit_Slice16_out1_5 = Data_Type_Conversion_out1_3[28];



  assign Constant28_out1_5 = 6'b100010;



  assign Switch17_out1_5 = (Bit_Slice15_out1_5 == 1'b0 ? Switch34_out1_4 :
              Constant28_out1_5);



  assign Bit_Slice17_out1_5 = Data_Type_Conversion_out1_3[29];



  assign Constant26_out1_5 = 6'b100001;



  assign Switch18_out1_5 = (Bit_Slice16_out1_5 == 1'b0 ? Switch17_out1_5 :
              Constant26_out1_5);



  assign Bit_Slice28_out1_4 = Data_Type_Conversion_out1_3[30];



  assign Constant27_out1_5 = 6'b100000;



  assign Switch19_out1_5 = (Bit_Slice17_out1_5 == 1'b0 ? Switch18_out1_5 :
              Constant27_out1_5);



  assign Bit_Slice29_out1_4 = Data_Type_Conversion_out1_3[31];



  assign Constant29_out1_6 = 6'b011111;



  assign Switch28_out1_4 = (Bit_Slice28_out1_4 == 1'b0 ? Switch19_out1_5 :
              Constant29_out1_6);



  assign Constant30_out1_4 = 6'b011110;



  assign Switch29_out1_4 = (Bit_Slice29_out1_4 == 1'b0 ? Switch28_out1_4 :
              Constant30_out1_4);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_9_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_11 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_11 <= Switch29_out1_4;
        end
      end
    end



  assign Compare_To_Constant3_out1_1 = Delay3_out1_11 < 6'b100110;



  assign Bit_Slice25_out1_4 = Data_Type_Conversion_out1_3[16];



  assign Constant3_out1_8 = 6'b101110;



  assign Bit_Slice24_out1_4 = Data_Type_Conversion_out1_3[17];



  assign Constant2_out1_5 = 6'b101101;



  assign Switch2_out1_6 = (Bit_Slice25_out1_4 == 1'b0 ? Constant3_out1_8 :
              Constant2_out1_5);



  assign Bit_Slice27_out1_4 = Data_Type_Conversion_out1_3[18];



  assign Constant1_out1_4 = 6'b101100;



  assign Switch1_out1_7 = (Bit_Slice24_out1_4 == 1'b0 ? Switch2_out1_6 :
              Constant1_out1_4);



  assign Bit_Slice15_out1_6 = Data_Type_Conversion_out1_3[19];



  assign Constant124_out1_4 = 6'b101011;



  assign Switch116_out1_4 = (Bit_Slice27_out1_4 == 1'b0 ? Switch1_out1_7 :
              Constant124_out1_4);



  assign Bit_Slice16_out1_6 = Data_Type_Conversion_out1_3[20];



  assign Constant28_out1_6 = 6'b101010;



  assign Switch17_out1_6 = (Bit_Slice15_out1_6 == 1'b0 ? Switch116_out1_4 :
              Constant28_out1_6);



  assign Bit_Slice17_out1_6 = Data_Type_Conversion_out1_3[21];



  assign Constant26_out1_6 = 6'b101001;



  assign Switch18_out1_6 = (Bit_Slice16_out1_6 == 1'b0 ? Switch17_out1_6 :
              Constant26_out1_6);



  assign Bit_Slice28_out1_5 = Data_Type_Conversion_out1_3[22];



  assign Constant27_out1_6 = 6'b101000;



  assign Switch19_out1_6 = (Bit_Slice17_out1_6 == 1'b0 ? Switch18_out1_6 :
              Constant27_out1_6);



  assign Bit_Slice29_out1_5 = Data_Type_Conversion_out1_3[23];



  assign Constant29_out1_7 = 6'b100111;



  assign Switch28_out1_5 = (Bit_Slice28_out1_5 == 1'b0 ? Switch19_out1_6 :
              Constant29_out1_7);



  assign Constant30_out1_5 = 6'b100110;



  assign Switch29_out1_5 = (Bit_Slice29_out1_5 == 1'b0 ? Switch28_out1_5 :
              Constant30_out1_5);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_5_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1_5 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_5 <= Switch29_out1_5;
        end
      end
    end



  assign Switch3_out1_6 = (Compare_To_Constant3_out1_1 == 1'b0 ? Delay5_out1_5 :
              Delay3_out1_11);



  assign Bit_Slice29_out1_6 = Data_Type_Conversion_out1_3[8];



  assign Constant29_out1_8 = 6'b110110;



  assign Bit_Slice30_out1_2 = Data_Type_Conversion_out1_3[9];



  assign Constant30_out1_6 = 6'b110101;



  assign Switch29_out1_6 = (Bit_Slice29_out1_6 == 1'b0 ? Constant29_out1_8 :
              Constant30_out1_6);



  assign Bit_Slice31_out1_2 = Data_Type_Conversion_out1_3[10];



  assign Constant31_out1_2 = 6'b110100;



  assign Switch30_out1_2 = (Bit_Slice30_out1_2 == 1'b0 ? Switch29_out1_6 :
              Constant31_out1_2);



  assign Bit_Slice32_out1_5 = Data_Type_Conversion_out1_3[11];



  assign Constant32_out1_5 = 6'b110011;



  assign Switch31_out1_2 = (Bit_Slice31_out1_2 == 1'b0 ? Switch30_out1_2 :
              Constant32_out1_5);



  assign Bit_Slice33_out1_5 = Data_Type_Conversion_out1_3[12];



  assign Constant33_out1_5 = 6'b110010;



  assign Switch32_out1_5 = (Bit_Slice32_out1_5 == 1'b0 ? Switch31_out1_2 :
              Constant33_out1_5);



  assign Bit_Slice34_out1_5 = Data_Type_Conversion_out1_3[13];



  assign Constant34_out1_5 = 6'b110001;



  assign Switch33_out1_5 = (Bit_Slice33_out1_5 == 1'b0 ? Switch32_out1_5 :
              Constant34_out1_5);



  assign Bit_Slice35_out1_2 = Data_Type_Conversion_out1_3[14];



  assign Constant35_out1_5 = 6'b110000;



  assign Switch34_out1_5 = (Bit_Slice34_out1_5 == 1'b0 ? Switch33_out1_5 :
              Constant35_out1_5);



  assign Bit_Slice26_out1_4 = Data_Type_Conversion_out1_3[15];



  assign Constant36_out1_2 = 6'b101111;



  assign Switch35_out1_2 = (Bit_Slice35_out1_2 == 1'b0 ? Switch34_out1_5 :
              Constant36_out1_2);



  assign Constant3_out1_9 = 6'b101110;



  assign Switch3_out1_7 = (Bit_Slice26_out1_4 == 1'b0 ? Switch35_out1_2 :
              Constant3_out1_9);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_5_process
      if (i_RST_N == 1'b0) begin
        Delay6_out1_5 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_5 <= Switch3_out1_7;
        end
      end
    end



  assign Compare_To_Constant4_out1_1 = Delay6_out1_5 < 6'b110110;



  assign Bit_Slice26_out1_5 = Data_Type_Conversion_out1_3[0];



  assign Bit_Slice28_out1_6 = Data_Type_Conversion_out1_3[7];



  assign Bit_Slice17_out1_7 = Data_Type_Conversion_out1_3[6];



  assign Bit_Slice16_out1_7 = Data_Type_Conversion_out1_3[5];



  assign Bit_Slice15_out1_7 = Data_Type_Conversion_out1_3[4];



  assign Bit_Slice27_out1_5 = Data_Type_Conversion_out1_3[3];



  assign Bit_Slice24_out1_5 = Data_Type_Conversion_out1_3[2];



  assign Bit_Slice25_out1_5 = Data_Type_Conversion_out1_3[1];



  assign Constant4_out1_4 = 7'b1111111;



  assign Constant3_out1_10 = 6'b111101;



  assign Constant3_out1_dtc_2 = {1'b0, Constant3_out1_10};



  assign Switch3_out1_8 = (Bit_Slice26_out1_5 == 1'b0 ? Constant4_out1_4 :
              Constant3_out1_dtc_2);



  assign Constant2_out1_6 = 6'b111100;



  assign Constant2_out1_dtc = {1'b0, Constant2_out1_6};



  assign Switch2_out1_7 = (Bit_Slice25_out1_5 == 1'b0 ? Switch3_out1_8 :
              Constant2_out1_dtc);



  assign Constant1_out1_5 = 6'b111011;



  assign Constant1_out1_dtc = {1'b0, Constant1_out1_5};



  assign Switch1_out1_8 = (Bit_Slice24_out1_5 == 1'b0 ? Switch2_out1_7 :
              Constant1_out1_dtc);



  assign Constant124_out1_5 = 6'b111010;



  assign Constant124_out1_dtc = {1'b0, Constant124_out1_5};



  assign Switch116_out1_5 = (Bit_Slice27_out1_5 == 1'b0 ? Switch1_out1_8 :
              Constant124_out1_dtc);



  assign Constant28_out1_7 = 6'b111001;



  assign Constant28_out1_dtc = {1'b0, Constant28_out1_7};



  assign Switch17_out1_7 = (Bit_Slice15_out1_7 == 1'b0 ? Switch116_out1_5 :
              Constant28_out1_dtc);



  assign Constant26_out1_7 = 6'b111000;



  assign Constant26_out1_dtc = {1'b0, Constant26_out1_7};



  assign Switch18_out1_7 = (Bit_Slice16_out1_7 == 1'b0 ? Switch17_out1_7 :
              Constant26_out1_dtc);



  assign Constant27_out1_7 = 6'b110111;



  assign Constant27_out1_dtc = {1'b0, Constant27_out1_7};



  assign Switch19_out1_7 = (Bit_Slice17_out1_7 == 1'b0 ? Switch18_out1_7 :
              Constant27_out1_dtc);



  assign Constant29_out1_9 = 6'b110110;



  assign Constant29_out1_dtc = {1'b0, Constant29_out1_9};



  assign Switch28_out1_6 = (Bit_Slice28_out1_6 == 1'b0 ? Switch19_out1_7 :
              Constant29_out1_dtc);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_4_process
      if (i_RST_N == 1'b0) begin
        Delay8_out1_4 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_4 <= Switch28_out1_6;
        end
      end
    end



  assign Compare_To_Constant5_out1_1 = Switch3_out1_6 < 6'b101110;



  assign Delay6_out1_dtc = {1'b0, Delay6_out1_5};



  assign Switch4_out1_1 = (Compare_To_Constant4_out1_1 == 1'b0 ? Delay8_out1_4 :
              Delay6_out1_dtc);



  assign Compare_To_Constant6_out1 = Switch6_out1 < 6'b011110;



  assign Switch3_out1_dtc = {1'b0, Switch3_out1_6};



  assign Switch5_out1_3 = (Compare_To_Constant5_out1_1 == 1'b0 ? Switch4_out1_1 :
              Switch3_out1_dtc);



  assign Switch6_out1_dtc = {1'b0, Switch6_out1};



  assign Switch7_out1 = (Compare_To_Constant6_out1 == 1'b0 ? Switch5_out1_3 :
              Switch6_out1_dtc);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_10_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_12 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_12 <= Switch7_out1;
        end
      end
    end



  assign dynamic_shift_4 = {1'b0, Delay3_out1_12};
  assign Shift_Arithmetic_out1_2 = Delay5_out1_4 <<< dynamic_shift_4;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_6_process
      if (i_RST_N == 1'b0) begin
        Delay7_out1_6 <= 62'h0000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_6 <= Shift_Arithmetic_out1_2;
        end
      end
    end



  assign Bit_Slice2_out1_1 = Delay7_out1_6[37:36];



  assign Bit_Slice4_out1_1 = Bit_Slice2_out1_1[0];



  assign Bit_Slice5_out1_2 = Bit_Slice2_out1_1[1];



  assign Bit_Slice3_out1_1 = Delay7_out1_6[38];



  assign Bit_Slice1_out1_2 = Delay7_out1_6[35:0];



  assign Bit_Reduce_out1_1 = (|Bit_Slice1_out1_2[35:0]);



  assign Logical_Operator1_out1_3 = Bit_Reduce_out1_1 | (Bit_Slice4_out1_1 | Bit_Slice3_out1_1);



  assign Logical_Operator_out1_3 = Bit_Slice5_out1_2 & Logical_Operator1_out1_3;



  assign Bit_Slice1_out1_3 = Delay7_out1_6[60:38];



  assign Bit_Slice1_out1_dtc_1 = {1'b0, Bit_Slice1_out1_3};



  assign Constant2_out1_7 = 23'b00000000000000000000001;



  assign Add1_4 = {9'b0, Constant2_out1_7};
  assign Add1_5 = {9'b0, Bit_Slice1_out1_3};
  assign Add1_add_temp_1 = Add1_4 + Add1_5;
  assign Add1_out1_1 = Add1_add_temp_1[23:0];



  assign Switch2_out1_8 = (Logical_Operator_out1_3 == 1'b0 ? Bit_Slice1_out1_dtc_1 :
              Add1_out1_1);



  assign Bit_Slice5_out1_3 = Switch2_out1_8[23];



  assign C1_out1_2 = 8'b01111111;



  assign Sum1_1 = {24'b0, C1_out1_2};
  assign Sum1_2 = {25'b0, Delay3_out1_12};
  assign Sum1_sub_temp = Sum1_1 - Sum1_2;
  assign Sum1_out1 = Sum1_sub_temp[7:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_7_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_7 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_7 <= Sum1_out1;
        end
      end
    end



  assign Sum2_4 = {31'b0, Bit_Slice5_out1_3};
  assign Sum2_5 = {24'b0, Delay2_out1_7};
  assign Sum2_add_temp = Sum2_4 + Sum2_5;
  assign Sum2_out1_1 = Sum2_add_temp[7:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_6_process
      if (i_RST_N == 1'b0) begin
        Delay6_out1_6 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_6 <= Sum2_out1_1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_9_process
      if (i_RST_N == 1'b0) begin
        Delay4_reg_4[0] <= 10'sb0000000000;
        Delay4_reg_4[1] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay4_reg_4[0] <= Delay4_reg_next_4[0];
          Delay4_reg_4[1] <= Delay4_reg_next_4[1];
        end
      end
    end

  assign Delay4_out1_9 = Delay4_reg_4[1];
  assign Delay4_reg_next_4[0] = Delay4_out1_6;
  assign Delay4_reg_next_4[1] = Delay4_reg_4[0];



  assign exp_127_out1 = Delay4_out1_9 <= 10'sb1110000001;



  assign C4_out1_1 = 10'sb0001111111;



  assign exp_127_2 = {{22{Delay4_out1_6[9]}}, Delay4_out1_6};
  assign exp_127_3 = {{22{C4_out1_1[9]}}, C4_out1_1};
  assign exp_127_add_temp = exp_127_2 + exp_127_3;
  assign exp_127_out1_1 = exp_127_add_temp[10:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_6_process
      if (i_RST_N == 1'b0) begin
        Delay5_reg_4[0] <= 11'sb00000000000;
        Delay5_reg_4[1] <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg_4[0] <= Delay5_reg_next_4[0];
          Delay5_reg_4[1] <= Delay5_reg_next_4[1];
        end
      end
    end

  assign Delay5_out1_6 = Delay5_reg_4[1];
  assign Delay5_reg_next_4[0] = exp_127_out1_1;
  assign Delay5_reg_next_4[1] = Delay5_reg_4[0];



  assign DTC_out1_5 = Delay5_out1_6[7:0];



  assign C5_out1 = 8'b00000000;



  assign if_exp_127_out1 = (exp_127_out1 == 1'b0 ? DTC_out1_5 :
              C5_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_7_process
      if (i_RST_N == 1'b0) begin
        Delay1_reg_2[0] <= 8'b00000000;
        Delay1_reg_2[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_reg_2[0] <= Delay1_reg_next_2[0];
          Delay1_reg_2[1] <= Delay1_reg_next_2[1];
        end
      end
    end

  assign Delay1_out1_7 = Delay1_reg_2[1];
  assign Delay1_reg_next_2[0] = if_exp_127_out1;
  assign Delay1_reg_next_2[1] = Delay1_reg_2[0];



  assign if_exp_12_swapped_out1 = (Delay7_out1_3 == 1'b0 ? Delay6_out1_6 :
              Delay1_out1_7);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_2_process
      if (i_RST_N == 1'b0) begin
        outputCorrection_out2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          outputCorrection_out2 <= if_exp_12_swapped_out1;
        end
      end
    end



  assign Compare_To_Zero_out1 = outputCorrection_out2 == 8'b00000000;



  assign Constant2_out1_8 = 1'b1;



  assign Bit_Slice6_out1_1 = Switch2_out1_8[22:0];



  assign Bit_Shift2_out1_1 = Bit_Slice6_out1_1 >>> 8'd1;



  assign Switch3_out1_9 = (Bit_Slice5_out1_3 == 1'b0 ? Bit_Slice6_out1_1 :
              Bit_Shift2_out1_1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_10_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_10 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_10 <= Switch3_out1_9;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_11_process
      if (i_RST_N == 1'b0) begin
        Delay3_reg_3[0] <= 24'b000000000000000000000000;
        Delay3_reg_3[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_reg_3[0] <= Delay3_reg_next_3[0];
          Delay3_reg_3[1] <= Delay3_reg_next_3[1];
        end
      end
    end

  assign Delay3_out1_13 = Delay3_reg_3[1];
  assign Delay3_reg_next_3[0] = Delay5_out1_3;
  assign Delay3_reg_next_3[1] = Delay3_reg_3[0];



  assign C_out1_3 = 10'sb1110000010;



  assign alpha126_exp_1 = {{22{C_out1_3[9]}}, C_out1_3};
  assign alpha126_exp_2 = {{22{Delay4_out1_6[9]}}, Delay4_out1_6};
  assign alpha126_exp_sub_temp = alpha126_exp_1 - alpha126_exp_2;
  assign alpha126_exp_out1 = alpha126_exp_sub_temp[10:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_8_process
      if (i_RST_N == 1'b0) begin
        Delay2_reg_2[0] <= 11'sb00000000000;
        Delay2_reg_2[1] <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg_2[0] <= Delay2_reg_next_2[0];
          Delay2_reg_2[1] <= Delay2_reg_next_2[1];
        end
      end
    end

  assign Delay2_out1_8 = Delay2_reg_2[1];
  assign Delay2_reg_next_2[0] = alpha126_exp_out1;
  assign Delay2_reg_next_2[1] = Delay2_reg_2[0];



  assign shift_x_m_WordLength_out1 = Delay2_out1_8 < 11'sb00000011000;



  assign shift_0_out1_1 = Delay2_out1_8 > 11'sb00000000000;



  assign shift_x_m_WordLength_shif_out1 = shift_x_m_WordLength_out1 & shift_0_out1_1;



  assign C2_out1_2 = 1'b0;



  assign C1_out1_3 = 1'b1;



  assign if_shift_x_m_WordLength_shif_out1 = (shift_x_m_WordLength_shif_out1 == 1'b0 ? C2_out1_2 :
              C1_out1_3);



  assign C3_out1_1 = 24'b000000000000000000000000;



  assign if_doShift_out1_1 = (if_shift_x_m_WordLength_shif_out1 == 1'b0 ? C3_out1_1 :
              Delay3_out1_13);



  assign if_exp_127_1_out1 = (exp_127_out1 == 1'b0 ? Delay3_out1_13 :
              if_doShift_out1_1);



  assign Bit_Slice_out1_1 = if_exp_127_1_out1[22:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_7_process
      if (i_RST_N == 1'b0) begin
        Delay7_reg_3[0] <= 23'b00000000000000000000000;
        Delay7_reg_3[1] <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_reg_3[0] <= Delay7_reg_next_3[0];
          Delay7_reg_3[1] <= Delay7_reg_next_3[1];
        end
      end
    end

  assign Delay7_out1_7 = Delay7_reg_3[1];
  assign Delay7_reg_next_3[0] = Bit_Slice_out1_1;
  assign Delay7_reg_next_3[1] = Delay7_reg_3[0];



  assign if_exp_12_swapped_1_out1 = (Delay7_out1_3 == 1'b0 ? Delay4_out1_10 :
              Delay7_out1_7);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_3_process
      if (i_RST_N == 1'b0) begin
        outputCorrection_out3 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          outputCorrection_out3 <= if_exp_12_swapped_1_out1;
        end
      end
    end



  assign Bit_Concat2_out1 = {Constant2_out1_8, outputCorrection_out3};



  assign Constant_out1_2 = 1'b0;



  assign Bit_Concat_out1_3 = {Constant_out1_2, outputCorrection_out3};



  assign Switch_out1_1 = (Compare_To_Zero_out1 == 1'b0 ? Bit_Concat2_out1 :
              Bit_Concat_out1_3);



  assign Bit_Concat_out1_4 = {outputCorrection_out2, Switch_out1_1};



  assign Constant1_out1_6 = 8'b10000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_11_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_11 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_11 <= Constant1_out1_6;
        end
      end
    end



  assign Compare_To_Zero1_out1 = Delay4_out1_11 == 8'b00000000;



  assign Constant1_out1_7 = 1'b1;



  assign C2_out1_3 = 23'b10010010000111111011011;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_7_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1_7 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_7 <= C2_out1_3;
        end
      end
    end



  assign Bit_Concat1_out1 = {Constant1_out1_7, Delay5_out1_7};



  assign Constant3_out1_11 = 1'b0;



  assign Bit_Concat3_out1 = {Constant3_out1_11, Delay5_out1_7};



  assign Switch1_out1_9 = (Compare_To_Zero1_out1 == 1'b0 ? Bit_Concat1_out1 :
              Bit_Concat3_out1);



  assign Bit_Concat1_out1_1 = {Delay4_out1_11, Switch1_out1_9};



  assign Relational_Operator4_relop1 = Bit_Concat_out1_4 == Bit_Concat1_out1_1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_12_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_12 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_12 <= Relational_Operator4_relop1;
        end
      end
    end



  assign Relational_Operator1_relop1 = Bit_Concat_out1_4 > Bit_Concat1_out1_1;



  assign Logical_Operator_out1_4 = Relational_Operator4_relop1 | Relational_Operator1_relop1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_8_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_8 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_8 <= Logical_Operator_out1_4;
        end
      end
    end



  assign Switch1_out1_10 = (Logical_Operator_out1 == 1'b0 ? Delay3_out1_3 :
              sign_0_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_5_process
      if (i_RST_N == 1'b0) begin
        Delay8_reg[0] <= 1'b0;
        Delay8_reg[1] <= 1'b0;
        Delay8_reg[2] <= 1'b0;
        Delay8_reg[3] <= 1'b0;
        Delay8_reg[4] <= 1'b0;
        Delay8_reg[5] <= 1'b0;
        Delay8_reg[6] <= 1'b0;
        Delay8_reg[7] <= 1'b0;
        Delay8_reg[8] <= 1'b0;
        Delay8_reg[9] <= 1'b0;
        Delay8_reg[10] <= 1'b0;
        Delay8_reg[11] <= 1'b0;
        Delay8_reg[12] <= 1'b0;
        Delay8_reg[13] <= 1'b0;
        Delay8_reg[14] <= 1'b0;
        Delay8_reg[15] <= 1'b0;
        Delay8_reg[16] <= 1'b0;
        Delay8_reg[17] <= 1'b0;
        Delay8_reg[18] <= 1'b0;
        Delay8_reg[19] <= 1'b0;
        Delay8_reg[20] <= 1'b0;
        Delay8_reg[21] <= 1'b0;
        Delay8_reg[22] <= 1'b0;
        Delay8_reg[23] <= 1'b0;
        Delay8_reg[24] <= 1'b0;
        Delay8_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= Delay8_reg_next[0];
          Delay8_reg[1] <= Delay8_reg_next[1];
          Delay8_reg[2] <= Delay8_reg_next[2];
          Delay8_reg[3] <= Delay8_reg_next[3];
          Delay8_reg[4] <= Delay8_reg_next[4];
          Delay8_reg[5] <= Delay8_reg_next[5];
          Delay8_reg[6] <= Delay8_reg_next[6];
          Delay8_reg[7] <= Delay8_reg_next[7];
          Delay8_reg[8] <= Delay8_reg_next[8];
          Delay8_reg[9] <= Delay8_reg_next[9];
          Delay8_reg[10] <= Delay8_reg_next[10];
          Delay8_reg[11] <= Delay8_reg_next[11];
          Delay8_reg[12] <= Delay8_reg_next[12];
          Delay8_reg[13] <= Delay8_reg_next[13];
          Delay8_reg[14] <= Delay8_reg_next[14];
          Delay8_reg[15] <= Delay8_reg_next[15];
          Delay8_reg[16] <= Delay8_reg_next[16];
          Delay8_reg[17] <= Delay8_reg_next[17];
          Delay8_reg[18] <= Delay8_reg_next[18];
          Delay8_reg[19] <= Delay8_reg_next[19];
          Delay8_reg[20] <= Delay8_reg_next[20];
          Delay8_reg[21] <= Delay8_reg_next[21];
          Delay8_reg[22] <= Delay8_reg_next[22];
          Delay8_reg[23] <= Delay8_reg_next[23];
          Delay8_reg[24] <= Delay8_reg_next[24];
          Delay8_reg[25] <= Delay8_reg_next[25];
        end
      end
    end

  assign Delay8_out1_5 = Delay8_reg[25];
  assign Delay8_reg_next[0] = Switch1_out1_10;
  assign Delay8_reg_next[1] = Delay8_reg[0];
  assign Delay8_reg_next[2] = Delay8_reg[1];
  assign Delay8_reg_next[3] = Delay8_reg[2];
  assign Delay8_reg_next[4] = Delay8_reg[3];
  assign Delay8_reg_next[5] = Delay8_reg[4];
  assign Delay8_reg_next[6] = Delay8_reg[5];
  assign Delay8_reg_next[7] = Delay8_reg[6];
  assign Delay8_reg_next[8] = Delay8_reg[7];
  assign Delay8_reg_next[9] = Delay8_reg[8];
  assign Delay8_reg_next[10] = Delay8_reg[9];
  assign Delay8_reg_next[11] = Delay8_reg[10];
  assign Delay8_reg_next[12] = Delay8_reg[11];
  assign Delay8_reg_next[13] = Delay8_reg[12];
  assign Delay8_reg_next[14] = Delay8_reg[13];
  assign Delay8_reg_next[15] = Delay8_reg[14];
  assign Delay8_reg_next[16] = Delay8_reg[15];
  assign Delay8_reg_next[17] = Delay8_reg[16];
  assign Delay8_reg_next[18] = Delay8_reg[17];
  assign Delay8_reg_next[19] = Delay8_reg[18];
  assign Delay8_reg_next[20] = Delay8_reg[19];
  assign Delay8_reg_next[21] = Delay8_reg[20];
  assign Delay8_reg_next[22] = Delay8_reg[21];
  assign Delay8_reg_next[23] = Delay8_reg[22];
  assign Delay8_reg_next[24] = Delay8_reg[23];
  assign Delay8_reg_next[25] = Delay8_reg[24];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay9_2_process
      if (i_RST_N == 1'b0) begin
        Delay9_reg[0] <= 1'b0;
        Delay9_reg[1] <= 1'b0;
        Delay9_reg[2] <= 1'b0;
        Delay9_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_reg[0] <= Delay9_reg_next[0];
          Delay9_reg[1] <= Delay9_reg_next[1];
          Delay9_reg[2] <= Delay9_reg_next[2];
          Delay9_reg[3] <= Delay9_reg_next[3];
        end
      end
    end

  assign Delay9_out1_2 = Delay9_reg[3];
  assign Delay9_reg_next[0] = Delay8_out1_5;
  assign Delay9_reg_next[1] = Delay9_reg[0];
  assign Delay9_reg_next[2] = Delay9_reg[1];
  assign Delay9_reg_next[3] = Delay9_reg[2];



  assign Logical_Operator_out1_5 =  ~ Delay9_out1_2;



  assign C4_out1_2 = 1'b1;



  assign C3_out1_2 = 1'b0;



  assign orig_y_s_0_out1 = (Logical_Operator_out1_5 == 1'b0 ? C4_out1_2 :
              C3_out1_2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_9_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_9 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_9 <= orig_y_s_0_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_8_process
      if (i_RST_N == 1'b0) begin
        Delay7_out1_8 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_8 <= Delay1_out1_9;
        end
      end
    end



  assign Constant4_out1_5 = 1'b0;



  assign Constant3_out1_12 = 1'b1;



  assign Switch3_out1_10 = (Delay7_out1_8 == 1'b0 ? Constant4_out1_5 :
              Constant3_out1_12);



  assign Logical_Operator_out1_6 = Delay6_out1 ^ Delay8_out1_5;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_10_process
      if (i_RST_N == 1'b0) begin
        Delay1_reg_3[0] <= 1'b0;
        Delay1_reg_3[1] <= 1'b0;
        Delay1_reg_3[2] <= 1'b0;
        Delay1_reg_3[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_reg_3[0] <= Delay1_reg_next_3[0];
          Delay1_reg_3[1] <= Delay1_reg_next_3[1];
          Delay1_reg_3[2] <= Delay1_reg_next_3[2];
          Delay1_reg_3[3] <= Delay1_reg_next_3[3];
        end
      end
    end

  assign Delay1_out1_10 = Delay1_reg_3[3];
  assign Delay1_reg_next_3[0] = Logical_Operator_out1_6;
  assign Delay1_reg_next_3[1] = Delay1_reg_3[0];
  assign Delay1_reg_next_3[2] = Delay1_reg_3[1];
  assign Delay1_reg_next_3[3] = Delay1_reg_3[2];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_4_process
      if (i_RST_N == 1'b0) begin
        outputCorrection_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          outputCorrection_out1 <= Delay1_out1_10;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_7_process
      if (i_RST_N == 1'b0) begin
        Delay6_out1_7 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_7 <= outputCorrection_out1;
        end
      end
    end



  assign Constant2_out1_9 = 1'b0;



  assign Constant1_out1_8 = 1'b1;



  assign Switch2_out1_9 = (Delay6_out1_7 == 1'b0 ? Constant2_out1_9 :
              Constant1_out1_8);



  assign Switch1_out1_11 = (Delay1_out1_8 == 1'b0 ? Switch3_out1_10 :
              Switch2_out1_9);



  assign Logical_Operator1_out1_4 = Delay6_out1_7 & Delay7_out1_8;



  assign Switch4_out1_2 = (Delay4_out1_12 == 1'b0 ? Switch1_out1_11 :
              Logical_Operator1_out1_4);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_13_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_13 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_13 <= Switch4_out1_2;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay9_3_process
      if (i_RST_N == 1'b0) begin
        Delay9_out1_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1_3 <= Delay4_out1_13;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay11_4_process
      if (i_RST_N == 1'b0) begin
        Delay11_reg_1[0] <= 1'b0;
        Delay11_reg_1[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_reg_1[0] <= Delay11_reg_next_1[0];
          Delay11_reg_1[1] <= Delay11_reg_next_1[1];
        end
      end
    end

  assign Delay11_out1_4 = Delay11_reg_1[1];
  assign Delay11_reg_next_1[0] = Delay9_out1_3;
  assign Delay11_reg_next_1[1] = Delay11_reg_1[0];



  assign Data_Type_Conversion1_out1 = Delay11_out1_4;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay12_3_process
      if (i_RST_N == 1'b0) begin
        Delay12_out1_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay12_out1_3 <= Data_Type_Conversion1_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_5_process
      if (i_RST_N == 1'b0) begin
        reduced_reg_1[0] <= 1'b0;
        reduced_reg_1[1] <= 1'b0;
        reduced_reg_1[2] <= 1'b0;
        reduced_reg_1[3] <= 1'b0;
        reduced_reg_1[4] <= 1'b0;
        reduced_reg_1[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
          reduced_reg_1[2] <= reduced_reg_next_1[2];
          reduced_reg_1[3] <= reduced_reg_next_1[3];
          reduced_reg_1[4] <= reduced_reg_next_1[4];
          reduced_reg_1[5] <= reduced_reg_next_1[5];
        end
      end
    end

  assign outputCorrection_out1_1 = reduced_reg_1[5];
  assign reduced_reg_next_1[0] = outputCorrection_out1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];
  assign reduced_reg_next_1[2] = reduced_reg_1[1];
  assign reduced_reg_next_1[3] = reduced_reg_1[2];
  assign reduced_reg_next_1[4] = reduced_reg_1[3];
  assign reduced_reg_next_1[5] = reduced_reg_1[4];



  assign orig_x_s_0_out1 = (Delay4_out1 == 1'b0 ? Delay12_out1_3 :
              outputCorrection_out1_1);



  assign Switch_out1_2 = (Delay15_out1 == 1'b0 ? Delay3_out1_4 :
              orig_x_s_0_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_9_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_9 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1_9 <= Switch_out1_2;
        end
      end
    end



  assign Constant8_out1 = 1'b1;



  assign Constant7_out1 = 8'b00101001;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_14_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_14 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_14 <= Relational_Operator_relop1;
        end
      end
    end



  assign Logical_Operator2_out1 =  ~ Delay4_out1_14;



  assign Logical_Operator_out1_7 = Constant8_out1 & Logical_Operator2_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_12_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_14 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_14 <= Add_out1;
        end
      end
    end



  assign Add_1 = {7'b0, Logical_Operator_out1_7};
  assign Add_out1 = Delay3_out1_14 + Add_1;



  assign Relational_Operator_relop1 = Add_out1 > Constant7_out1;



  assign Constant_out1_3 = 8'b00000000;



  assign Constant1_out1_9 = 8'b01111111;



  assign Switch1_out1_12 = (Logical_Operator_out1_4 == 1'b0 ? Delay4_out1_11 :
              outputCorrection_out2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_process
      if (i_RST_N == 1'b0) begin
        Delay_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Switch1_out1_12;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay19_process
      if (i_RST_N == 1'b0) begin
        Delay19_reg[0] <= 8'b00000000;
        Delay19_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay19_reg[0] <= Delay19_reg_next[0];
          Delay19_reg[1] <= Delay19_reg_next[1];
        end
      end
    end

  assign Delay19_out1 = Delay19_reg[1];
  assign Delay19_reg_next[0] = Delay_out1;
  assign Delay19_reg_next[1] = Delay19_reg[0];



  assign Compare_To_Zero_out1_1 = Delay19_out1 > 8'b00000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_11_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_11 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_11 <= Compare_To_Zero_out1_1;
        end
      end
    end



  assign Logical_Operator_out1_8 = Delay6_out1_7 ^ Delay7_out1_8;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_8_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1_8 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1_8 <= Logical_Operator_out1_8;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_12_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_12 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_12 <= Switch1_out1_9;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_1_process
      if (i_RST_N == 1'b0) begin
        Delay_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_1 <= Switch_out1_1;
        end
      end
    end



  assign Switch_out1_3 = (Delay1_out1_8 == 1'b0 ? Delay1_out1_12 :
              Delay_out1_1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_9_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1_9 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_9 <= Switch_out1_3;
        end
      end
    end



  assign Constant_out1_4 = 23'b00000000000000000000000;



  assign Bit_Concat_out1_5 = {Delay5_out1_9, Constant_out1_4};



  assign Constant1_out1_10 = 8'b00000000;



  assign Subtract1_out1 = Delay4_out1_11 - outputCorrection_out2;



  assign Subtract_out1 = outputCorrection_out2 - Delay4_out1_11;



  assign Switch_out1_4 = (Logical_Operator_out1_4 == 1'b0 ? Subtract1_out1 :
              Subtract_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_2_process
      if (i_RST_N == 1'b0) begin
        Delay_out1_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay_out1_2 <= Switch_out1_4;
        end
      end
    end



  assign Relational_Operator2_relop1 = Constant1_out1_10 == Delay_out1_2;



  assign Constant_out1_5 = 8'b00101110;



  assign Relational_Operator1_relop1_1 = Delay_out1_2 >= Constant_out1_5;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_10_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_10 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1_10 <= Relational_Operator1_relop1_1;
        end
      end
    end



  assign Switch1_out1_13 = (Delay1_out1_8 == 1'b0 ? Delay_out1_1 :
              Delay1_out1_12);



  assign Constant_out1_6 = 23'b00000000000000000000000;



  assign Bit_Concat_out1_6 = {Switch1_out1_13, Constant_out1_6};



  assign Constant_out1_7 = 8'sb00000000;



  assign Constant_out1_dtc = Constant_out1_7;



  assign Switch1_out1_14 = (Relational_Operator1_relop1_1 == 1'b0 ? Delay_out1_2 :
              Constant_out1_dtc);



  assign Bit_Slice_out1_2 = Switch1_out1_14[5:0];



  assign dynamic_shift_6 = {2'b0, Bit_Slice_out1_2};
  assign Shift_Arithmetic_out1_3 = Bit_Concat_out1_6 >>> dynamic_shift_6;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_13_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_15 <= 47'h000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_15 <= Shift_Arithmetic_out1_3;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_13_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_13 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_13 <= Relational_Operator2_relop1;
        end
      end
    end



  assign Constant_out1_8 = 47'h000000000000;



  assign Switch1_out1_15 = (Delay2_out1_10 == 1'b0 ? Delay3_out1_15 :
              Constant_out1_8);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_11_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_11 <= 47'h000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_11 <= Bit_Concat_out1_6;
        end
      end
    end



  assign Switch_out1_5 = (Delay1_out1_13 == 1'b0 ? Switch1_out1_15 :
              Delay2_out1_11);



  assign Add_3 = {1'b0, Bit_Concat_out1_5};
  assign Add_4 = {1'b0, Switch_out1_5};
  assign Add_out1_1 = Add_3 + Add_4;



  assign Subtract_2 = {1'b0, Bit_Concat_out1_5};
  assign Subtract_3 = {1'b0, Switch_out1_5};
  assign Subtract_out1_1 = Subtract_2 - Subtract_3;



  assign Switch_out1_6 = (Delay5_out1_8 == 1'b0 ? Add_out1_1 :
              Subtract_out1_1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_14_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_16 <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_16 <= Switch_out1_6;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_6_process
      if (i_RST_N == 1'b0) begin
        Mantissa_Cal_out1 <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          Mantissa_Cal_out1 <= Delay3_out1_16;
        end
      end
    end



  assign Bit_Slice24_out1_6 = Delay3_out1_16[23];



  assign Constant25_out1 = 6'sb011000;



  assign Bit_Slice23_out1 = Delay3_out1_16[24];



  assign Constant23_out1 = 6'sb010111;



  assign Switch24_out1 = (Bit_Slice24_out1_6 == 1'b0 ? Constant25_out1 :
              Constant23_out1);



  assign Bit_Slice22_out1 = Delay3_out1_16[25];



  assign Constant24_out1 = 6'sb010110;



  assign Switch23_out1 = (Bit_Slice23_out1 == 1'b0 ? Switch24_out1 :
              Constant24_out1);



  assign Bit_Slice21_out1 = Delay3_out1_16[26];



  assign Constant22_out1 = 6'sb010101;



  assign Switch22_out1 = (Bit_Slice22_out1 == 1'b0 ? Switch23_out1 :
              Constant22_out1);



  assign Bit_Slice20_out1 = Delay3_out1_16[27];



  assign Constant21_out1 = 6'sb010100;



  assign Switch21_out1 = (Bit_Slice21_out1 == 1'b0 ? Switch22_out1 :
              Constant21_out1);



  assign Bit_Slice19_out1 = Delay3_out1_16[28];



  assign Constant20_out1 = 6'sb010011;



  assign Switch20_out1 = (Bit_Slice20_out1 == 1'b0 ? Switch21_out1 :
              Constant20_out1);



  assign Bit_Slice18_out1 = Delay3_out1_16[29];



  assign Constant19_out1 = 6'sb010010;



  assign Switch19_out1_8 = (Bit_Slice19_out1 == 1'b0 ? Switch20_out1 :
              Constant19_out1);



  assign Bit_Slice17_out1_8 = Delay3_out1_16[30];



  assign Constant18_out1 = 6'sb010001;



  assign Switch18_out1_8 = (Bit_Slice18_out1 == 1'b0 ? Switch19_out1_8 :
              Constant18_out1);



  assign Bit_Slice16_out1_8 = Delay3_out1_16[31];



  assign Constant17_out1 = 6'sb010000;



  assign Switch17_out1_8 = (Bit_Slice17_out1_8 == 1'b0 ? Switch18_out1_8 :
              Constant17_out1);



  assign Bit_Slice15_out1_8 = Delay3_out1_16[32];



  assign Constant16_out1 = 6'sb001111;



  assign Switch16_out1 = (Bit_Slice16_out1_8 == 1'b0 ? Switch17_out1_8 :
              Constant16_out1);



  assign Bit_Slice14_out1 = Delay3_out1_16[33];



  assign Constant15_out1 = 6'sb001110;



  assign Switch15_out1 = (Bit_Slice15_out1_8 == 1'b0 ? Switch16_out1 :
              Constant15_out1);



  assign Bit_Slice13_out1 = Delay3_out1_16[34];



  assign Constant14_out1 = 6'sb001101;



  assign Switch14_out1 = (Bit_Slice14_out1 == 1'b0 ? Switch15_out1 :
              Constant14_out1);



  assign Bit_Slice12_out1 = Delay3_out1_16[35];



  assign Constant13_out1 = 6'sb001100;



  assign Switch13_out1 = (Bit_Slice13_out1 == 1'b0 ? Switch14_out1 :
              Constant13_out1);



  assign Bit_Slice11_out1 = Delay3_out1_16[36];



  assign Constant12_out1 = 6'sb001011;



  assign Switch12_out1 = (Bit_Slice12_out1 == 1'b0 ? Switch13_out1 :
              Constant12_out1);



  assign Bit_Slice10_out1 = Delay3_out1_16[37];



  assign Constant11_out1 = 6'sb001010;



  assign Switch11_out1 = (Bit_Slice11_out1 == 1'b0 ? Switch12_out1 :
              Constant11_out1);



  assign Bit_Slice9_out1 = Delay3_out1_16[38];



  assign Constant10_out1 = 6'sb001001;



  assign Switch10_out1 = (Bit_Slice10_out1 == 1'b0 ? Switch11_out1 :
              Constant10_out1);



  assign Bit_Slice8_out1 = Delay3_out1_16[39];



  assign Constant9_out1 = 6'sb001000;



  assign Switch9_out1 = (Bit_Slice9_out1 == 1'b0 ? Switch10_out1 :
              Constant9_out1);



  assign Bit_Slice7_out1 = Delay3_out1_16[40];



  assign Constant8_out1_1 = 6'sb000111;



  assign Switch8_out1 = (Bit_Slice8_out1 == 1'b0 ? Switch9_out1 :
              Constant8_out1_1);



  assign Bit_Slice6_out1_2 = Delay3_out1_16[41];



  assign Constant7_out1_1 = 6'sb000110;



  assign Switch7_out1_1 = (Bit_Slice7_out1 == 1'b0 ? Switch8_out1 :
              Constant7_out1_1);



  assign Bit_Slice5_out1_4 = Delay3_out1_16[42];



  assign Constant6_out1_2 = 6'sb000101;



  assign Switch6_out1_1 = (Bit_Slice6_out1_2 == 1'b0 ? Switch7_out1_1 :
              Constant6_out1_2);



  assign Bit_Slice4_out1_2 = Delay3_out1_16[43];



  assign Constant5_out1 = 6'sb000100;



  assign Switch5_out1_4 = (Bit_Slice5_out1_4 == 1'b0 ? Switch6_out1_1 :
              Constant5_out1);



  assign Bit_Slice3_out1_2 = Delay3_out1_16[44];



  assign Constant4_out1_6 = 6'sb000011;



  assign Switch4_out1_3 = (Bit_Slice4_out1_2 == 1'b0 ? Switch5_out1_4 :
              Constant4_out1_6);



  assign Bit_Slice2_out1_2 = Delay3_out1_16[45];



  assign Constant3_out1_13 = 6'sb000010;



  assign Switch3_out1_11 = (Bit_Slice3_out1_2 == 1'b0 ? Switch4_out1_3 :
              Constant3_out1_13);



  assign Bit_Slice1_out1_4 = Delay3_out1_16[46];



  assign Constant2_out1_10 = 6'sb000001;



  assign Switch2_out1_10 = (Bit_Slice2_out1_2 == 1'b0 ? Switch3_out1_11 :
              Constant2_out1_10);



  assign Bit_Slice_out1_3 = Delay3_out1_16[47];



  assign Constant1_out1_11 = 6'sb000000;



  assign Switch1_out1_16 = (Bit_Slice1_out1_4 == 1'b0 ? Switch2_out1_10 :
              Constant1_out1_11);



  assign Constant_out1_9 = 6'sb111111;



  assign Switch_out1_7 = (Bit_Slice_out1_3 == 1'b0 ? Switch1_out1_16 :
              Constant_out1_9);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_15_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_17 <= 6'sb000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_17 <= Switch_out1_7;
        end
      end
    end



  assign Compare_To_Zero_out1_2 = Delay3_out1_17 < 6'sb000000;



  assign Bit_Slice_out1_4 = Delay3_out1_17[4:0];



  assign dynamic_shift_8 = {3'b0, Bit_Slice_out1_4};
  assign Shift_Arithmetic_out1_4 = Mantissa_Cal_out1 <<< dynamic_shift_8;



  assign Bit_Shift_out1 = Delay3_out1_16 >>> 8'd1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_14_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_14 <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_14 <= Bit_Shift_out1;
        end
      end
    end



  assign Switch_out1_8 = (Compare_To_Zero_out1_2 == 1'b0 ? Shift_Arithmetic_out1_4 :
              Delay1_out1_14);



  assign Switch2_out1_11 = (Delay1_out1_11 == 1'b0 ? Mantissa_Cal_out1 :
              Switch_out1_8);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_12_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_12 <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_12 <= Switch2_out1_11;
        end
      end
    end



  assign Bit_Slice_out1_5 = Delay2_out1_12[46:0];



  assign Bit_Slice2_out1_3 = Bit_Slice_out1_5[22:21];



  assign Bit_Slice4_out1_3 = Bit_Slice2_out1_3[0];



  assign Bit_Slice1_out1_5 = Bit_Slice_out1_5[20:0];



  assign Bit_Reduce_out1_2 = (|Bit_Slice1_out1_5[20:0]);



  assign Bit_Slice5_out1_5 = Bit_Slice2_out1_3[1];



  assign Bit_Slice3_out1_3 = Bit_Slice_out1_5[23];



  assign Logical_Operator1_out1_5 = Bit_Slice3_out1_3 | (Bit_Slice4_out1_3 | Bit_Reduce_out1_2);



  assign Logical_Operator_out1_9 = Bit_Slice5_out1_5 & Logical_Operator1_out1_5;



  assign Bit_Slice1_out1_6 = Bit_Slice_out1_5[45:23];



  assign Delay2_out1_dtc = {1'b0, Bit_Slice1_out1_6};



  assign Constant1_out1_12 = 23'b00000000000000000000001;



  assign Add_6 = {9'b0, Bit_Slice1_out1_6};
  assign Add_7 = {9'b0, Constant1_out1_12};
  assign Add_add_temp = Add_6 + Add_7;
  assign Add_out1_2 = Add_add_temp[23:0];



  assign Switch_out1_9 = (Logical_Operator_out1_9 == 1'b0 ? Delay2_out1_dtc :
              Add_out1_2);



  assign Bit_Slice2_out1_4 = Switch_out1_9[23];



  assign Compare_To_Constant_out1 = Delay3_out1_16 >= 48'h000000000001;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_15_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_15 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_15 <= Compare_To_Constant_out1;
        end
      end
    end



  assign Denormalised_FP_out1_dtc = {7'b0, Delay1_out1_15};



  assign Constant_out1_10 = 48'h000000000000;



  assign Relational_Operator_relop1_1 = Delay3_out1_16 == Constant_out1_10;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_13_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_13 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1_13 <= Relational_Operator_relop1_1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_15_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_15 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_15 <= Delay19_out1;
        end
      end
    end



  assign Subtract_5 = {24'b0, Delay4_out1_15};
  assign Subtract_6 = {{26{Delay3_out1_17[5]}}, Delay3_out1_17};
  assign Subtract_sub_temp = Subtract_5 - Subtract_6;
  assign Subtract_out1_2 = Subtract_sub_temp[7:0];



  assign Constant1_out1_13 = 8'b00000000;



  assign Switch1_out1_17 = (Delay2_out1_13 == 1'b0 ? Subtract_out1_2 :
              Constant1_out1_13);



  assign Switch1_out1_18 = (Delay1_out1_11 == 1'b0 ? Denormalised_FP_out1_dtc :
              Switch1_out1_17);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_16_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_18 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_18 <= Switch1_out1_18;
        end
      end
    end



  assign Subtract_8 = {31'b0, Bit_Slice2_out1_4};
  assign Subtract_9 = {24'b0, Delay3_out1_18};
  assign Subtract_add_temp = Subtract_8 + Subtract_9;
  assign Subtract_out1_3 = Subtract_add_temp[7:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay13_3_process
      if (i_RST_N == 1'b0) begin
        Delay13_out1_3 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay13_out1_3 <= Subtract_out1_3;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_7_process
      if (i_RST_N == 1'b0) begin
        reduced_reg_2[0] <= 8'b00000000;
        reduced_reg_2[1] <= 8'b00000000;
        reduced_reg_2[2] <= 8'b00000000;
        reduced_reg_2[3] <= 8'b00000000;
        reduced_reg_2[4] <= 8'b00000000;
        reduced_reg_2[5] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          reduced_reg_2[0] <= reduced_reg_next_2[0];
          reduced_reg_2[1] <= reduced_reg_next_2[1];
          reduced_reg_2[2] <= reduced_reg_next_2[2];
          reduced_reg_2[3] <= reduced_reg_next_2[3];
          reduced_reg_2[4] <= reduced_reg_next_2[4];
          reduced_reg_2[5] <= reduced_reg_next_2[5];
        end
      end
    end

  assign outputCorrection_out2_1 = reduced_reg_2[5];
  assign reduced_reg_next_2[0] = outputCorrection_out2;
  assign reduced_reg_next_2[1] = reduced_reg_2[0];
  assign reduced_reg_next_2[2] = reduced_reg_2[1];
  assign reduced_reg_next_2[3] = reduced_reg_2[2];
  assign reduced_reg_next_2[4] = reduced_reg_2[3];
  assign reduced_reg_next_2[5] = reduced_reg_2[4];



  assign orig_x_s_0_1_out1 = (Delay4_out1 == 1'b0 ? Delay13_out1_3 :
              outputCorrection_out2_1);



  assign Switch1_out1_19 = (Delay15_out1 == 1'b0 ? Constant1_out1_9 :
              orig_x_s_0_1_out1);



  assign Switch4_out1_4 = (Relational_Operator_relop1 == 1'b0 ? Constant_out1_3 :
              Switch1_out1_19);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_10_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1_10 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_10 <= Switch4_out1_4;
        end
      end
    end



  assign Constant1_out1_14 = 23'b00000000000000000000000;



  assign C2_out1_4 = 23'b10010010000111111011011;



  assign Bit_Slice3_out1_4 = Switch_out1_9[22:0];



  assign Bit_Shift1_out1 = Bit_Slice3_out1_4 >>> 8'd1;



  assign Switch1_out1_20 = (Bit_Slice2_out1_4 == 1'b0 ? Bit_Slice3_out1_4 :
              Bit_Shift1_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay14_2_process
      if (i_RST_N == 1'b0) begin
        Delay14_out1_2 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_2 <= Switch1_out1_20;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : reduced_8_process
      if (i_RST_N == 1'b0) begin
        reduced_reg_3[0] <= 23'b00000000000000000000000;
        reduced_reg_3[1] <= 23'b00000000000000000000000;
        reduced_reg_3[2] <= 23'b00000000000000000000000;
        reduced_reg_3[3] <= 23'b00000000000000000000000;
        reduced_reg_3[4] <= 23'b00000000000000000000000;
        reduced_reg_3[5] <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_3[0] <= reduced_reg_next_3[0];
          reduced_reg_3[1] <= reduced_reg_next_3[1];
          reduced_reg_3[2] <= reduced_reg_next_3[2];
          reduced_reg_3[3] <= reduced_reg_next_3[3];
          reduced_reg_3[4] <= reduced_reg_next_3[4];
          reduced_reg_3[5] <= reduced_reg_next_3[5];
        end
      end
    end

  assign outputCorrection_out3_1 = reduced_reg_3[5];
  assign reduced_reg_next_3[0] = outputCorrection_out3;
  assign reduced_reg_next_3[1] = reduced_reg_3[0];
  assign reduced_reg_next_3[2] = reduced_reg_3[1];
  assign reduced_reg_next_3[3] = reduced_reg_3[2];
  assign reduced_reg_next_3[4] = reduced_reg_3[3];
  assign reduced_reg_next_3[5] = reduced_reg_3[4];



  assign orig_x_s_0_2_out1 = (Delay4_out1 == 1'b0 ? Delay14_out1_2 :
              outputCorrection_out3_1);



  assign Switch2_out1_12 = (Delay15_out1 == 1'b0 ? C2_out1_4 :
              orig_x_s_0_2_out1);



  assign Switch3_out1_12 = (Relational_Operator_relop1 == 1'b0 ? Constant1_out1_14 :
              Switch2_out1_12);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_8_process
      if (i_RST_N == 1'b0) begin
        Delay6_out1_8 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_8 <= Switch3_out1_12;
        end
      end
    end



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {Delay2_out1_9, Delay5_out1_10, Delay6_out1_8};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_atan2_single

