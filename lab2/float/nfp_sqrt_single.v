// -------------------------------------------------------------
// 
// File Name: D:\Short\ApaSpeed\Laba2\hdl_float\model_float\nfp_sqrt_single.v
// Created: 2022-12-25 04:21:53
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_sqrt_single
// Source Path: model_float/Subsystem/nfp_sqrt_single
// Hierarchy Level: 1
// 
// {Latency Strategy = "Max", Denormal Handling = "off"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_sqrt_single
          (i_CLK,
           i_RST_N,
           enb,
           nfp_in,
           nfp_out);


  input   i_CLK;
  input   i_RST_N;
  input   enb;
  input   [31:0] nfp_in;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire aSign;  // ufix1
  wire [7:0] aExponent;  // ufix8
  wire [22:0] aMantissa;  // ufix23
  reg [22:0] Delay5_out1;  // ufix23
  wire aMantissa_0_out1;  // ufix1
  reg [7:0] Delay4_out1;  // ufix8
  wire aSign_1_out1;  // ufix1
  wire alphaaSign_0_aExponent_1_out1;  // ufix1
  reg  Delay3_out1;  // ufix1
  wire C2_out1;  // ufix1
  wire if_aSign_0_aExponent_2_out1;  // ufix1
  reg  [0:26] Delay2_reg;  // ufix1 [27]
  wire [0:26] Delay2_reg_next;  // ufix1 [27]
  wire Delay2_out1;  // ufix1
  wire Constant8_out1;  // ufix1
  wire [7:0] Constant7_out1;  // ufix8
  wire Relational_Operator_relop1;
  reg  Delay4_out1_1;  // ufix1
  wire Logical_Operator2_out1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire [7:0] Add_out1;  // ufix8
  reg [7:0] Delay3_out1_1;  // ufix8
  wire [7:0] Add_1;  // ufix8
  wire [7:0] Constant1_out1;  // ufix8
  wire aSign_1_out1_1;  // ufix1
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire alphaaSign_1_aExponent_out1;  // ufix1
  reg  [0:25] Delay6_reg;  // ufix1 [26]
  wire [0:25] Delay6_reg_next;  // ufix1 [26]
  wire Delay6_out1;  // ufix1
  wire aExponent_0_out1;  // ufix1
  wire aMantissa_0_out1_1;  // ufix1
  wire Denormal_Support_out1;  // ufix1
  wire Logical_Operator1_out1;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  wire alphaaExponent_0_aMantissa_out1;  // ufix1
  reg  [0:25] Delay7_reg;  // ufix1 [26]
  wire [0:25] Delay7_reg_next;  // ufix1 [26]
  wire Delay7_out1;  // ufix1
  wire Exponent_0_out1;  // ufix1
  wire [7:0] C_out1;  // ufix8
  wire [7:0] if_Exponent_0_out1;  // ufix8
  reg [7:0] Delay3_out1_2;  // ufix8
  wire BitSlice_out1;  // ufix1
  wire alpha0_out1;  // ufix1
  wire Exponent_0_out1_1;  // ufix1
  wire Exponent_cfType_Exponent_In_out1;  // ufix1
  wire alphaExponent_0_Exponent_out1;  // ufix1
  wire alpha1_out1;  // ufix1
  wire [23:0] Bit_Concat1_out1;  // ufix24
  wire alpha0_out1_1;  // ufix1
  wire [23:0] Bit_Concat_out1;  // ufix24
  wire [23:0] if_Exponent_0_Exponent_out1;  // ufix24
  reg [23:0] Delay2_out1_1;  // ufix24
  wire [24:0] Bit_Concat_out1_1;  // ufix25
  wire alpha1_out1_1;  // ufix1
  wire [25:0] Bit_Concat1_out1_1;  // ufix26
  wire [25:0] Bit_Shift_out1;  // ufix26
  wire [25:0] if_bitget_exp_a_norm_1_out1;  // ufix26
  wire [1:0] Bit_Slice_out1;  // ufix2
  wire [1:0] alpha2_out1;  // ufix2
  wire [1:0] Constant_out1;  // ufix2
  wire signed [31:0] Add_sub_temp;  // sfix32
  wire signed [31:0] Add_3;  // sfix32
  wire signed [31:0] Add_4;  // sfix32
  wire [1:0] Add_out1_1;  // ufix2
  wire [3:0] Bit_Concat2_out1;  // ufix4
  wire [23:0] Bit_Slice1_out1;  // ufix24
  wire [27:0] Bit_Concat3_out1;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1;  // sfix28
  reg signed [27:0] Delay_out1;  // sfix28
  reg signed [27:0] Delay29_PS4_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1;  // sfix28
  wire [4:0] Bit_Slice1_out1_1;  // ufix5
  wire signed [4:0] Data_Type_Conversion1_out1;  // sfix5
  wire signed [4:0] alpha41943040_out1;  // sfix5
  wire signed [31:0] R_41943040_sub_temp;  // sfix32
  wire signed [31:0] R_41943040_1;  // sfix32
  wire signed [31:0] R_41943040_2;  // sfix32
  wire signed [4:0] R_41943040_out1;  // sfix5
  wire Bit_Slice_out1_1;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire [22:0] Bit_Slice2_out1;  // ufix23
  wire [27:0] Bit_Concat_out1_2;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_1;  // sfix28
  wire signed [27:0] if_tmp3_0_1_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_1;  // sfix28
  wire [5:0] Bit_Slice1_out1_2;  // ufix6
  wire signed [5:0] Data_Type_Conversion1_out1_1;  // sfix6
  wire signed [4:0] alpha16777216_out1;  // sfix5
  wire signed [4:0] C_out1_1;  // sfix5
  wire signed [4:0] if_tmp3_0_out1;  // sfix5
  wire Constant_out1_1;  // ufix1
  wire [5:0] Bit_Concat1_out1_2;  // ufix6
  wire signed [5:0] Data_Type_Conversion2_out1;  // sfix6
  wire signed [5:0] bitsll_Q_1_out1;  // sfix6
  wire signed [5:0] BitSet_out1;  // sfix6
  wire signed [31:0] R_tmp2_sub_temp;  // sfix32
  wire signed [31:0] R_tmp2_1;  // sfix32
  wire signed [31:0] R_tmp2_2;  // sfix32
  wire signed [5:0] R_tmp2_out1;  // sfix6
  wire Bit_Slice_out1_2;  // ufix1
  wire Logical_Operator_out1_3;
  wire signed [5:0] if_tmp3_0_1_out1_1;  // sfix6
  wire [21:0] Bit_Slice2_out1_1;  // ufix22
  wire [27:0] Bit_Concat_out1_3;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_2;  // sfix28
  reg signed [27:0] Delay3_PS5_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_2;  // sfix28
  wire [6:0] Bit_Slice1_out1_3;  // ufix7
  wire signed [6:0] Data_Type_Conversion1_out1_2;  // sfix7
  wire signed [5:0] BitSet1_out1;  // sfix6
  wire signed [5:0] if_tmp3_0_out1_1;  // sfix6
  reg signed [5:0] Delay2_PS5_out1;  // sfix6
  wire Constant_out1_2;  // ufix1
  wire [6:0] Bit_Concat1_out1_3;  // ufix7
  wire signed [6:0] Data_Type_Conversion2_out1_1;  // sfix7
  wire signed [6:0] bitsll_Q_1_out1_1;  // sfix7
  wire signed [6:0] BitSet_out1_1;  // sfix7
  wire signed [31:0] R_tmp2_sub_temp_1;  // sfix32
  wire signed [31:0] R_tmp2_4;  // sfix32
  wire signed [31:0] R_tmp2_5;  // sfix32
  wire signed [6:0] R_tmp2_out1_1;  // sfix7
  wire Bit_Slice_out1_3;  // ufix1
  wire Logical_Operator_out1_4;
  wire signed [6:0] if_tmp3_0_1_out1_2;  // sfix7
  wire [20:0] Bit_Slice2_out1_2;  // ufix21
  wire [27:0] Bit_Concat_out1_4;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_3;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_3;  // sfix28
  wire [7:0] Bit_Slice1_out1_4;  // uint8
  wire signed [7:0] Data_Type_Conversion1_out1_3;  // int8
  wire signed [6:0] BitSet1_out1_1;  // sfix7
  wire signed [6:0] if_tmp3_0_out1_2;  // sfix7
  wire Constant_out1_3;  // ufix1
  wire [7:0] Bit_Concat1_out1_4;  // uint8
  wire signed [7:0] Data_Type_Conversion2_out1_2;  // int8
  wire signed [7:0] bitsll_Q_1_out1_2;  // int8
  wire signed [7:0] BitSet_out1_2;  // int8
  wire signed [7:0] R_tmp2_out1_2;  // int8
  wire Bit_Slice_out1_4;  // ufix1
  wire Logical_Operator_out1_5;
  wire signed [7:0] if_tmp3_0_1_out1_3;  // int8
  wire [19:0] Bit_Slice2_out1_3;  // ufix20
  wire [27:0] Bit_Concat_out1_5;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_4;  // sfix28
  reg signed [27:0] Delay5_PS6_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_4;  // sfix28
  wire [8:0] Bit_Slice1_out1_5;  // ufix9
  wire signed [8:0] Data_Type_Conversion1_out1_4;  // sfix9
  wire signed [7:0] BitSet1_out1_2;  // int8
  wire signed [7:0] if_tmp3_0_out1_3;  // int8
  reg signed [7:0] Delay4_PS6_out1;  // int8
  wire Constant_out1_4;  // ufix1
  wire [8:0] Bit_Concat1_out1_5;  // ufix9
  wire signed [8:0] Data_Type_Conversion3_out1;  // sfix9
  wire signed [8:0] bitsll_Q_1_1_out1;  // sfix9
  wire signed [8:0] BitSet2_out1;  // sfix9
  wire signed [31:0] R_tmp2_sub_temp_2;  // sfix32
  wire signed [31:0] R_tmp2_8;  // sfix32
  wire signed [31:0] R_tmp2_9;  // sfix32
  wire signed [8:0] R_tmp2_out1_3;  // sfix9
  wire Bit_Slice_out1_5;  // ufix1
  wire Logical_Operator_out1_6;
  wire signed [8:0] if_tmp3_0_1_out1_4;  // sfix9
  wire [18:0] Bit_Slice2_out1_4;  // ufix19
  wire [27:0] Bit_Concat_out1_6;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_5;  // sfix28
  reg signed [27:0] Delay10_PS7_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_5;  // sfix28
  wire [9:0] Split_Remainder_accordingly_out1;  // ufix10
  wire signed [9:0] Data_Type_Conversion1_out1_5;  // sfix10
  wire signed [8:0] BitSet1_out1_3;  // sfix9
  wire signed [8:0] if_tmp3_0_out1_4;  // sfix9
  reg signed [8:0] Delay11_PS7_out1;  // sfix9
  wire Constant_out1_5;  // ufix1
  wire [9:0] Build_Quotient_bit_by_bit_out1;  // ufix10
  wire signed [9:0] Data_Type_Conversion3_out1_1;  // sfix10
  wire signed [9:0] bitsll_Q_1_1_out1_1;  // sfix10
  wire signed [9:0] BitSet2_out1_1;  // sfix10
  wire signed [31:0] R_tmp2_sub_temp_3;  // sfix32
  wire signed [31:0] R_tmp2_11;  // sfix32
  wire signed [31:0] R_tmp2_12;  // sfix32
  wire signed [9:0] R_tmp2_out1_4;  // sfix10
  wire Bit_Slice_out1_6;  // ufix1
  wire Logical_Operator_out1_7;
  wire signed [9:0] if_tmp3_0_1_out1_5;  // sfix10
  wire [17:0] Bit_Slice2_out1_5;  // ufix18
  wire [27:0] Bit_Concat_out1_7;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_6;  // sfix28
  reg signed [27:0] Delay5_PS8_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_6;  // sfix28
  wire [10:0] Bit_Slice1_out1_6;  // ufix11
  wire signed [10:0] Data_Type_Conversion1_out1_6;  // sfix11
  wire signed [9:0] BitSet1_out1_4;  // sfix10
  wire signed [9:0] if_tmp3_0_out1_5;  // sfix10
  reg signed [9:0] Delay4_PS8_out1;  // sfix10
  wire Constant_out1_6;  // ufix1
  wire [10:0] Bit_Concat1_out1_6;  // ufix11
  wire signed [10:0] Data_Type_Conversion3_out1_2;  // sfix11
  wire signed [10:0] bitsll_Q_1_1_out1_2;  // sfix11
  wire signed [10:0] BitSet2_out1_2;  // sfix11
  wire signed [31:0] R_tmp2_sub_temp_4;  // sfix32
  wire signed [31:0] R_tmp2_14;  // sfix32
  wire signed [31:0] R_tmp2_15;  // sfix32
  wire signed [10:0] R_tmp2_out1_5;  // sfix11
  wire Bit_Slice_out1_7;  // ufix1
  wire Logical_Operator_out1_8;
  wire signed [10:0] if_tmp3_0_1_out1_6;  // sfix11
  wire [16:0] Bit_Slice2_out1_6;  // ufix17
  wire [27:0] Bit_Concat_out1_8;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_7;  // sfix28
  reg signed [27:0] Delay_PS9_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_7;  // sfix28
  wire [11:0] Bit_Slice1_out1_7;  // ufix12
  wire signed [11:0] Data_Type_Conversion1_out1_7;  // sfix12
  wire signed [10:0] BitSet1_out1_5;  // sfix11
  wire signed [10:0] if_tmp3_0_out1_6;  // sfix11
  reg signed [10:0] Delay1_PS9_out1;  // sfix11
  wire Constant_out1_7;  // ufix1
  wire [11:0] Bit_Concat1_out1_7;  // ufix12
  wire signed [11:0] Data_Type_Conversion3_out1_3;  // sfix12
  wire signed [11:0] bitsll_Q_1_1_out1_3;  // sfix12
  wire signed [11:0] BitSet2_out1_3;  // sfix12
  wire signed [31:0] R_tmp2_sub_temp_5;  // sfix32
  wire signed [31:0] R_tmp2_17;  // sfix32
  wire signed [31:0] R_tmp2_18;  // sfix32
  wire signed [11:0] R_tmp2_out1_6;  // sfix12
  wire Bit_Slice_out1_8;  // ufix1
  wire Logical_Operator_out1_9;
  wire signed [11:0] if_tmp3_0_1_out1_7;  // sfix12
  wire [15:0] Bit_Slice2_out1_7;  // uint16
  wire [27:0] Bit_Concat_out1_9;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_8;  // sfix28
  reg signed [27:0] Delay3_PS10_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_8;  // sfix28
  wire [12:0] Bit_Slice1_out1_8;  // ufix13
  wire signed [12:0] Data_Type_Conversion1_out1_8;  // sfix13
  wire signed [11:0] BitSet1_out1_6;  // sfix12
  wire signed [11:0] if_tmp3_0_out1_7;  // sfix12
  reg signed [11:0] Delay2_PS10_out1;  // sfix12
  wire Constant_out1_8;  // ufix1
  wire [12:0] Bit_Concat1_out1_8;  // ufix13
  wire signed [12:0] Data_Type_Conversion3_out1_4;  // sfix13
  wire signed [12:0] bitsll_Q_1_1_out1_4;  // sfix13
  wire signed [12:0] BitSet2_out1_4;  // sfix13
  wire signed [31:0] R_tmp2_sub_temp_6;  // sfix32
  wire signed [31:0] R_tmp2_20;  // sfix32
  wire signed [31:0] R_tmp2_21;  // sfix32
  wire signed [12:0] R_tmp2_out1_7;  // sfix13
  wire Bit_Slice_out1_9;  // ufix1
  wire Logical_Operator_out1_10;
  wire signed [12:0] if_tmp3_0_1_out1_8;  // sfix13
  wire [14:0] Bit_Slice2_out1_8;  // ufix15
  wire [27:0] Bit_Concat_out1_10;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_9;  // sfix28
  reg signed [27:0] Delay_PS11_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_9;  // sfix28
  wire [13:0] Bit_Slice1_out1_9;  // ufix14
  wire signed [13:0] Data_Type_Conversion1_out1_9;  // sfix14
  wire signed [12:0] BitSet1_out1_7;  // sfix13
  wire signed [12:0] if_tmp3_0_out1_8;  // sfix13
  reg signed [12:0] Delay1_PS11_out1;  // sfix13
  wire Constant_out1_9;  // ufix1
  wire [13:0] Bit_Concat1_out1_9;  // ufix14
  wire signed [13:0] Data_Type_Conversion3_out1_5;  // sfix14
  wire signed [13:0] bitsll_Q_1_1_out1_5;  // sfix14
  wire signed [13:0] BitSet2_out1_5;  // sfix14
  wire signed [31:0] R_tmp2_sub_temp_7;  // sfix32
  wire signed [31:0] R_tmp2_23;  // sfix32
  wire signed [31:0] R_tmp2_24;  // sfix32
  wire signed [13:0] R_tmp2_out1_8;  // sfix14
  wire Bit_Slice_out1_10;  // ufix1
  wire Logical_Operator_out1_11;
  wire signed [13:0] if_tmp3_0_1_out1_9;  // sfix14
  wire [13:0] Bit_Slice2_out1_9;  // ufix14
  wire [27:0] Bit_Concat_out1_11;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_10;  // sfix28
  reg signed [27:0] Delay2_PS12_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_10;  // sfix28
  wire [14:0] Bit_Slice1_out1_10;  // ufix15
  wire signed [14:0] Data_Type_Conversion1_out1_10;  // sfix15
  wire signed [13:0] BitSet1_out1_8;  // sfix14
  wire signed [13:0] if_tmp3_0_out1_9;  // sfix14
  reg signed [13:0] Delay3_PS12_out1;  // sfix14
  wire Constant_out1_10;  // ufix1
  wire [14:0] Bit_Concat1_out1_10;  // ufix15
  wire signed [14:0] Data_Type_Conversion3_out1_6;  // sfix15
  wire signed [14:0] bitsll_Q_1_1_out1_6;  // sfix15
  wire signed [14:0] BitSet2_out1_6;  // sfix15
  wire signed [31:0] R_tmp2_sub_temp_8;  // sfix32
  wire signed [31:0] R_tmp2_26;  // sfix32
  wire signed [31:0] R_tmp2_27;  // sfix32
  wire signed [14:0] R_tmp2_out1_9;  // sfix15
  wire Bit_Slice_out1_11;  // ufix1
  wire Logical_Operator_out1_12;
  wire signed [14:0] if_tmp3_0_1_out1_10;  // sfix15
  wire [12:0] Bit_Slice2_out1_10;  // ufix13
  wire [27:0] Bit_Concat_out1_12;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_11;  // sfix28
  reg signed [27:0] Delay_PS13_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_11;  // sfix28
  wire [15:0] Bit_Slice1_out1_11;  // uint16
  wire signed [15:0] Data_Type_Conversion1_out1_11;  // int16
  wire signed [14:0] BitSet1_out1_9;  // sfix15
  wire signed [14:0] if_tmp3_0_out1_10;  // sfix15
  reg signed [14:0] Delay1_PS13_out1;  // sfix15
  wire Constant_out1_11;  // ufix1
  wire [15:0] Bit_Concat1_out1_11;  // uint16
  wire signed [15:0] Data_Type_Conversion3_out1_7;  // int16
  wire signed [15:0] bitsll_Q_1_1_out1_7;  // int16
  wire signed [15:0] BitSet2_out1_7;  // int16
  wire signed [15:0] R_tmp2_out1_10;  // int16
  wire Bit_Slice_out1_12;  // ufix1
  wire Logical_Operator_out1_13;
  wire signed [15:0] if_tmp3_0_1_out1_11;  // int16
  wire [11:0] Bit_Slice2_out1_11;  // ufix12
  wire [27:0] Bit_Concat_out1_13;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_12;  // sfix28
  reg signed [27:0] Delay4_PS14_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_12;  // sfix28
  wire [16:0] Bit_Slice1_out1_12;  // ufix17
  wire signed [16:0] Data_Type_Conversion1_out1_12;  // sfix17
  wire signed [15:0] BitSet1_out1_10;  // int16
  wire signed [15:0] if_tmp3_0_out1_11;  // int16
  reg signed [15:0] Delay5_PS14_out1;  // int16
  wire Constant_out1_12;  // ufix1
  wire [16:0] Bit_Concat1_out1_12;  // ufix17
  wire signed [16:0] Data_Type_Conversion3_out1_8;  // sfix17
  wire signed [16:0] bitsll_Q_1_1_out1_8;  // sfix17
  wire signed [16:0] BitSet2_out1_8;  // sfix17
  wire signed [31:0] R_tmp2_sub_temp_9;  // sfix32
  wire signed [31:0] R_tmp2_30;  // sfix32
  wire signed [31:0] R_tmp2_31;  // sfix32
  wire signed [16:0] R_tmp2_out1_11;  // sfix17
  wire Bit_Slice_out1_13;  // ufix1
  wire Logical_Operator_out1_14;
  wire signed [16:0] if_tmp3_0_1_out1_12;  // sfix17
  wire [10:0] Bit_Slice2_out1_12;  // ufix11
  wire [27:0] Bit_Concat_out1_14;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_13;  // sfix28
  reg signed [27:0] Delay2_PS15_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_13;  // sfix28
  wire [17:0] Bit_Slice1_out1_13;  // ufix18
  wire signed [17:0] Data_Type_Conversion1_out1_13;  // sfix18
  wire signed [16:0] BitSet1_out1_11;  // sfix17
  wire signed [16:0] if_tmp3_0_out1_12;  // sfix17
  reg signed [16:0] Delay3_PS15_out1;  // sfix17
  wire Constant_out1_13;  // ufix1
  wire [17:0] Bit_Concat1_out1_13;  // ufix18
  wire signed [17:0] Data_Type_Conversion3_out1_9;  // sfix18
  wire signed [17:0] bitsll_Q_1_1_out1_9;  // sfix18
  wire signed [17:0] BitSet2_out1_9;  // sfix18
  wire signed [31:0] R_tmp2_sub_temp_10;  // sfix32
  wire signed [31:0] R_tmp2_33;  // sfix32
  wire signed [31:0] R_tmp2_34;  // sfix32
  wire signed [17:0] R_tmp2_out1_12;  // sfix18
  wire Bit_Slice_out1_14;  // ufix1
  wire Logical_Operator_out1_15;
  wire signed [17:0] if_tmp3_0_1_out1_13;  // sfix18
  wire [9:0] Bit_Slice2_out1_13;  // ufix10
  wire [27:0] Bit_Concat_out1_15;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_14;  // sfix28
  reg signed [27:0] Delay2_PS16_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_14;  // sfix28
  wire [18:0] Bit_Slice1_out1_14;  // ufix19
  wire signed [18:0] Data_Type_Conversion1_out1_14;  // sfix19
  wire signed [17:0] BitSet1_out1_12;  // sfix18
  wire signed [17:0] if_tmp3_0_out1_13;  // sfix18
  reg signed [17:0] Delay3_PS16_out1;  // sfix18
  wire Constant_out1_14;  // ufix1
  wire [18:0] Bit_Concat1_out1_14;  // ufix19
  wire signed [18:0] Data_Type_Conversion3_out1_10;  // sfix19
  wire signed [18:0] bitsll_Q_1_1_out1_10;  // sfix19
  wire signed [18:0] BitSet2_out1_10;  // sfix19
  wire signed [31:0] R_tmp2_sub_temp_11;  // sfix32
  wire signed [31:0] R_tmp2_36;  // sfix32
  wire signed [31:0] R_tmp2_37;  // sfix32
  wire signed [18:0] R_tmp2_out1_13;  // sfix19
  wire Bit_Slice_out1_15;  // ufix1
  wire Logical_Operator_out1_16;
  wire signed [18:0] if_tmp3_0_1_out1_14;  // sfix19
  wire [8:0] Bit_Slice2_out1_14;  // ufix9
  wire [27:0] Bit_Concat_out1_16;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_15;  // sfix28
  reg signed [27:0] Delay_PS17_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_15;  // sfix28
  wire [19:0] Bit_Slice1_out1_15;  // ufix20
  wire signed [19:0] Data_Type_Conversion1_out1_15;  // sfix20
  wire signed [18:0] BitSet1_out1_13;  // sfix19
  wire signed [18:0] if_tmp3_0_out1_14;  // sfix19
  reg signed [18:0] Delay1_PS17_out1;  // sfix19
  wire Constant_out1_15;  // ufix1
  wire [19:0] Bit_Concat1_out1_15;  // ufix20
  wire signed [19:0] Data_Type_Conversion3_out1_11;  // sfix20
  wire signed [19:0] bitsll_Q_1_1_out1_11;  // sfix20
  wire signed [19:0] BitSet2_out1_11;  // sfix20
  wire signed [31:0] R_tmp2_sub_temp_12;  // sfix32
  wire signed [31:0] R_tmp2_39;  // sfix32
  wire signed [31:0] R_tmp2_40;  // sfix32
  wire signed [19:0] R_tmp2_out1_14;  // sfix20
  wire Bit_Slice_out1_16;  // ufix1
  wire Logical_Operator_out1_17;
  wire signed [19:0] if_tmp3_0_1_out1_15;  // sfix20
  wire [7:0] Bit_Slice2_out1_15;  // uint8
  wire [27:0] Bit_Concat_out1_17;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_16;  // sfix28
  reg signed [27:0] Delay4_PS18_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_16;  // sfix28
  wire [20:0] Bit_Slice1_out1_16;  // ufix21
  wire signed [20:0] Data_Type_Conversion1_out1_16;  // sfix21
  wire signed [19:0] BitSet1_out1_14;  // sfix20
  wire signed [19:0] if_tmp3_0_out1_15;  // sfix20
  reg signed [19:0] Delay5_PS18_out1;  // sfix20
  wire Constant_out1_16;  // ufix1
  wire [20:0] Bit_Concat1_out1_16;  // ufix21
  wire signed [20:0] Data_Type_Conversion3_out1_12;  // sfix21
  wire signed [20:0] bitsll_Q_1_1_out1_12;  // sfix21
  wire signed [20:0] BitSet2_out1_12;  // sfix21
  wire signed [31:0] R_tmp2_sub_temp_13;  // sfix32
  wire signed [31:0] R_tmp2_42;  // sfix32
  wire signed [31:0] R_tmp2_43;  // sfix32
  wire signed [20:0] R_tmp2_out1_15;  // sfix21
  wire Bit_Slice_out1_17;  // ufix1
  wire Logical_Operator_out1_18;
  wire signed [20:0] if_tmp3_0_1_out1_16;  // sfix21
  wire [6:0] Bit_Slice2_out1_16;  // ufix7
  wire [27:0] Bit_Concat_out1_18;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_17;  // sfix28
  reg signed [27:0] Delay4_PS19_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_17;  // sfix28
  wire [21:0] Bit_Slice1_out1_17;  // ufix22
  wire signed [21:0] Data_Type_Conversion1_out1_17;  // sfix22
  wire signed [20:0] BitSet1_out1_15;  // sfix21
  wire signed [20:0] if_tmp3_0_out1_16;  // sfix21
  reg signed [20:0] Delay5_PS19_out1;  // sfix21
  wire Constant_out1_17;  // ufix1
  wire [21:0] Bit_Concat1_out1_17;  // ufix22
  wire signed [21:0] Data_Type_Conversion3_out1_13;  // sfix22
  wire signed [21:0] bitsll_Q_1_1_out1_13;  // sfix22
  wire signed [21:0] BitSet2_out1_13;  // sfix22
  wire signed [31:0] R_tmp2_sub_temp_14;  // sfix32
  wire signed [31:0] R_tmp2_45;  // sfix32
  wire signed [31:0] R_tmp2_46;  // sfix32
  wire signed [21:0] R_tmp2_out1_16;  // sfix22
  wire Bit_Slice_out1_18;  // ufix1
  wire Logical_Operator_out1_19;
  wire signed [21:0] if_tmp3_0_1_out1_17;  // sfix22
  wire [5:0] Bit_Slice2_out1_17;  // ufix6
  wire [27:0] Bit_Concat_out1_19;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_18;  // sfix28
  reg signed [27:0] Delay2_PS20_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_18;  // sfix28
  wire [22:0] Bit_Slice1_out1_18;  // ufix23
  wire signed [22:0] Data_Type_Conversion1_out1_18;  // sfix23
  wire signed [21:0] BitSet1_out1_16;  // sfix22
  wire signed [21:0] if_tmp3_0_out1_17;  // sfix22
  reg signed [21:0] Delay3_PS20_out1;  // sfix22
  wire Constant_out1_18;  // ufix1
  wire [22:0] Bit_Concat1_out1_18;  // ufix23
  wire signed [22:0] Data_Type_Conversion3_out1_14;  // sfix23
  wire signed [22:0] bitsll_Q_1_1_out1_14;  // sfix23
  wire signed [22:0] BitSet2_out1_14;  // sfix23
  wire signed [31:0] R_tmp2_sub_temp_15;  // sfix32
  wire signed [31:0] R_tmp2_48;  // sfix32
  wire signed [31:0] R_tmp2_49;  // sfix32
  wire signed [22:0] R_tmp2_out1_17;  // sfix23
  wire Bit_Slice_out1_19;  // ufix1
  wire Logical_Operator_out1_20;
  wire signed [22:0] if_tmp3_0_1_out1_18;  // sfix23
  wire [4:0] Bit_Slice2_out1_18;  // ufix5
  wire [27:0] Bit_Concat_out1_20;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_19;  // sfix28
  reg signed [27:0] Delay_PS21_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_19;  // sfix28
  wire [23:0] Bit_Slice1_out1_19;  // ufix24
  wire signed [23:0] Data_Type_Conversion1_out1_19;  // sfix24
  wire signed [22:0] BitSet1_out1_17;  // sfix23
  wire signed [22:0] if_tmp3_0_out1_18;  // sfix23
  reg signed [22:0] Delay1_PS21_out1;  // sfix23
  wire Constant_out1_19;  // ufix1
  wire [23:0] Bit_Concat1_out1_19;  // ufix24
  wire signed [23:0] Data_Type_Conversion3_out1_15;  // sfix24
  wire signed [23:0] bitsll_Q_1_1_out1_15;  // sfix24
  wire signed [23:0] BitSet2_out1_15;  // sfix24
  wire signed [31:0] R_tmp2_sub_temp_16;  // sfix32
  wire signed [31:0] R_tmp2_51;  // sfix32
  wire signed [31:0] R_tmp2_52;  // sfix32
  wire signed [23:0] R_tmp2_out1_18;  // sfix24
  wire Bit_Slice_out1_20;  // ufix1
  wire Logical_Operator_out1_21;
  wire signed [23:0] if_tmp3_0_1_out1_19;  // sfix24
  wire [3:0] Bit_Slice2_out1_19;  // ufix4
  wire [27:0] Bit_Concat_out1_21;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_20;  // sfix28
  reg signed [27:0] Delay4_PS22_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_20;  // sfix28
  wire [24:0] Bit_Slice1_out1_20;  // ufix25
  wire signed [24:0] Data_Type_Conversion1_out1_20;  // sfix25
  wire signed [23:0] BitSet1_out1_18;  // sfix24
  wire signed [23:0] if_tmp3_0_out1_19;  // sfix24
  reg signed [23:0] Delay5_PS22_out1;  // sfix24
  wire Constant_out1_20;  // ufix1
  wire [24:0] Bit_Concat1_out1_20;  // ufix25
  wire signed [24:0] Data_Type_Conversion3_out1_16;  // sfix25
  wire signed [24:0] bitsll_Q_1_1_out1_16;  // sfix25
  wire signed [24:0] BitSet2_out1_16;  // sfix25
  wire signed [31:0] R_tmp2_sub_temp_17;  // sfix32
  wire signed [31:0] R_tmp2_54;  // sfix32
  wire signed [31:0] R_tmp2_55;  // sfix32
  wire signed [24:0] R_tmp2_out1_19;  // sfix25
  wire Bit_Slice_out1_21;  // ufix1
  wire Logical_Operator_out1_22;
  wire signed [24:0] if_tmp3_0_1_out1_20;  // sfix25
  wire [2:0] Bit_Slice2_out1_20;  // ufix3
  wire [27:0] Bit_Concat_out1_22;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_21;  // sfix28
  reg signed [27:0] Delay6_PS23_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_21;  // sfix28
  wire [25:0] Bit_Slice1_out1_21;  // ufix26
  wire signed [25:0] Data_Type_Conversion1_out1_21;  // sfix26
  wire signed [24:0] BitSet1_out1_19;  // sfix25
  wire signed [24:0] if_tmp3_0_out1_20;  // sfix25
  reg signed [24:0] Delay7_PS23_out1;  // sfix25
  wire Constant_out1_21;  // ufix1
  wire [25:0] Bit_Concat1_out1_21;  // ufix26
  wire signed [25:0] Data_Type_Conversion3_out1_17;  // sfix26
  wire signed [25:0] bitsll_Q_1_1_out1_17;  // sfix26
  wire signed [25:0] BitSet2_out1_17;  // sfix26
  wire signed [31:0] R_tmp2_sub_temp_18;  // sfix32
  wire signed [31:0] R_tmp2_57;  // sfix32
  wire signed [31:0] R_tmp2_58;  // sfix32
  wire signed [25:0] R_tmp2_out1_20;  // sfix26
  wire Bit_Slice_out1_22;  // ufix1
  wire Logical_Operator_out1_23;
  wire signed [25:0] if_tmp3_0_1_out1_21;  // sfix26
  wire [1:0] Bit_Slice2_out1_21;  // ufix2
  wire [27:0] Bit_Concat_out1_23;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_22;  // sfix28
  reg signed [27:0] Delay2_PS24_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_22;  // sfix28
  wire [26:0] Bit_Slice1_out1_22;  // ufix27
  wire signed [26:0] Data_Type_Conversion1_out1_22;  // sfix27
  wire signed [25:0] BitSet1_out1_20;  // sfix26
  wire signed [25:0] if_tmp3_0_out1_21;  // sfix26
  reg signed [25:0] Delay3_PS24_out1;  // sfix26
  wire Constant_out1_22;  // ufix1
  wire [26:0] Bit_Concat1_out1_22;  // ufix27
  wire signed [26:0] Data_Type_Conversion3_out1_18;  // sfix27
  wire signed [26:0] bitsll_Q_1_1_out1_18;  // sfix27
  wire signed [26:0] BitSet2_out1_18;  // sfix27
  wire signed [31:0] R_tmp2_sub_temp_19;  // sfix32
  wire signed [31:0] R_tmp2_60;  // sfix32
  wire signed [31:0] R_tmp2_61;  // sfix32
  wire signed [26:0] R_tmp2_out1_21;  // sfix27
  wire Bit_Slice_out1_23;  // ufix1
  wire signed [26:0] if_tmp3_0_1_out1_22;  // sfix27
  wire Bit_Slice2_out1_22;  // ufix1
  wire [27:0] Bit_Concat_out1_24;  // ufix28
  wire signed [27:0] Data_Type_Conversion_out1_23;  // sfix28
  reg signed [27:0] Delay_PS25_out1;  // sfix28
  wire signed [27:0] bitsll_R_1_out1_23;  // sfix28
  wire signed [26:0] BitSet1_out1_21;  // sfix27
  wire signed [26:0] if_tmp3_0_out1_22;  // sfix27
  reg signed [26:0] Delay1_PS25_out1;  // sfix27
  wire Constant_out1_23;  // ufix1
  wire [27:0] Bit_Concat1_out1_23;  // ufix28
  wire signed [27:0] Data_Type_Conversion3_out1_19;  // sfix28
  wire signed [27:0] bitsll_Q_1_out1_3;  // sfix28
  wire signed [27:0] BitSet_out1_3;  // sfix28
  wire signed [31:0] R_tmp2_sub_temp_20;  // sfix32
  wire signed [31:0] R_tmp2_63;  // sfix32
  wire signed [31:0] R_tmp2_64;  // sfix32
  wire signed [27:0] R_tmp2_out1_22;  // sfix28
  wire Bit_Slice_out1_24;  // ufix1
  wire Logical_Operator_out1_24;
  wire signed [27:0] BitSet1_out1_22;  // sfix28
  wire signed [27:0] if_tmp3_0_out1_23;  // sfix28
  wire [23:0] BitSlice_out1_1;  // ufix24
  reg [23:0] Delay9_PS26_out1;  // ufix24
  wire BitSlice1_out1;  // ufix1
  wire bitget_Mant_tmp_2_0_out1;  // ufix1
  wire signed [27:0] if_tmp3_0_1_out1_23;  // sfix28
  wire R_0_out1;
  wire BitSlice_out1_2;  // ufix1
  wire bitget_Mant_tmp_1_0_out1;  // ufix1
  reg  Delay8_PS26_out1;
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  wire alpha0_out1_2;  // ufix1
  wire [24:0] Bit_Concat_out1_25;  // ufix25
  wire [24:0] alpha2_out1_1;  // ufix25
  wire [31:0] Mant_tmp_cast_2_like_Man_add_temp;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_1;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_2;  // ufix32
  wire [24:0] Mant_tmp_cast_2_like_Man_out1;  // ufix25
  wire [24:0] if_bitget_Mant_tmp_1_0_out1;  // ufix25
  reg [24:0] Delay_out1_1;  // ufix25
  wire BitSlice2_out1;  // ufix1
  wire bitget_Mant_tmp_Mant_tmp_Word_out1;  // ufix1
  wire [7:0] C_out1_2;  // ufix8
  wire [31:0] exp_a_cor_cfType_ExponentBia_add_temp;  // ufix32
  wire [31:0] exp_a_cor_cfType_ExponentBia_1;  // ufix32
  wire [31:0] exp_a_cor_cfType_ExponentBia_2;  // ufix32
  wire [8:0] exp_a_cor_cfType_ExponentBia_out1;  // ufix9
  wire [7:0] BitSlice1_out1_1;  // ufix8
  reg [7:0] Delay1_out1;  // ufix8
  reg [7:0] Delay22_PS26_reg [0:22];  // ufix8 [23]
  wire [7:0] Delay22_PS26_reg_next [0:22];  // ufix8 [23]
  wire [7:0] Delay22_PS26_out1;  // uint8
  reg [7:0] Delay2_out1_2;  // ufix8
  wire [7:0] alpha1_out1_2;  // ufix8
  wire [7:0] Exp_1_out1;  // ufix8
  reg [7:0] Delay1_out1_1;  // ufix8
  wire [7:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix8
  wire [7:0] C_out1_3;  // ufix8
  wire [7:0] if_aExponent_0_aMantissa_out1;  // ufix8
  wire aSign_0_out1;  // ufix1
  wire aExponent_cfType_Exponent_I_out1_1;  // ufix1
  wire alphaaSign_0_aExponent_out1;  // ufix1
  wire alphaaSign_0_aExponent_out1_1;  // ufix1
  wire Logical_Operator_out1_25;  // ufix1
  wire [7:0] C_out1_4;  // ufix8
  wire [7:0] if_aSign_0_aExponent_out1;  // ufix8
  reg [7:0] Delay9_reg [0:25];  // ufix8 [26]
  wire [7:0] Delay9_reg_next [0:25];  // ufix8 [26]
  wire [7:0] Delay9_out1;  // ufix8
  wire [7:0] if_aSign_1_aExponent_out1;  // ufix8
  wire [7:0] Switch6_out1;  // ufix8
  reg [7:0] Delay1_out1_2;  // ufix8
  wire [22:0] Constant_out1_24;  // ufix23
  wire [22:0] BitSlice3_out1;  // ufix23
  wire [22:0] C_out1_5;  // ufix23
  wire [22:0] if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;  // ufix23
  wire [22:0] C1_out1;  // ufix23
  wire [22:0] if_aExponent_0_aMantissa_1_out1;  // ufix23
  wire [22:0] C1_out1_1;  // ufix23
  wire [22:0] if_aSign_0_aExponent_1_out1;  // ufix23
  reg [22:0] Delay8_reg [0:25];  // ufix23 [26]
  wire [22:0] Delay8_reg_next [0:25];  // ufix23 [26]
  wire [22:0] Delay8_out1;  // ufix23
  wire [22:0] if_aSign_1_aExponent_1_out1;  // ufix23
  wire [22:0] Switch5_out1;  // ufix23
  reg [22:0] Delay_out1_2;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32


  // Split 32 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in[31];
  assign aExponent = nfp_in[30:23];
  assign aMantissa = nfp_in[22:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_process
      if (i_RST_N == 1'b0) begin
        Delay5_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= aMantissa;
        end
      end
    end



  assign aMantissa_0_out1 = Delay5_out1 == 23'b00000000000000000000000;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= aExponent;
        end
      end
    end



  assign aSign_1_out1 = Delay4_out1 == 8'b00000000;



  assign alphaaSign_0_aExponent_1_out1 = aMantissa_0_out1 & aSign_1_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= aSign;
        end
      end
    end



  assign C2_out1 = 1'b0;



  assign if_aSign_0_aExponent_2_out1 = (alphaaSign_0_aExponent_1_out1 == 1'b0 ? Delay3_out1 :
              C2_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_process
      if (i_RST_N == 1'b0) begin
        Delay2_reg[0] <= 1'b0;
        Delay2_reg[1] <= 1'b0;
        Delay2_reg[2] <= 1'b0;
        Delay2_reg[3] <= 1'b0;
        Delay2_reg[4] <= 1'b0;
        Delay2_reg[5] <= 1'b0;
        Delay2_reg[6] <= 1'b0;
        Delay2_reg[7] <= 1'b0;
        Delay2_reg[8] <= 1'b0;
        Delay2_reg[9] <= 1'b0;
        Delay2_reg[10] <= 1'b0;
        Delay2_reg[11] <= 1'b0;
        Delay2_reg[12] <= 1'b0;
        Delay2_reg[13] <= 1'b0;
        Delay2_reg[14] <= 1'b0;
        Delay2_reg[15] <= 1'b0;
        Delay2_reg[16] <= 1'b0;
        Delay2_reg[17] <= 1'b0;
        Delay2_reg[18] <= 1'b0;
        Delay2_reg[19] <= 1'b0;
        Delay2_reg[20] <= 1'b0;
        Delay2_reg[21] <= 1'b0;
        Delay2_reg[22] <= 1'b0;
        Delay2_reg[23] <= 1'b0;
        Delay2_reg[24] <= 1'b0;
        Delay2_reg[25] <= 1'b0;
        Delay2_reg[26] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
          Delay2_reg[2] <= Delay2_reg_next[2];
          Delay2_reg[3] <= Delay2_reg_next[3];
          Delay2_reg[4] <= Delay2_reg_next[4];
          Delay2_reg[5] <= Delay2_reg_next[5];
          Delay2_reg[6] <= Delay2_reg_next[6];
          Delay2_reg[7] <= Delay2_reg_next[7];
          Delay2_reg[8] <= Delay2_reg_next[8];
          Delay2_reg[9] <= Delay2_reg_next[9];
          Delay2_reg[10] <= Delay2_reg_next[10];
          Delay2_reg[11] <= Delay2_reg_next[11];
          Delay2_reg[12] <= Delay2_reg_next[12];
          Delay2_reg[13] <= Delay2_reg_next[13];
          Delay2_reg[14] <= Delay2_reg_next[14];
          Delay2_reg[15] <= Delay2_reg_next[15];
          Delay2_reg[16] <= Delay2_reg_next[16];
          Delay2_reg[17] <= Delay2_reg_next[17];
          Delay2_reg[18] <= Delay2_reg_next[18];
          Delay2_reg[19] <= Delay2_reg_next[19];
          Delay2_reg[20] <= Delay2_reg_next[20];
          Delay2_reg[21] <= Delay2_reg_next[21];
          Delay2_reg[22] <= Delay2_reg_next[22];
          Delay2_reg[23] <= Delay2_reg_next[23];
          Delay2_reg[24] <= Delay2_reg_next[24];
          Delay2_reg[25] <= Delay2_reg_next[25];
          Delay2_reg[26] <= Delay2_reg_next[26];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[26];
  assign Delay2_reg_next[0] = if_aSign_0_aExponent_2_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];
  assign Delay2_reg_next[2] = Delay2_reg[1];
  assign Delay2_reg_next[3] = Delay2_reg[2];
  assign Delay2_reg_next[4] = Delay2_reg[3];
  assign Delay2_reg_next[5] = Delay2_reg[4];
  assign Delay2_reg_next[6] = Delay2_reg[5];
  assign Delay2_reg_next[7] = Delay2_reg[6];
  assign Delay2_reg_next[8] = Delay2_reg[7];
  assign Delay2_reg_next[9] = Delay2_reg[8];
  assign Delay2_reg_next[10] = Delay2_reg[9];
  assign Delay2_reg_next[11] = Delay2_reg[10];
  assign Delay2_reg_next[12] = Delay2_reg[11];
  assign Delay2_reg_next[13] = Delay2_reg[12];
  assign Delay2_reg_next[14] = Delay2_reg[13];
  assign Delay2_reg_next[15] = Delay2_reg[14];
  assign Delay2_reg_next[16] = Delay2_reg[15];
  assign Delay2_reg_next[17] = Delay2_reg[16];
  assign Delay2_reg_next[18] = Delay2_reg[17];
  assign Delay2_reg_next[19] = Delay2_reg[18];
  assign Delay2_reg_next[20] = Delay2_reg[19];
  assign Delay2_reg_next[21] = Delay2_reg[20];
  assign Delay2_reg_next[22] = Delay2_reg[21];
  assign Delay2_reg_next[23] = Delay2_reg[22];
  assign Delay2_reg_next[24] = Delay2_reg[23];
  assign Delay2_reg_next[25] = Delay2_reg[24];
  assign Delay2_reg_next[26] = Delay2_reg[25];



  assign Constant8_out1 = 1'b1;



  assign Constant7_out1 = 8'b00011011;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_1_process
      if (i_RST_N == 1'b0) begin
        Delay4_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_1 <= Relational_Operator_relop1;
        end
      end
    end



  assign Logical_Operator2_out1 =  ~ Delay4_out1_1;



  assign Logical_Operator_out1 = Constant8_out1 & Logical_Operator2_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_1_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_1 <= Add_out1;
        end
      end
    end



  assign Add_1 = {7'b0, Logical_Operator_out1};
  assign Add_out1 = Delay3_out1_1 + Add_1;



  assign Relational_Operator_relop1 = Add_out1 > Constant7_out1;



  assign Constant1_out1 = 8'b00000000;



  assign aSign_1_out1_1 = Delay3_out1 == 1'b1;



  assign aExponent_cfType_Exponent_I_out1 = Delay4_out1 == 8'b11111111;



  assign alphaaSign_1_aExponent_out1 = aSign_1_out1_1 | aExponent_cfType_Exponent_I_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_process
      if (i_RST_N == 1'b0) begin
        Delay6_reg[0] <= 1'b0;
        Delay6_reg[1] <= 1'b0;
        Delay6_reg[2] <= 1'b0;
        Delay6_reg[3] <= 1'b0;
        Delay6_reg[4] <= 1'b0;
        Delay6_reg[5] <= 1'b0;
        Delay6_reg[6] <= 1'b0;
        Delay6_reg[7] <= 1'b0;
        Delay6_reg[8] <= 1'b0;
        Delay6_reg[9] <= 1'b0;
        Delay6_reg[10] <= 1'b0;
        Delay6_reg[11] <= 1'b0;
        Delay6_reg[12] <= 1'b0;
        Delay6_reg[13] <= 1'b0;
        Delay6_reg[14] <= 1'b0;
        Delay6_reg[15] <= 1'b0;
        Delay6_reg[16] <= 1'b0;
        Delay6_reg[17] <= 1'b0;
        Delay6_reg[18] <= 1'b0;
        Delay6_reg[19] <= 1'b0;
        Delay6_reg[20] <= 1'b0;
        Delay6_reg[21] <= 1'b0;
        Delay6_reg[22] <= 1'b0;
        Delay6_reg[23] <= 1'b0;
        Delay6_reg[24] <= 1'b0;
        Delay6_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Delay6_reg_next[0];
          Delay6_reg[1] <= Delay6_reg_next[1];
          Delay6_reg[2] <= Delay6_reg_next[2];
          Delay6_reg[3] <= Delay6_reg_next[3];
          Delay6_reg[4] <= Delay6_reg_next[4];
          Delay6_reg[5] <= Delay6_reg_next[5];
          Delay6_reg[6] <= Delay6_reg_next[6];
          Delay6_reg[7] <= Delay6_reg_next[7];
          Delay6_reg[8] <= Delay6_reg_next[8];
          Delay6_reg[9] <= Delay6_reg_next[9];
          Delay6_reg[10] <= Delay6_reg_next[10];
          Delay6_reg[11] <= Delay6_reg_next[11];
          Delay6_reg[12] <= Delay6_reg_next[12];
          Delay6_reg[13] <= Delay6_reg_next[13];
          Delay6_reg[14] <= Delay6_reg_next[14];
          Delay6_reg[15] <= Delay6_reg_next[15];
          Delay6_reg[16] <= Delay6_reg_next[16];
          Delay6_reg[17] <= Delay6_reg_next[17];
          Delay6_reg[18] <= Delay6_reg_next[18];
          Delay6_reg[19] <= Delay6_reg_next[19];
          Delay6_reg[20] <= Delay6_reg_next[20];
          Delay6_reg[21] <= Delay6_reg_next[21];
          Delay6_reg[22] <= Delay6_reg_next[22];
          Delay6_reg[23] <= Delay6_reg_next[23];
          Delay6_reg[24] <= Delay6_reg_next[24];
          Delay6_reg[25] <= Delay6_reg_next[25];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[25];
  assign Delay6_reg_next[0] = alphaaSign_1_aExponent_out1;
  assign Delay6_reg_next[1] = Delay6_reg[0];
  assign Delay6_reg_next[2] = Delay6_reg[1];
  assign Delay6_reg_next[3] = Delay6_reg[2];
  assign Delay6_reg_next[4] = Delay6_reg[3];
  assign Delay6_reg_next[5] = Delay6_reg[4];
  assign Delay6_reg_next[6] = Delay6_reg[5];
  assign Delay6_reg_next[7] = Delay6_reg[6];
  assign Delay6_reg_next[8] = Delay6_reg[7];
  assign Delay6_reg_next[9] = Delay6_reg[8];
  assign Delay6_reg_next[10] = Delay6_reg[9];
  assign Delay6_reg_next[11] = Delay6_reg[10];
  assign Delay6_reg_next[12] = Delay6_reg[11];
  assign Delay6_reg_next[13] = Delay6_reg[12];
  assign Delay6_reg_next[14] = Delay6_reg[13];
  assign Delay6_reg_next[15] = Delay6_reg[14];
  assign Delay6_reg_next[16] = Delay6_reg[15];
  assign Delay6_reg_next[17] = Delay6_reg[16];
  assign Delay6_reg_next[18] = Delay6_reg[17];
  assign Delay6_reg_next[19] = Delay6_reg[18];
  assign Delay6_reg_next[20] = Delay6_reg[19];
  assign Delay6_reg_next[21] = Delay6_reg[20];
  assign Delay6_reg_next[22] = Delay6_reg[21];
  assign Delay6_reg_next[23] = Delay6_reg[22];
  assign Delay6_reg_next[24] = Delay6_reg[23];
  assign Delay6_reg_next[25] = Delay6_reg[24];



  assign aExponent_0_out1 = Delay4_out1 == 8'b00000000;



  assign aMantissa_0_out1_1 = Delay5_out1 == 23'b00000000000000000000000;



  assign Denormal_Support_out1 = 1'b0;



  assign Logical_Operator1_out1 =  ~ Denormal_Support_out1;



  assign Logical_Operator_out1_1 = aMantissa_0_out1_1 | Logical_Operator1_out1;



  assign alphaaExponent_0_aMantissa_out1 = aExponent_0_out1 & Logical_Operator_out1_1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_process
      if (i_RST_N == 1'b0) begin
        Delay7_reg[0] <= 1'b0;
        Delay7_reg[1] <= 1'b0;
        Delay7_reg[2] <= 1'b0;
        Delay7_reg[3] <= 1'b0;
        Delay7_reg[4] <= 1'b0;
        Delay7_reg[5] <= 1'b0;
        Delay7_reg[6] <= 1'b0;
        Delay7_reg[7] <= 1'b0;
        Delay7_reg[8] <= 1'b0;
        Delay7_reg[9] <= 1'b0;
        Delay7_reg[10] <= 1'b0;
        Delay7_reg[11] <= 1'b0;
        Delay7_reg[12] <= 1'b0;
        Delay7_reg[13] <= 1'b0;
        Delay7_reg[14] <= 1'b0;
        Delay7_reg[15] <= 1'b0;
        Delay7_reg[16] <= 1'b0;
        Delay7_reg[17] <= 1'b0;
        Delay7_reg[18] <= 1'b0;
        Delay7_reg[19] <= 1'b0;
        Delay7_reg[20] <= 1'b0;
        Delay7_reg[21] <= 1'b0;
        Delay7_reg[22] <= 1'b0;
        Delay7_reg[23] <= 1'b0;
        Delay7_reg[24] <= 1'b0;
        Delay7_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= Delay7_reg_next[0];
          Delay7_reg[1] <= Delay7_reg_next[1];
          Delay7_reg[2] <= Delay7_reg_next[2];
          Delay7_reg[3] <= Delay7_reg_next[3];
          Delay7_reg[4] <= Delay7_reg_next[4];
          Delay7_reg[5] <= Delay7_reg_next[5];
          Delay7_reg[6] <= Delay7_reg_next[6];
          Delay7_reg[7] <= Delay7_reg_next[7];
          Delay7_reg[8] <= Delay7_reg_next[8];
          Delay7_reg[9] <= Delay7_reg_next[9];
          Delay7_reg[10] <= Delay7_reg_next[10];
          Delay7_reg[11] <= Delay7_reg_next[11];
          Delay7_reg[12] <= Delay7_reg_next[12];
          Delay7_reg[13] <= Delay7_reg_next[13];
          Delay7_reg[14] <= Delay7_reg_next[14];
          Delay7_reg[15] <= Delay7_reg_next[15];
          Delay7_reg[16] <= Delay7_reg_next[16];
          Delay7_reg[17] <= Delay7_reg_next[17];
          Delay7_reg[18] <= Delay7_reg_next[18];
          Delay7_reg[19] <= Delay7_reg_next[19];
          Delay7_reg[20] <= Delay7_reg_next[20];
          Delay7_reg[21] <= Delay7_reg_next[21];
          Delay7_reg[22] <= Delay7_reg_next[22];
          Delay7_reg[23] <= Delay7_reg_next[23];
          Delay7_reg[24] <= Delay7_reg_next[24];
          Delay7_reg[25] <= Delay7_reg_next[25];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[25];
  assign Delay7_reg_next[0] = alphaaExponent_0_aMantissa_out1;
  assign Delay7_reg_next[1] = Delay7_reg[0];
  assign Delay7_reg_next[2] = Delay7_reg[1];
  assign Delay7_reg_next[3] = Delay7_reg[2];
  assign Delay7_reg_next[4] = Delay7_reg[3];
  assign Delay7_reg_next[5] = Delay7_reg[4];
  assign Delay7_reg_next[6] = Delay7_reg[5];
  assign Delay7_reg_next[7] = Delay7_reg[6];
  assign Delay7_reg_next[8] = Delay7_reg[7];
  assign Delay7_reg_next[9] = Delay7_reg[8];
  assign Delay7_reg_next[10] = Delay7_reg[9];
  assign Delay7_reg_next[11] = Delay7_reg[10];
  assign Delay7_reg_next[12] = Delay7_reg[11];
  assign Delay7_reg_next[13] = Delay7_reg[12];
  assign Delay7_reg_next[14] = Delay7_reg[13];
  assign Delay7_reg_next[15] = Delay7_reg[14];
  assign Delay7_reg_next[16] = Delay7_reg[15];
  assign Delay7_reg_next[17] = Delay7_reg[16];
  assign Delay7_reg_next[18] = Delay7_reg[17];
  assign Delay7_reg_next[19] = Delay7_reg[18];
  assign Delay7_reg_next[20] = Delay7_reg[19];
  assign Delay7_reg_next[21] = Delay7_reg[20];
  assign Delay7_reg_next[22] = Delay7_reg[21];
  assign Delay7_reg_next[23] = Delay7_reg[22];
  assign Delay7_reg_next[24] = Delay7_reg[23];
  assign Delay7_reg_next[25] = Delay7_reg[24];



  assign Exponent_0_out1 = Delay4_out1 == 8'b00000000;



  assign C_out1 = 8'b00000001;



  assign if_Exponent_0_out1 = (Exponent_0_out1 == 1'b0 ? Delay4_out1 :
              C_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_2_process
      if (i_RST_N == 1'b0) begin
        Delay3_out1_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_2 <= if_Exponent_0_out1;
        end
      end
    end



  assign BitSlice_out1 = Delay3_out1_2[0];



  assign alpha0_out1 = 1'b0;



  assign Exponent_0_out1_1 = Delay4_out1 == 8'b00000000;



  assign Exponent_cfType_Exponent_In_out1 = Delay4_out1 == 8'b11111111;



  assign alphaExponent_0_Exponent_out1 = Exponent_0_out1_1 | Exponent_cfType_Exponent_In_out1;



  assign alpha1_out1 = 1'b1;



  assign Bit_Concat1_out1 = {alpha1_out1, Delay5_out1};



  assign alpha0_out1_1 = 1'b0;



  assign Bit_Concat_out1 = {alpha0_out1_1, Delay5_out1};



  assign if_Exponent_0_Exponent_out1 = (alphaExponent_0_Exponent_out1 == 1'b0 ? Bit_Concat1_out1 :
              Bit_Concat_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_1_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_1 <= if_Exponent_0_Exponent_out1;
        end
      end
    end



  assign Bit_Concat_out1_1 = {alpha0_out1, Delay2_out1_1};



  assign alpha1_out1_1 = 1'b0;



  assign Bit_Concat1_out1_1 = {Bit_Concat_out1_1, alpha1_out1_1};



  assign Bit_Shift_out1 = Bit_Concat1_out1_1 <<< 8'd1;



  assign if_bitget_exp_a_norm_1_out1 = (BitSlice_out1 == 1'b0 ? Bit_Shift_out1 :
              Bit_Concat1_out1_1);



  assign Bit_Slice_out1 = if_bitget_exp_a_norm_1_out1[25:24];



  assign alpha2_out1 = 2'b00;



  assign Constant_out1 = 2'b01;



  assign Add_3 = {30'b0, Bit_Slice_out1};
  assign Add_4 = {30'b0, Constant_out1};
  assign Add_sub_temp = Add_3 - Add_4;
  assign Add_out1_1 = Add_sub_temp[1:0];



  assign Bit_Concat2_out1 = {alpha2_out1, Add_out1_1};



  assign Bit_Slice1_out1 = if_bitget_exp_a_norm_1_out1[23:0];



  assign Bit_Concat3_out1 = {Bit_Concat2_out1, Bit_Slice1_out1};



  assign Data_Type_Conversion_out1 = Bit_Concat3_out1;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_process
      if (i_RST_N == 1'b0) begin
        Delay_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Data_Type_Conversion_out1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay29_PS4_process
      if (i_RST_N == 1'b0) begin
        Delay29_PS4_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay29_PS4_out1 <= Delay_out1;
        end
      end
    end



  assign bitsll_R_1_out1 = Delay29_PS4_out1 <<< 8'd1;



  assign Bit_Slice1_out1_1 = bitsll_R_1_out1[27:23];



  assign Data_Type_Conversion1_out1 = Bit_Slice1_out1_1;



  assign alpha41943040_out1 = 5'sb00101;



  assign R_41943040_1 = {{27{Data_Type_Conversion1_out1[4]}}, Data_Type_Conversion1_out1};
  assign R_41943040_2 = {{27{alpha41943040_out1[4]}}, alpha41943040_out1};
  assign R_41943040_sub_temp = R_41943040_1 - R_41943040_2;
  assign R_41943040_out1 = R_41943040_sub_temp[4:0];



  assign Bit_Slice_out1_1 = R_41943040_out1[4];



  assign Logical_Operator_out1_2 =  ~ Bit_Slice_out1_1;



  assign Bit_Slice2_out1 = bitsll_R_1_out1[22:0];



  assign Bit_Concat_out1_2 = {R_41943040_out1, Bit_Slice2_out1};



  assign Data_Type_Conversion_out1_1 = Bit_Concat_out1_2;



  assign if_tmp3_0_1_out1 = (Logical_Operator_out1_2 == 1'b0 ? bitsll_R_1_out1 :
              Data_Type_Conversion_out1_1);



  assign bitsll_R_1_out1_1 = if_tmp3_0_1_out1 <<< 8'd1;



  assign Bit_Slice1_out1_2 = bitsll_R_1_out1_1[27:22];



  assign Data_Type_Conversion1_out1_1 = Bit_Slice1_out1_2;



  assign alpha16777216_out1 = 5'sb00010;



  assign C_out1_1 = 5'sb00011;



  assign if_tmp3_0_out1 = (Logical_Operator_out1_2 == 1'b0 ? alpha16777216_out1 :
              C_out1_1);



  assign Constant_out1_1 = 1'b0;



  assign Bit_Concat1_out1_2 = {if_tmp3_0_out1, Constant_out1_1};



  assign Data_Type_Conversion2_out1 = Bit_Concat1_out1_2;



  assign bitsll_Q_1_out1 = Data_Type_Conversion2_out1 <<< 8'd1;



  assign BitSet_out1 = bitsll_Q_1_out1 | 6'sb000001;



  assign R_tmp2_1 = {{26{Data_Type_Conversion1_out1_1[5]}}, Data_Type_Conversion1_out1_1};
  assign R_tmp2_2 = {{26{BitSet_out1[5]}}, BitSet_out1};
  assign R_tmp2_sub_temp = R_tmp2_1 - R_tmp2_2;
  assign R_tmp2_out1 = R_tmp2_sub_temp[5:0];



  assign Bit_Slice_out1_2 = R_tmp2_out1[5];



  assign Logical_Operator_out1_3 =  ~ Bit_Slice_out1_2;



  assign if_tmp3_0_1_out1_1 = (Logical_Operator_out1_3 == 1'b0 ? Data_Type_Conversion1_out1_1 :
              R_tmp2_out1);



  assign Bit_Slice2_out1_1 = bitsll_R_1_out1_1[21:0];



  assign Bit_Concat_out1_3 = {if_tmp3_0_1_out1_1, Bit_Slice2_out1_1};



  assign Data_Type_Conversion_out1_2 = Bit_Concat_out1_3;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS5_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS5_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS5_out1 <= Data_Type_Conversion_out1_2;
        end
      end
    end



  assign bitsll_R_1_out1_2 = Delay3_PS5_out1 <<< 8'd1;



  assign Bit_Slice1_out1_3 = bitsll_R_1_out1_2[27:21];



  assign Data_Type_Conversion1_out1_2 = Bit_Slice1_out1_3;



  assign BitSet1_out1 = Data_Type_Conversion2_out1 | 6'sb000001;



  assign if_tmp3_0_out1_1 = (Logical_Operator_out1_3 == 1'b0 ? Data_Type_Conversion2_out1 :
              BitSet1_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS5_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS5_out1 <= 6'sb000000;
      end
      else begin
        if (enb) begin
          Delay2_PS5_out1 <= if_tmp3_0_out1_1;
        end
      end
    end



  assign Constant_out1_2 = 1'b0;



  assign Bit_Concat1_out1_3 = {Delay2_PS5_out1, Constant_out1_2};



  assign Data_Type_Conversion2_out1_1 = Bit_Concat1_out1_3;



  assign bitsll_Q_1_out1_1 = Data_Type_Conversion2_out1_1 <<< 8'd1;



  assign BitSet_out1_1 = bitsll_Q_1_out1_1 | 7'sb0000001;



  assign R_tmp2_4 = {{25{Data_Type_Conversion1_out1_2[6]}}, Data_Type_Conversion1_out1_2};
  assign R_tmp2_5 = {{25{BitSet_out1_1[6]}}, BitSet_out1_1};
  assign R_tmp2_sub_temp_1 = R_tmp2_4 - R_tmp2_5;
  assign R_tmp2_out1_1 = R_tmp2_sub_temp_1[6:0];



  assign Bit_Slice_out1_3 = R_tmp2_out1_1[6];



  assign Logical_Operator_out1_4 =  ~ Bit_Slice_out1_3;



  assign if_tmp3_0_1_out1_2 = (Logical_Operator_out1_4 == 1'b0 ? Data_Type_Conversion1_out1_2 :
              R_tmp2_out1_1);



  assign Bit_Slice2_out1_2 = bitsll_R_1_out1_2[20:0];



  assign Bit_Concat_out1_4 = {if_tmp3_0_1_out1_2, Bit_Slice2_out1_2};



  assign Data_Type_Conversion_out1_3 = Bit_Concat_out1_4;



  assign bitsll_R_1_out1_3 = Data_Type_Conversion_out1_3 <<< 8'd1;



  assign Bit_Slice1_out1_4 = bitsll_R_1_out1_3[27:20];



  assign Data_Type_Conversion1_out1_3 = Bit_Slice1_out1_4;



  assign BitSet1_out1_1 = Data_Type_Conversion2_out1_1 | 7'sb0000001;



  assign if_tmp3_0_out1_2 = (Logical_Operator_out1_4 == 1'b0 ? Data_Type_Conversion2_out1_1 :
              BitSet1_out1_1);



  assign Constant_out1_3 = 1'b0;



  assign Bit_Concat1_out1_4 = {if_tmp3_0_out1_2, Constant_out1_3};



  assign Data_Type_Conversion2_out1_2 = Bit_Concat1_out1_4;



  assign bitsll_Q_1_out1_2 = Data_Type_Conversion2_out1_2 <<< 8'd1;



  assign BitSet_out1_2 = bitsll_Q_1_out1_2 | 8'sb00000001;



  assign R_tmp2_out1_2 = Data_Type_Conversion1_out1_3 - BitSet_out1_2;



  assign Bit_Slice_out1_4 = R_tmp2_out1_2[7];



  assign Logical_Operator_out1_5 =  ~ Bit_Slice_out1_4;



  assign if_tmp3_0_1_out1_3 = (Logical_Operator_out1_5 == 1'b0 ? Data_Type_Conversion1_out1_3 :
              R_tmp2_out1_2);



  assign Bit_Slice2_out1_3 = bitsll_R_1_out1_3[19:0];



  assign Bit_Concat_out1_5 = {if_tmp3_0_1_out1_3, Bit_Slice2_out1_3};



  assign Data_Type_Conversion_out1_4 = Bit_Concat_out1_5;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_PS6_process
      if (i_RST_N == 1'b0) begin
        Delay5_PS6_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS6_out1 <= Data_Type_Conversion_out1_4;
        end
      end
    end



  assign bitsll_R_1_out1_4 = Delay5_PS6_out1 <<< 8'd1;



  assign Bit_Slice1_out1_5 = bitsll_R_1_out1_4[27:19];



  assign Data_Type_Conversion1_out1_4 = Bit_Slice1_out1_5;



  assign BitSet1_out1_2 = Data_Type_Conversion2_out1_2 | 8'sb00000001;



  assign if_tmp3_0_out1_3 = (Logical_Operator_out1_5 == 1'b0 ? Data_Type_Conversion2_out1_2 :
              BitSet1_out1_2);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_PS6_process
      if (i_RST_N == 1'b0) begin
        Delay4_PS6_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Delay4_PS6_out1 <= if_tmp3_0_out1_3;
        end
      end
    end



  assign Constant_out1_4 = 1'b0;



  assign Bit_Concat1_out1_5 = {Delay4_PS6_out1, Constant_out1_4};



  assign Data_Type_Conversion3_out1 = Bit_Concat1_out1_5;



  assign bitsll_Q_1_1_out1 = Data_Type_Conversion3_out1 <<< 8'd1;



  assign BitSet2_out1 = bitsll_Q_1_1_out1 | 9'sb000000001;



  assign R_tmp2_8 = {{23{Data_Type_Conversion1_out1_4[8]}}, Data_Type_Conversion1_out1_4};
  assign R_tmp2_9 = {{23{BitSet2_out1[8]}}, BitSet2_out1};
  assign R_tmp2_sub_temp_2 = R_tmp2_8 - R_tmp2_9;
  assign R_tmp2_out1_3 = R_tmp2_sub_temp_2[8:0];



  assign Bit_Slice_out1_5 = R_tmp2_out1_3[8];



  assign Logical_Operator_out1_6 =  ~ Bit_Slice_out1_5;



  assign if_tmp3_0_1_out1_4 = (Logical_Operator_out1_6 == 1'b0 ? Data_Type_Conversion1_out1_4 :
              R_tmp2_out1_3);



  assign Bit_Slice2_out1_4 = bitsll_R_1_out1_4[18:0];



  assign Bit_Concat_out1_6 = {if_tmp3_0_1_out1_4, Bit_Slice2_out1_4};



  assign Data_Type_Conversion_out1_5 = Bit_Concat_out1_6;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay10_PS7_process
      if (i_RST_N == 1'b0) begin
        Delay10_PS7_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_PS7_out1 <= Data_Type_Conversion_out1_5;
        end
      end
    end



  assign bitsll_R_1_out1_5 = Delay10_PS7_out1 <<< 8'd1;



  assign Split_Remainder_accordingly_out1 = bitsll_R_1_out1_5[27:18];



  assign Data_Type_Conversion1_out1_5 = Split_Remainder_accordingly_out1;



  assign BitSet1_out1_3 = Data_Type_Conversion3_out1 | 9'sb000000001;



  assign if_tmp3_0_out1_4 = (Logical_Operator_out1_6 == 1'b0 ? Data_Type_Conversion3_out1 :
              BitSet1_out1_3);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay11_PS7_process
      if (i_RST_N == 1'b0) begin
        Delay11_PS7_out1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay11_PS7_out1 <= if_tmp3_0_out1_4;
        end
      end
    end



  assign Constant_out1_5 = 1'b0;



  assign Build_Quotient_bit_by_bit_out1 = {Delay11_PS7_out1, Constant_out1_5};



  assign Data_Type_Conversion3_out1_1 = Build_Quotient_bit_by_bit_out1;



  assign bitsll_Q_1_1_out1_1 = Data_Type_Conversion3_out1_1 <<< 8'd1;



  assign BitSet2_out1_1 = bitsll_Q_1_1_out1_1 | 10'sb0000000001;



  assign R_tmp2_11 = {{22{Data_Type_Conversion1_out1_5[9]}}, Data_Type_Conversion1_out1_5};
  assign R_tmp2_12 = {{22{BitSet2_out1_1[9]}}, BitSet2_out1_1};
  assign R_tmp2_sub_temp_3 = R_tmp2_11 - R_tmp2_12;
  assign R_tmp2_out1_4 = R_tmp2_sub_temp_3[9:0];



  assign Bit_Slice_out1_6 = R_tmp2_out1_4[9];



  assign Logical_Operator_out1_7 =  ~ Bit_Slice_out1_6;



  assign if_tmp3_0_1_out1_5 = (Logical_Operator_out1_7 == 1'b0 ? Data_Type_Conversion1_out1_5 :
              R_tmp2_out1_4);



  assign Bit_Slice2_out1_5 = bitsll_R_1_out1_5[17:0];



  assign Bit_Concat_out1_7 = {if_tmp3_0_1_out1_5, Bit_Slice2_out1_5};



  assign Data_Type_Conversion_out1_6 = Bit_Concat_out1_7;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_PS8_process
      if (i_RST_N == 1'b0) begin
        Delay5_PS8_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS8_out1 <= Data_Type_Conversion_out1_6;
        end
      end
    end



  assign bitsll_R_1_out1_6 = Delay5_PS8_out1 <<< 8'd1;



  assign Bit_Slice1_out1_6 = bitsll_R_1_out1_6[27:17];



  assign Data_Type_Conversion1_out1_6 = Bit_Slice1_out1_6;



  assign BitSet1_out1_4 = Data_Type_Conversion3_out1_1 | 10'sb0000000001;



  assign if_tmp3_0_out1_5 = (Logical_Operator_out1_7 == 1'b0 ? Data_Type_Conversion3_out1_1 :
              BitSet1_out1_4);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_PS8_process
      if (i_RST_N == 1'b0) begin
        Delay4_PS8_out1 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS8_out1 <= if_tmp3_0_out1_5;
        end
      end
    end



  assign Constant_out1_6 = 1'b0;



  assign Bit_Concat1_out1_6 = {Delay4_PS8_out1, Constant_out1_6};



  assign Data_Type_Conversion3_out1_2 = Bit_Concat1_out1_6;



  assign bitsll_Q_1_1_out1_2 = Data_Type_Conversion3_out1_2 <<< 8'd1;



  assign BitSet2_out1_2 = bitsll_Q_1_1_out1_2 | 11'sb00000000001;



  assign R_tmp2_14 = {{21{Data_Type_Conversion1_out1_6[10]}}, Data_Type_Conversion1_out1_6};
  assign R_tmp2_15 = {{21{BitSet2_out1_2[10]}}, BitSet2_out1_2};
  assign R_tmp2_sub_temp_4 = R_tmp2_14 - R_tmp2_15;
  assign R_tmp2_out1_5 = R_tmp2_sub_temp_4[10:0];



  assign Bit_Slice_out1_7 = R_tmp2_out1_5[10];



  assign Logical_Operator_out1_8 =  ~ Bit_Slice_out1_7;



  assign if_tmp3_0_1_out1_6 = (Logical_Operator_out1_8 == 1'b0 ? Data_Type_Conversion1_out1_6 :
              R_tmp2_out1_5);



  assign Bit_Slice2_out1_6 = bitsll_R_1_out1_6[16:0];



  assign Bit_Concat_out1_8 = {if_tmp3_0_1_out1_6, Bit_Slice2_out1_6};



  assign Data_Type_Conversion_out1_7 = Bit_Concat_out1_8;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_PS9_process
      if (i_RST_N == 1'b0) begin
        Delay_PS9_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS9_out1 <= Data_Type_Conversion_out1_7;
        end
      end
    end



  assign bitsll_R_1_out1_7 = Delay_PS9_out1 <<< 8'd1;



  assign Bit_Slice1_out1_7 = bitsll_R_1_out1_7[27:16];



  assign Data_Type_Conversion1_out1_7 = Bit_Slice1_out1_7;



  assign BitSet1_out1_5 = Data_Type_Conversion3_out1_2 | 11'sb00000000001;



  assign if_tmp3_0_out1_6 = (Logical_Operator_out1_8 == 1'b0 ? Data_Type_Conversion3_out1_2 :
              BitSet1_out1_5);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_PS9_process
      if (i_RST_N == 1'b0) begin
        Delay1_PS9_out1 <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS9_out1 <= if_tmp3_0_out1_6;
        end
      end
    end



  assign Constant_out1_7 = 1'b0;



  assign Bit_Concat1_out1_7 = {Delay1_PS9_out1, Constant_out1_7};



  assign Data_Type_Conversion3_out1_3 = Bit_Concat1_out1_7;



  assign bitsll_Q_1_1_out1_3 = Data_Type_Conversion3_out1_3 <<< 8'd1;



  assign BitSet2_out1_3 = bitsll_Q_1_1_out1_3 | 12'sb000000000001;



  assign R_tmp2_17 = {{20{Data_Type_Conversion1_out1_7[11]}}, Data_Type_Conversion1_out1_7};
  assign R_tmp2_18 = {{20{BitSet2_out1_3[11]}}, BitSet2_out1_3};
  assign R_tmp2_sub_temp_5 = R_tmp2_17 - R_tmp2_18;
  assign R_tmp2_out1_6 = R_tmp2_sub_temp_5[11:0];



  assign Bit_Slice_out1_8 = R_tmp2_out1_6[11];



  assign Logical_Operator_out1_9 =  ~ Bit_Slice_out1_8;



  assign if_tmp3_0_1_out1_7 = (Logical_Operator_out1_9 == 1'b0 ? Data_Type_Conversion1_out1_7 :
              R_tmp2_out1_6);



  assign Bit_Slice2_out1_7 = bitsll_R_1_out1_7[15:0];



  assign Bit_Concat_out1_9 = {if_tmp3_0_1_out1_7, Bit_Slice2_out1_7};



  assign Data_Type_Conversion_out1_8 = Bit_Concat_out1_9;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS10_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS10_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS10_out1 <= Data_Type_Conversion_out1_8;
        end
      end
    end



  assign bitsll_R_1_out1_8 = Delay3_PS10_out1 <<< 8'd1;



  assign Bit_Slice1_out1_8 = bitsll_R_1_out1_8[27:15];



  assign Data_Type_Conversion1_out1_8 = Bit_Slice1_out1_8;



  assign BitSet1_out1_6 = Data_Type_Conversion3_out1_3 | 12'sb000000000001;



  assign if_tmp3_0_out1_7 = (Logical_Operator_out1_9 == 1'b0 ? Data_Type_Conversion3_out1_3 :
              BitSet1_out1_6);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS10_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS10_out1 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS10_out1 <= if_tmp3_0_out1_7;
        end
      end
    end



  assign Constant_out1_8 = 1'b0;



  assign Bit_Concat1_out1_8 = {Delay2_PS10_out1, Constant_out1_8};



  assign Data_Type_Conversion3_out1_4 = Bit_Concat1_out1_8;



  assign bitsll_Q_1_1_out1_4 = Data_Type_Conversion3_out1_4 <<< 8'd1;



  assign BitSet2_out1_4 = bitsll_Q_1_1_out1_4 | 13'sb0000000000001;



  assign R_tmp2_20 = {{19{Data_Type_Conversion1_out1_8[12]}}, Data_Type_Conversion1_out1_8};
  assign R_tmp2_21 = {{19{BitSet2_out1_4[12]}}, BitSet2_out1_4};
  assign R_tmp2_sub_temp_6 = R_tmp2_20 - R_tmp2_21;
  assign R_tmp2_out1_7 = R_tmp2_sub_temp_6[12:0];



  assign Bit_Slice_out1_9 = R_tmp2_out1_7[12];



  assign Logical_Operator_out1_10 =  ~ Bit_Slice_out1_9;



  assign if_tmp3_0_1_out1_8 = (Logical_Operator_out1_10 == 1'b0 ? Data_Type_Conversion1_out1_8 :
              R_tmp2_out1_7);



  assign Bit_Slice2_out1_8 = bitsll_R_1_out1_8[14:0];



  assign Bit_Concat_out1_10 = {if_tmp3_0_1_out1_8, Bit_Slice2_out1_8};



  assign Data_Type_Conversion_out1_9 = Bit_Concat_out1_10;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_PS11_process
      if (i_RST_N == 1'b0) begin
        Delay_PS11_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS11_out1 <= Data_Type_Conversion_out1_9;
        end
      end
    end



  assign bitsll_R_1_out1_9 = Delay_PS11_out1 <<< 8'd1;



  assign Bit_Slice1_out1_9 = bitsll_R_1_out1_9[27:14];



  assign Data_Type_Conversion1_out1_9 = Bit_Slice1_out1_9;



  assign BitSet1_out1_7 = Data_Type_Conversion3_out1_4 | 13'sb0000000000001;



  assign if_tmp3_0_out1_8 = (Logical_Operator_out1_10 == 1'b0 ? Data_Type_Conversion3_out1_4 :
              BitSet1_out1_7);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_PS11_process
      if (i_RST_N == 1'b0) begin
        Delay1_PS11_out1 <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS11_out1 <= if_tmp3_0_out1_8;
        end
      end
    end



  assign Constant_out1_9 = 1'b0;



  assign Bit_Concat1_out1_9 = {Delay1_PS11_out1, Constant_out1_9};



  assign Data_Type_Conversion3_out1_5 = Bit_Concat1_out1_9;



  assign bitsll_Q_1_1_out1_5 = Data_Type_Conversion3_out1_5 <<< 8'd1;



  assign BitSet2_out1_5 = bitsll_Q_1_1_out1_5 | 14'sb00000000000001;



  assign R_tmp2_23 = {{18{Data_Type_Conversion1_out1_9[13]}}, Data_Type_Conversion1_out1_9};
  assign R_tmp2_24 = {{18{BitSet2_out1_5[13]}}, BitSet2_out1_5};
  assign R_tmp2_sub_temp_7 = R_tmp2_23 - R_tmp2_24;
  assign R_tmp2_out1_8 = R_tmp2_sub_temp_7[13:0];



  assign Bit_Slice_out1_10 = R_tmp2_out1_8[13];



  assign Logical_Operator_out1_11 =  ~ Bit_Slice_out1_10;



  assign if_tmp3_0_1_out1_9 = (Logical_Operator_out1_11 == 1'b0 ? Data_Type_Conversion1_out1_9 :
              R_tmp2_out1_8);



  assign Bit_Slice2_out1_9 = bitsll_R_1_out1_9[13:0];



  assign Bit_Concat_out1_11 = {if_tmp3_0_1_out1_9, Bit_Slice2_out1_9};



  assign Data_Type_Conversion_out1_10 = Bit_Concat_out1_11;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS12_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS12_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS12_out1 <= Data_Type_Conversion_out1_10;
        end
      end
    end



  assign bitsll_R_1_out1_10 = Delay2_PS12_out1 <<< 8'd1;



  assign Bit_Slice1_out1_10 = bitsll_R_1_out1_10[27:13];



  assign Data_Type_Conversion1_out1_10 = Bit_Slice1_out1_10;



  assign BitSet1_out1_8 = Data_Type_Conversion3_out1_5 | 14'sb00000000000001;



  assign if_tmp3_0_out1_9 = (Logical_Operator_out1_11 == 1'b0 ? Data_Type_Conversion3_out1_5 :
              BitSet1_out1_8);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS12_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS12_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS12_out1 <= if_tmp3_0_out1_9;
        end
      end
    end



  assign Constant_out1_10 = 1'b0;



  assign Bit_Concat1_out1_10 = {Delay3_PS12_out1, Constant_out1_10};



  assign Data_Type_Conversion3_out1_6 = Bit_Concat1_out1_10;



  assign bitsll_Q_1_1_out1_6 = Data_Type_Conversion3_out1_6 <<< 8'd1;



  assign BitSet2_out1_6 = bitsll_Q_1_1_out1_6 | 15'sb000000000000001;



  assign R_tmp2_26 = {{17{Data_Type_Conversion1_out1_10[14]}}, Data_Type_Conversion1_out1_10};
  assign R_tmp2_27 = {{17{BitSet2_out1_6[14]}}, BitSet2_out1_6};
  assign R_tmp2_sub_temp_8 = R_tmp2_26 - R_tmp2_27;
  assign R_tmp2_out1_9 = R_tmp2_sub_temp_8[14:0];



  assign Bit_Slice_out1_11 = R_tmp2_out1_9[14];



  assign Logical_Operator_out1_12 =  ~ Bit_Slice_out1_11;



  assign if_tmp3_0_1_out1_10 = (Logical_Operator_out1_12 == 1'b0 ? Data_Type_Conversion1_out1_10 :
              R_tmp2_out1_9);



  assign Bit_Slice2_out1_10 = bitsll_R_1_out1_10[12:0];



  assign Bit_Concat_out1_12 = {if_tmp3_0_1_out1_10, Bit_Slice2_out1_10};



  assign Data_Type_Conversion_out1_11 = Bit_Concat_out1_12;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_PS13_process
      if (i_RST_N == 1'b0) begin
        Delay_PS13_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS13_out1 <= Data_Type_Conversion_out1_11;
        end
      end
    end



  assign bitsll_R_1_out1_11 = Delay_PS13_out1 <<< 8'd1;



  assign Bit_Slice1_out1_11 = bitsll_R_1_out1_11[27:12];



  assign Data_Type_Conversion1_out1_11 = Bit_Slice1_out1_11;



  assign BitSet1_out1_9 = Data_Type_Conversion3_out1_6 | 15'sb000000000000001;



  assign if_tmp3_0_out1_10 = (Logical_Operator_out1_12 == 1'b0 ? Data_Type_Conversion3_out1_6 :
              BitSet1_out1_9);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_PS13_process
      if (i_RST_N == 1'b0) begin
        Delay1_PS13_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS13_out1 <= if_tmp3_0_out1_10;
        end
      end
    end



  assign Constant_out1_11 = 1'b0;



  assign Bit_Concat1_out1_11 = {Delay1_PS13_out1, Constant_out1_11};



  assign Data_Type_Conversion3_out1_7 = Bit_Concat1_out1_11;



  assign bitsll_Q_1_1_out1_7 = Data_Type_Conversion3_out1_7 <<< 8'd1;



  assign BitSet2_out1_7 = bitsll_Q_1_1_out1_7 | 16'sb0000000000000001;



  assign R_tmp2_out1_10 = Data_Type_Conversion1_out1_11 - BitSet2_out1_7;



  assign Bit_Slice_out1_12 = R_tmp2_out1_10[15];



  assign Logical_Operator_out1_13 =  ~ Bit_Slice_out1_12;



  assign if_tmp3_0_1_out1_11 = (Logical_Operator_out1_13 == 1'b0 ? Data_Type_Conversion1_out1_11 :
              R_tmp2_out1_10);



  assign Bit_Slice2_out1_11 = bitsll_R_1_out1_11[11:0];



  assign Bit_Concat_out1_13 = {if_tmp3_0_1_out1_11, Bit_Slice2_out1_11};



  assign Data_Type_Conversion_out1_12 = Bit_Concat_out1_13;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_PS14_process
      if (i_RST_N == 1'b0) begin
        Delay4_PS14_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS14_out1 <= Data_Type_Conversion_out1_12;
        end
      end
    end



  assign bitsll_R_1_out1_12 = Delay4_PS14_out1 <<< 8'd1;



  assign Bit_Slice1_out1_12 = bitsll_R_1_out1_12[27:11];



  assign Data_Type_Conversion1_out1_12 = Bit_Slice1_out1_12;



  assign BitSet1_out1_10 = Data_Type_Conversion3_out1_7 | 16'sb0000000000000001;



  assign if_tmp3_0_out1_11 = (Logical_Operator_out1_13 == 1'b0 ? Data_Type_Conversion3_out1_7 :
              BitSet1_out1_10);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_PS14_process
      if (i_RST_N == 1'b0) begin
        Delay5_PS14_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS14_out1 <= if_tmp3_0_out1_11;
        end
      end
    end



  assign Constant_out1_12 = 1'b0;



  assign Bit_Concat1_out1_12 = {Delay5_PS14_out1, Constant_out1_12};



  assign Data_Type_Conversion3_out1_8 = Bit_Concat1_out1_12;



  assign bitsll_Q_1_1_out1_8 = Data_Type_Conversion3_out1_8 <<< 8'd1;



  assign BitSet2_out1_8 = bitsll_Q_1_1_out1_8 | 17'sb00000000000000001;



  assign R_tmp2_30 = {{15{Data_Type_Conversion1_out1_12[16]}}, Data_Type_Conversion1_out1_12};
  assign R_tmp2_31 = {{15{BitSet2_out1_8[16]}}, BitSet2_out1_8};
  assign R_tmp2_sub_temp_9 = R_tmp2_30 - R_tmp2_31;
  assign R_tmp2_out1_11 = R_tmp2_sub_temp_9[16:0];



  assign Bit_Slice_out1_13 = R_tmp2_out1_11[16];



  assign Logical_Operator_out1_14 =  ~ Bit_Slice_out1_13;



  assign if_tmp3_0_1_out1_12 = (Logical_Operator_out1_14 == 1'b0 ? Data_Type_Conversion1_out1_12 :
              R_tmp2_out1_11);



  assign Bit_Slice2_out1_12 = bitsll_R_1_out1_12[10:0];



  assign Bit_Concat_out1_14 = {if_tmp3_0_1_out1_12, Bit_Slice2_out1_12};



  assign Data_Type_Conversion_out1_13 = Bit_Concat_out1_14;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS15_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS15_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS15_out1 <= Data_Type_Conversion_out1_13;
        end
      end
    end



  assign bitsll_R_1_out1_13 = Delay2_PS15_out1 <<< 8'd1;



  assign Bit_Slice1_out1_13 = bitsll_R_1_out1_13[27:10];



  assign Data_Type_Conversion1_out1_13 = Bit_Slice1_out1_13;



  assign BitSet1_out1_11 = Data_Type_Conversion3_out1_8 | 17'sb00000000000000001;



  assign if_tmp3_0_out1_12 = (Logical_Operator_out1_14 == 1'b0 ? Data_Type_Conversion3_out1_8 :
              BitSet1_out1_11);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS15_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS15_out1 <= 17'sb00000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS15_out1 <= if_tmp3_0_out1_12;
        end
      end
    end



  assign Constant_out1_13 = 1'b0;



  assign Bit_Concat1_out1_13 = {Delay3_PS15_out1, Constant_out1_13};



  assign Data_Type_Conversion3_out1_9 = Bit_Concat1_out1_13;



  assign bitsll_Q_1_1_out1_9 = Data_Type_Conversion3_out1_9 <<< 8'd1;



  assign BitSet2_out1_9 = bitsll_Q_1_1_out1_9 | 18'sb000000000000000001;



  assign R_tmp2_33 = {{14{Data_Type_Conversion1_out1_13[17]}}, Data_Type_Conversion1_out1_13};
  assign R_tmp2_34 = {{14{BitSet2_out1_9[17]}}, BitSet2_out1_9};
  assign R_tmp2_sub_temp_10 = R_tmp2_33 - R_tmp2_34;
  assign R_tmp2_out1_12 = R_tmp2_sub_temp_10[17:0];



  assign Bit_Slice_out1_14 = R_tmp2_out1_12[17];



  assign Logical_Operator_out1_15 =  ~ Bit_Slice_out1_14;



  assign if_tmp3_0_1_out1_13 = (Logical_Operator_out1_15 == 1'b0 ? Data_Type_Conversion1_out1_13 :
              R_tmp2_out1_12);



  assign Bit_Slice2_out1_13 = bitsll_R_1_out1_13[9:0];



  assign Bit_Concat_out1_15 = {if_tmp3_0_1_out1_13, Bit_Slice2_out1_13};



  assign Data_Type_Conversion_out1_14 = Bit_Concat_out1_15;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS16_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS16_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS16_out1 <= Data_Type_Conversion_out1_14;
        end
      end
    end



  assign bitsll_R_1_out1_14 = Delay2_PS16_out1 <<< 8'd1;



  assign Bit_Slice1_out1_14 = bitsll_R_1_out1_14[27:9];



  assign Data_Type_Conversion1_out1_14 = Bit_Slice1_out1_14;



  assign BitSet1_out1_12 = Data_Type_Conversion3_out1_9 | 18'sb000000000000000001;



  assign if_tmp3_0_out1_13 = (Logical_Operator_out1_15 == 1'b0 ? Data_Type_Conversion3_out1_9 :
              BitSet1_out1_12);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS16_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS16_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS16_out1 <= if_tmp3_0_out1_13;
        end
      end
    end



  assign Constant_out1_14 = 1'b0;



  assign Bit_Concat1_out1_14 = {Delay3_PS16_out1, Constant_out1_14};



  assign Data_Type_Conversion3_out1_10 = Bit_Concat1_out1_14;



  assign bitsll_Q_1_1_out1_10 = Data_Type_Conversion3_out1_10 <<< 8'd1;



  assign BitSet2_out1_10 = bitsll_Q_1_1_out1_10 | 19'sb0000000000000000001;



  assign R_tmp2_36 = {{13{Data_Type_Conversion1_out1_14[18]}}, Data_Type_Conversion1_out1_14};
  assign R_tmp2_37 = {{13{BitSet2_out1_10[18]}}, BitSet2_out1_10};
  assign R_tmp2_sub_temp_11 = R_tmp2_36 - R_tmp2_37;
  assign R_tmp2_out1_13 = R_tmp2_sub_temp_11[18:0];



  assign Bit_Slice_out1_15 = R_tmp2_out1_13[18];



  assign Logical_Operator_out1_16 =  ~ Bit_Slice_out1_15;



  assign if_tmp3_0_1_out1_14 = (Logical_Operator_out1_16 == 1'b0 ? Data_Type_Conversion1_out1_14 :
              R_tmp2_out1_13);



  assign Bit_Slice2_out1_14 = bitsll_R_1_out1_14[8:0];



  assign Bit_Concat_out1_16 = {if_tmp3_0_1_out1_14, Bit_Slice2_out1_14};



  assign Data_Type_Conversion_out1_15 = Bit_Concat_out1_16;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_PS17_process
      if (i_RST_N == 1'b0) begin
        Delay_PS17_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS17_out1 <= Data_Type_Conversion_out1_15;
        end
      end
    end



  assign bitsll_R_1_out1_15 = Delay_PS17_out1 <<< 8'd1;



  assign Bit_Slice1_out1_15 = bitsll_R_1_out1_15[27:8];



  assign Data_Type_Conversion1_out1_15 = Bit_Slice1_out1_15;



  assign BitSet1_out1_13 = Data_Type_Conversion3_out1_10 | 19'sb0000000000000000001;



  assign if_tmp3_0_out1_14 = (Logical_Operator_out1_16 == 1'b0 ? Data_Type_Conversion3_out1_10 :
              BitSet1_out1_13);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_PS17_process
      if (i_RST_N == 1'b0) begin
        Delay1_PS17_out1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS17_out1 <= if_tmp3_0_out1_14;
        end
      end
    end



  assign Constant_out1_15 = 1'b0;



  assign Bit_Concat1_out1_15 = {Delay1_PS17_out1, Constant_out1_15};



  assign Data_Type_Conversion3_out1_11 = Bit_Concat1_out1_15;



  assign bitsll_Q_1_1_out1_11 = Data_Type_Conversion3_out1_11 <<< 8'd1;



  assign BitSet2_out1_11 = bitsll_Q_1_1_out1_11 | 20'sb00000000000000000001;



  assign R_tmp2_39 = {{12{Data_Type_Conversion1_out1_15[19]}}, Data_Type_Conversion1_out1_15};
  assign R_tmp2_40 = {{12{BitSet2_out1_11[19]}}, BitSet2_out1_11};
  assign R_tmp2_sub_temp_12 = R_tmp2_39 - R_tmp2_40;
  assign R_tmp2_out1_14 = R_tmp2_sub_temp_12[19:0];



  assign Bit_Slice_out1_16 = R_tmp2_out1_14[19];



  assign Logical_Operator_out1_17 =  ~ Bit_Slice_out1_16;



  assign if_tmp3_0_1_out1_15 = (Logical_Operator_out1_17 == 1'b0 ? Data_Type_Conversion1_out1_15 :
              R_tmp2_out1_14);



  assign Bit_Slice2_out1_15 = bitsll_R_1_out1_15[7:0];



  assign Bit_Concat_out1_17 = {if_tmp3_0_1_out1_15, Bit_Slice2_out1_15};



  assign Data_Type_Conversion_out1_16 = Bit_Concat_out1_17;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_PS18_process
      if (i_RST_N == 1'b0) begin
        Delay4_PS18_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS18_out1 <= Data_Type_Conversion_out1_16;
        end
      end
    end



  assign bitsll_R_1_out1_16 = Delay4_PS18_out1 <<< 8'd1;



  assign Bit_Slice1_out1_16 = bitsll_R_1_out1_16[27:7];



  assign Data_Type_Conversion1_out1_16 = Bit_Slice1_out1_16;



  assign BitSet1_out1_14 = Data_Type_Conversion3_out1_11 | 20'sb00000000000000000001;



  assign if_tmp3_0_out1_15 = (Logical_Operator_out1_17 == 1'b0 ? Data_Type_Conversion3_out1_11 :
              BitSet1_out1_14);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_PS18_process
      if (i_RST_N == 1'b0) begin
        Delay5_PS18_out1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS18_out1 <= if_tmp3_0_out1_15;
        end
      end
    end



  assign Constant_out1_16 = 1'b0;



  assign Bit_Concat1_out1_16 = {Delay5_PS18_out1, Constant_out1_16};



  assign Data_Type_Conversion3_out1_12 = Bit_Concat1_out1_16;



  assign bitsll_Q_1_1_out1_12 = Data_Type_Conversion3_out1_12 <<< 8'd1;



  assign BitSet2_out1_12 = bitsll_Q_1_1_out1_12 | 21'sb000000000000000000001;



  assign R_tmp2_42 = {{11{Data_Type_Conversion1_out1_16[20]}}, Data_Type_Conversion1_out1_16};
  assign R_tmp2_43 = {{11{BitSet2_out1_12[20]}}, BitSet2_out1_12};
  assign R_tmp2_sub_temp_13 = R_tmp2_42 - R_tmp2_43;
  assign R_tmp2_out1_15 = R_tmp2_sub_temp_13[20:0];



  assign Bit_Slice_out1_17 = R_tmp2_out1_15[20];



  assign Logical_Operator_out1_18 =  ~ Bit_Slice_out1_17;



  assign if_tmp3_0_1_out1_16 = (Logical_Operator_out1_18 == 1'b0 ? Data_Type_Conversion1_out1_16 :
              R_tmp2_out1_15);



  assign Bit_Slice2_out1_16 = bitsll_R_1_out1_16[6:0];



  assign Bit_Concat_out1_18 = {if_tmp3_0_1_out1_16, Bit_Slice2_out1_16};



  assign Data_Type_Conversion_out1_17 = Bit_Concat_out1_18;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_PS19_process
      if (i_RST_N == 1'b0) begin
        Delay4_PS19_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS19_out1 <= Data_Type_Conversion_out1_17;
        end
      end
    end



  assign bitsll_R_1_out1_17 = Delay4_PS19_out1 <<< 8'd1;



  assign Bit_Slice1_out1_17 = bitsll_R_1_out1_17[27:6];



  assign Data_Type_Conversion1_out1_17 = Bit_Slice1_out1_17;



  assign BitSet1_out1_15 = Data_Type_Conversion3_out1_12 | 21'sb000000000000000000001;



  assign if_tmp3_0_out1_16 = (Logical_Operator_out1_18 == 1'b0 ? Data_Type_Conversion3_out1_12 :
              BitSet1_out1_15);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_PS19_process
      if (i_RST_N == 1'b0) begin
        Delay5_PS19_out1 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS19_out1 <= if_tmp3_0_out1_16;
        end
      end
    end



  assign Constant_out1_17 = 1'b0;



  assign Bit_Concat1_out1_17 = {Delay5_PS19_out1, Constant_out1_17};



  assign Data_Type_Conversion3_out1_13 = Bit_Concat1_out1_17;



  assign bitsll_Q_1_1_out1_13 = Data_Type_Conversion3_out1_13 <<< 8'd1;



  assign BitSet2_out1_13 = bitsll_Q_1_1_out1_13 | 22'sb0000000000000000000001;



  assign R_tmp2_45 = {{10{Data_Type_Conversion1_out1_17[21]}}, Data_Type_Conversion1_out1_17};
  assign R_tmp2_46 = {{10{BitSet2_out1_13[21]}}, BitSet2_out1_13};
  assign R_tmp2_sub_temp_14 = R_tmp2_45 - R_tmp2_46;
  assign R_tmp2_out1_16 = R_tmp2_sub_temp_14[21:0];



  assign Bit_Slice_out1_18 = R_tmp2_out1_16[21];



  assign Logical_Operator_out1_19 =  ~ Bit_Slice_out1_18;



  assign if_tmp3_0_1_out1_17 = (Logical_Operator_out1_19 == 1'b0 ? Data_Type_Conversion1_out1_17 :
              R_tmp2_out1_16);



  assign Bit_Slice2_out1_17 = bitsll_R_1_out1_17[5:0];



  assign Bit_Concat_out1_19 = {if_tmp3_0_1_out1_17, Bit_Slice2_out1_17};



  assign Data_Type_Conversion_out1_18 = Bit_Concat_out1_19;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS20_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS20_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS20_out1 <= Data_Type_Conversion_out1_18;
        end
      end
    end



  assign bitsll_R_1_out1_18 = Delay2_PS20_out1 <<< 8'd1;



  assign Bit_Slice1_out1_18 = bitsll_R_1_out1_18[27:5];



  assign Data_Type_Conversion1_out1_18 = Bit_Slice1_out1_18;



  assign BitSet1_out1_16 = Data_Type_Conversion3_out1_13 | 22'sb0000000000000000000001;



  assign if_tmp3_0_out1_17 = (Logical_Operator_out1_19 == 1'b0 ? Data_Type_Conversion3_out1_13 :
              BitSet1_out1_16);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS20_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS20_out1 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS20_out1 <= if_tmp3_0_out1_17;
        end
      end
    end



  assign Constant_out1_18 = 1'b0;



  assign Bit_Concat1_out1_18 = {Delay3_PS20_out1, Constant_out1_18};



  assign Data_Type_Conversion3_out1_14 = Bit_Concat1_out1_18;



  assign bitsll_Q_1_1_out1_14 = Data_Type_Conversion3_out1_14 <<< 8'd1;



  assign BitSet2_out1_14 = bitsll_Q_1_1_out1_14 | 23'sb00000000000000000000001;



  assign R_tmp2_48 = {{9{Data_Type_Conversion1_out1_18[22]}}, Data_Type_Conversion1_out1_18};
  assign R_tmp2_49 = {{9{BitSet2_out1_14[22]}}, BitSet2_out1_14};
  assign R_tmp2_sub_temp_15 = R_tmp2_48 - R_tmp2_49;
  assign R_tmp2_out1_17 = R_tmp2_sub_temp_15[22:0];



  assign Bit_Slice_out1_19 = R_tmp2_out1_17[22];



  assign Logical_Operator_out1_20 =  ~ Bit_Slice_out1_19;



  assign if_tmp3_0_1_out1_18 = (Logical_Operator_out1_20 == 1'b0 ? Data_Type_Conversion1_out1_18 :
              R_tmp2_out1_17);



  assign Bit_Slice2_out1_18 = bitsll_R_1_out1_18[4:0];



  assign Bit_Concat_out1_20 = {if_tmp3_0_1_out1_18, Bit_Slice2_out1_18};



  assign Data_Type_Conversion_out1_19 = Bit_Concat_out1_20;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_PS21_process
      if (i_RST_N == 1'b0) begin
        Delay_PS21_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS21_out1 <= Data_Type_Conversion_out1_19;
        end
      end
    end



  assign bitsll_R_1_out1_19 = Delay_PS21_out1 <<< 8'd1;



  assign Bit_Slice1_out1_19 = bitsll_R_1_out1_19[27:4];



  assign Data_Type_Conversion1_out1_19 = Bit_Slice1_out1_19;



  assign BitSet1_out1_17 = Data_Type_Conversion3_out1_14 | 23'sb00000000000000000000001;



  assign if_tmp3_0_out1_18 = (Logical_Operator_out1_20 == 1'b0 ? Data_Type_Conversion3_out1_14 :
              BitSet1_out1_17);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_PS21_process
      if (i_RST_N == 1'b0) begin
        Delay1_PS21_out1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS21_out1 <= if_tmp3_0_out1_18;
        end
      end
    end



  assign Constant_out1_19 = 1'b0;



  assign Bit_Concat1_out1_19 = {Delay1_PS21_out1, Constant_out1_19};



  assign Data_Type_Conversion3_out1_15 = Bit_Concat1_out1_19;



  assign bitsll_Q_1_1_out1_15 = Data_Type_Conversion3_out1_15 <<< 8'd1;



  assign BitSet2_out1_15 = bitsll_Q_1_1_out1_15 | 24'sb000000000000000000000001;



  assign R_tmp2_51 = {{8{Data_Type_Conversion1_out1_19[23]}}, Data_Type_Conversion1_out1_19};
  assign R_tmp2_52 = {{8{BitSet2_out1_15[23]}}, BitSet2_out1_15};
  assign R_tmp2_sub_temp_16 = R_tmp2_51 - R_tmp2_52;
  assign R_tmp2_out1_18 = R_tmp2_sub_temp_16[23:0];



  assign Bit_Slice_out1_20 = R_tmp2_out1_18[23];



  assign Logical_Operator_out1_21 =  ~ Bit_Slice_out1_20;



  assign if_tmp3_0_1_out1_19 = (Logical_Operator_out1_21 == 1'b0 ? Data_Type_Conversion1_out1_19 :
              R_tmp2_out1_18);



  assign Bit_Slice2_out1_19 = bitsll_R_1_out1_19[3:0];



  assign Bit_Concat_out1_21 = {if_tmp3_0_1_out1_19, Bit_Slice2_out1_19};



  assign Data_Type_Conversion_out1_20 = Bit_Concat_out1_21;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay4_PS22_process
      if (i_RST_N == 1'b0) begin
        Delay4_PS22_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS22_out1 <= Data_Type_Conversion_out1_20;
        end
      end
    end



  assign bitsll_R_1_out1_20 = Delay4_PS22_out1 <<< 8'd1;



  assign Bit_Slice1_out1_20 = bitsll_R_1_out1_20[27:3];



  assign Data_Type_Conversion1_out1_20 = Bit_Slice1_out1_20;



  assign BitSet1_out1_18 = Data_Type_Conversion3_out1_15 | 24'sb000000000000000000000001;



  assign if_tmp3_0_out1_19 = (Logical_Operator_out1_21 == 1'b0 ? Data_Type_Conversion3_out1_15 :
              BitSet1_out1_18);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay5_PS22_process
      if (i_RST_N == 1'b0) begin
        Delay5_PS22_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS22_out1 <= if_tmp3_0_out1_19;
        end
      end
    end



  assign Constant_out1_20 = 1'b0;



  assign Bit_Concat1_out1_20 = {Delay5_PS22_out1, Constant_out1_20};



  assign Data_Type_Conversion3_out1_16 = Bit_Concat1_out1_20;



  assign bitsll_Q_1_1_out1_16 = Data_Type_Conversion3_out1_16 <<< 8'd1;



  assign BitSet2_out1_16 = bitsll_Q_1_1_out1_16 | 25'sb0000000000000000000000001;



  assign R_tmp2_54 = {{7{Data_Type_Conversion1_out1_20[24]}}, Data_Type_Conversion1_out1_20};
  assign R_tmp2_55 = {{7{BitSet2_out1_16[24]}}, BitSet2_out1_16};
  assign R_tmp2_sub_temp_17 = R_tmp2_54 - R_tmp2_55;
  assign R_tmp2_out1_19 = R_tmp2_sub_temp_17[24:0];



  assign Bit_Slice_out1_21 = R_tmp2_out1_19[24];



  assign Logical_Operator_out1_22 =  ~ Bit_Slice_out1_21;



  assign if_tmp3_0_1_out1_20 = (Logical_Operator_out1_22 == 1'b0 ? Data_Type_Conversion1_out1_20 :
              R_tmp2_out1_19);



  assign Bit_Slice2_out1_20 = bitsll_R_1_out1_20[2:0];



  assign Bit_Concat_out1_22 = {if_tmp3_0_1_out1_20, Bit_Slice2_out1_20};



  assign Data_Type_Conversion_out1_21 = Bit_Concat_out1_22;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay6_PS23_process
      if (i_RST_N == 1'b0) begin
        Delay6_PS23_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_PS23_out1 <= Data_Type_Conversion_out1_21;
        end
      end
    end



  assign bitsll_R_1_out1_21 = Delay6_PS23_out1 <<< 8'd1;



  assign Bit_Slice1_out1_21 = bitsll_R_1_out1_21[27:2];



  assign Data_Type_Conversion1_out1_21 = Bit_Slice1_out1_21;



  assign BitSet1_out1_19 = Data_Type_Conversion3_out1_16 | 25'sb0000000000000000000000001;



  assign if_tmp3_0_out1_20 = (Logical_Operator_out1_22 == 1'b0 ? Data_Type_Conversion3_out1_16 :
              BitSet1_out1_19);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay7_PS23_process
      if (i_RST_N == 1'b0) begin
        Delay7_PS23_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_PS23_out1 <= if_tmp3_0_out1_20;
        end
      end
    end



  assign Constant_out1_21 = 1'b0;



  assign Bit_Concat1_out1_21 = {Delay7_PS23_out1, Constant_out1_21};



  assign Data_Type_Conversion3_out1_17 = Bit_Concat1_out1_21;



  assign bitsll_Q_1_1_out1_17 = Data_Type_Conversion3_out1_17 <<< 8'd1;



  assign BitSet2_out1_17 = bitsll_Q_1_1_out1_17 | 26'sb00000000000000000000000001;



  assign R_tmp2_57 = {{6{Data_Type_Conversion1_out1_21[25]}}, Data_Type_Conversion1_out1_21};
  assign R_tmp2_58 = {{6{BitSet2_out1_17[25]}}, BitSet2_out1_17};
  assign R_tmp2_sub_temp_18 = R_tmp2_57 - R_tmp2_58;
  assign R_tmp2_out1_20 = R_tmp2_sub_temp_18[25:0];



  assign Bit_Slice_out1_22 = R_tmp2_out1_20[25];



  assign Logical_Operator_out1_23 =  ~ Bit_Slice_out1_22;



  assign if_tmp3_0_1_out1_21 = (Logical_Operator_out1_23 == 1'b0 ? Data_Type_Conversion1_out1_21 :
              R_tmp2_out1_20);



  assign Bit_Slice2_out1_21 = bitsll_R_1_out1_21[1:0];



  assign Bit_Concat_out1_23 = {if_tmp3_0_1_out1_21, Bit_Slice2_out1_21};



  assign Data_Type_Conversion_out1_22 = Bit_Concat_out1_23;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_PS24_process
      if (i_RST_N == 1'b0) begin
        Delay2_PS24_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS24_out1 <= Data_Type_Conversion_out1_22;
        end
      end
    end



  assign bitsll_R_1_out1_22 = Delay2_PS24_out1 <<< 8'd1;



  assign Bit_Slice1_out1_22 = bitsll_R_1_out1_22[27:1];



  assign Data_Type_Conversion1_out1_22 = Bit_Slice1_out1_22;



  assign BitSet1_out1_20 = Data_Type_Conversion3_out1_17 | 26'sb00000000000000000000000001;



  assign if_tmp3_0_out1_21 = (Logical_Operator_out1_23 == 1'b0 ? Data_Type_Conversion3_out1_17 :
              BitSet1_out1_20);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay3_PS24_process
      if (i_RST_N == 1'b0) begin
        Delay3_PS24_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS24_out1 <= if_tmp3_0_out1_21;
        end
      end
    end



  assign Constant_out1_22 = 1'b0;



  assign Bit_Concat1_out1_22 = {Delay3_PS24_out1, Constant_out1_22};



  assign Data_Type_Conversion3_out1_18 = Bit_Concat1_out1_22;



  assign bitsll_Q_1_1_out1_18 = Data_Type_Conversion3_out1_18 <<< 8'd1;



  assign BitSet2_out1_18 = bitsll_Q_1_1_out1_18 | 27'sb000000000000000000000000001;



  assign R_tmp2_60 = {{5{Data_Type_Conversion1_out1_22[26]}}, Data_Type_Conversion1_out1_22};
  assign R_tmp2_61 = {{5{BitSet2_out1_18[26]}}, BitSet2_out1_18};
  assign R_tmp2_sub_temp_19 = R_tmp2_60 - R_tmp2_61;
  assign R_tmp2_out1_21 = R_tmp2_sub_temp_19[26:0];



  assign Bit_Slice_out1_23 = R_tmp2_out1_21[26];



  assign if_tmp3_0_1_out1_22 = (Bit_Slice_out1_23 == 1'b0 ? R_tmp2_out1_21 :
              Data_Type_Conversion1_out1_22);



  assign Bit_Slice2_out1_22 = bitsll_R_1_out1_22[0];



  assign Bit_Concat_out1_24 = {if_tmp3_0_1_out1_22, Bit_Slice2_out1_22};



  assign Data_Type_Conversion_out1_23 = Bit_Concat_out1_24;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_PS25_process
      if (i_RST_N == 1'b0) begin
        Delay_PS25_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS25_out1 <= Data_Type_Conversion_out1_23;
        end
      end
    end



  assign bitsll_R_1_out1_23 = Delay_PS25_out1 <<< 8'd1;



  assign BitSet1_out1_21 = Data_Type_Conversion3_out1_18 | 27'sb000000000000000000000000001;



  assign if_tmp3_0_out1_22 = (Bit_Slice_out1_23 == 1'b0 ? BitSet1_out1_21 :
              Data_Type_Conversion3_out1_18);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_PS25_process
      if (i_RST_N == 1'b0) begin
        Delay1_PS25_out1 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS25_out1 <= if_tmp3_0_out1_22;
        end
      end
    end



  assign Constant_out1_23 = 1'b0;



  assign Bit_Concat1_out1_23 = {Delay1_PS25_out1, Constant_out1_23};



  assign Data_Type_Conversion3_out1_19 = Bit_Concat1_out1_23;



  assign bitsll_Q_1_out1_3 = Data_Type_Conversion3_out1_19 <<< 8'd1;



  assign BitSet_out1_3 = bitsll_Q_1_out1_3 | 28'sb0000000000000000000000000001;



  assign R_tmp2_63 = {{4{bitsll_R_1_out1_23[27]}}, bitsll_R_1_out1_23};
  assign R_tmp2_64 = {{4{BitSet_out1_3[27]}}, BitSet_out1_3};
  assign R_tmp2_sub_temp_20 = R_tmp2_63 - R_tmp2_64;
  assign R_tmp2_out1_22 = R_tmp2_sub_temp_20[27:0];



  assign Bit_Slice_out1_24 = R_tmp2_out1_22[27];



  assign Logical_Operator_out1_24 =  ~ Bit_Slice_out1_24;



  assign BitSet1_out1_22 = Data_Type_Conversion3_out1_19 | 28'sb0000000000000000000000000001;



  assign if_tmp3_0_out1_23 = (Logical_Operator_out1_24 == 1'b0 ? Data_Type_Conversion3_out1_19 :
              BitSet1_out1_22);



  assign BitSlice_out1_1 = if_tmp3_0_out1_23[23:0];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay9_PS26_process
      if (i_RST_N == 1'b0) begin
        Delay9_PS26_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_PS26_out1 <= BitSlice_out1_1;
        end
      end
    end



  assign BitSlice1_out1 = Delay9_PS26_out1[1];



  assign bitget_Mant_tmp_2_0_out1 = BitSlice1_out1 != 1'b0;



  assign if_tmp3_0_1_out1_23 = (Logical_Operator_out1_24 == 1'b0 ? bitsll_R_1_out1_23 :
              R_tmp2_out1_22);



  assign R_0_out1 = if_tmp3_0_1_out1_23 != 28'sb0000000000000000000000000000;



  assign BitSlice_out1_2 = Delay9_PS26_out1[0];



  assign bitget_Mant_tmp_1_0_out1 = BitSlice_out1_2 != 1'b0;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_PS26_process
      if (i_RST_N == 1'b0) begin
        Delay8_PS26_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_PS26_out1 <= R_0_out1;
        end
      end
    end



  assign alphabitget_Mant_tmp_2_0_out1 = bitget_Mant_tmp_2_0_out1 | Delay8_PS26_out1;



  assign alphabitget_Mant_tmp_1_0_out1 = bitget_Mant_tmp_1_0_out1 & alphabitget_Mant_tmp_2_0_out1;



  assign alpha0_out1_2 = 1'b0;



  assign Bit_Concat_out1_25 = {alpha0_out1_2, Delay9_PS26_out1};



  assign alpha2_out1_1 = 25'b0000000000000000000000010;



  assign Mant_tmp_cast_2_like_Man_1 = {7'b0, Bit_Concat_out1_25};
  assign Mant_tmp_cast_2_like_Man_2 = {7'b0, alpha2_out1_1};
  assign Mant_tmp_cast_2_like_Man_add_temp = Mant_tmp_cast_2_like_Man_1 + Mant_tmp_cast_2_like_Man_2;
  assign Mant_tmp_cast_2_like_Man_out1 = Mant_tmp_cast_2_like_Man_add_temp[24:0];



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_25 :
              Mant_tmp_cast_2_like_Man_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_1_process
      if (i_RST_N == 1'b0) begin
        Delay_out1_1 <= 25'b0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_1 <= if_bitget_Mant_tmp_1_0_out1;
        end
      end
    end



  assign BitSlice2_out1 = Delay_out1_1[24];



  assign bitget_Mant_tmp_Mant_tmp_Word_out1 = BitSlice2_out1 != 1'b0;



  assign C_out1_2 = 8'b01111111;



  assign exp_a_cor_cfType_ExponentBia_1 = {24'b0, Delay3_out1_2};
  assign exp_a_cor_cfType_ExponentBia_2 = {24'b0, C_out1_2};
  assign exp_a_cor_cfType_ExponentBia_add_temp = exp_a_cor_cfType_ExponentBia_1 + exp_a_cor_cfType_ExponentBia_2;
  assign exp_a_cor_cfType_ExponentBia_out1 = exp_a_cor_cfType_ExponentBia_add_temp[8:0];



  assign BitSlice1_out1_1 = exp_a_cor_cfType_ExponentBia_out1[8:1];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= BitSlice1_out1_1;
        end
      end
    end



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay22_PS26_process
      if (i_RST_N == 1'b0) begin
        Delay22_PS26_reg[0] <= 8'b00000000;
        Delay22_PS26_reg[1] <= 8'b00000000;
        Delay22_PS26_reg[2] <= 8'b00000000;
        Delay22_PS26_reg[3] <= 8'b00000000;
        Delay22_PS26_reg[4] <= 8'b00000000;
        Delay22_PS26_reg[5] <= 8'b00000000;
        Delay22_PS26_reg[6] <= 8'b00000000;
        Delay22_PS26_reg[7] <= 8'b00000000;
        Delay22_PS26_reg[8] <= 8'b00000000;
        Delay22_PS26_reg[9] <= 8'b00000000;
        Delay22_PS26_reg[10] <= 8'b00000000;
        Delay22_PS26_reg[11] <= 8'b00000000;
        Delay22_PS26_reg[12] <= 8'b00000000;
        Delay22_PS26_reg[13] <= 8'b00000000;
        Delay22_PS26_reg[14] <= 8'b00000000;
        Delay22_PS26_reg[15] <= 8'b00000000;
        Delay22_PS26_reg[16] <= 8'b00000000;
        Delay22_PS26_reg[17] <= 8'b00000000;
        Delay22_PS26_reg[18] <= 8'b00000000;
        Delay22_PS26_reg[19] <= 8'b00000000;
        Delay22_PS26_reg[20] <= 8'b00000000;
        Delay22_PS26_reg[21] <= 8'b00000000;
        Delay22_PS26_reg[22] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay22_PS26_reg[0] <= Delay22_PS26_reg_next[0];
          Delay22_PS26_reg[1] <= Delay22_PS26_reg_next[1];
          Delay22_PS26_reg[2] <= Delay22_PS26_reg_next[2];
          Delay22_PS26_reg[3] <= Delay22_PS26_reg_next[3];
          Delay22_PS26_reg[4] <= Delay22_PS26_reg_next[4];
          Delay22_PS26_reg[5] <= Delay22_PS26_reg_next[5];
          Delay22_PS26_reg[6] <= Delay22_PS26_reg_next[6];
          Delay22_PS26_reg[7] <= Delay22_PS26_reg_next[7];
          Delay22_PS26_reg[8] <= Delay22_PS26_reg_next[8];
          Delay22_PS26_reg[9] <= Delay22_PS26_reg_next[9];
          Delay22_PS26_reg[10] <= Delay22_PS26_reg_next[10];
          Delay22_PS26_reg[11] <= Delay22_PS26_reg_next[11];
          Delay22_PS26_reg[12] <= Delay22_PS26_reg_next[12];
          Delay22_PS26_reg[13] <= Delay22_PS26_reg_next[13];
          Delay22_PS26_reg[14] <= Delay22_PS26_reg_next[14];
          Delay22_PS26_reg[15] <= Delay22_PS26_reg_next[15];
          Delay22_PS26_reg[16] <= Delay22_PS26_reg_next[16];
          Delay22_PS26_reg[17] <= Delay22_PS26_reg_next[17];
          Delay22_PS26_reg[18] <= Delay22_PS26_reg_next[18];
          Delay22_PS26_reg[19] <= Delay22_PS26_reg_next[19];
          Delay22_PS26_reg[20] <= Delay22_PS26_reg_next[20];
          Delay22_PS26_reg[21] <= Delay22_PS26_reg_next[21];
          Delay22_PS26_reg[22] <= Delay22_PS26_reg_next[22];
        end
      end
    end

  assign Delay22_PS26_out1 = Delay22_PS26_reg[22];
  assign Delay22_PS26_reg_next[0] = Delay1_out1;
  assign Delay22_PS26_reg_next[1] = Delay22_PS26_reg[0];
  assign Delay22_PS26_reg_next[2] = Delay22_PS26_reg[1];
  assign Delay22_PS26_reg_next[3] = Delay22_PS26_reg[2];
  assign Delay22_PS26_reg_next[4] = Delay22_PS26_reg[3];
  assign Delay22_PS26_reg_next[5] = Delay22_PS26_reg[4];
  assign Delay22_PS26_reg_next[6] = Delay22_PS26_reg[5];
  assign Delay22_PS26_reg_next[7] = Delay22_PS26_reg[6];
  assign Delay22_PS26_reg_next[8] = Delay22_PS26_reg[7];
  assign Delay22_PS26_reg_next[9] = Delay22_PS26_reg[8];
  assign Delay22_PS26_reg_next[10] = Delay22_PS26_reg[9];
  assign Delay22_PS26_reg_next[11] = Delay22_PS26_reg[10];
  assign Delay22_PS26_reg_next[12] = Delay22_PS26_reg[11];
  assign Delay22_PS26_reg_next[13] = Delay22_PS26_reg[12];
  assign Delay22_PS26_reg_next[14] = Delay22_PS26_reg[13];
  assign Delay22_PS26_reg_next[15] = Delay22_PS26_reg[14];
  assign Delay22_PS26_reg_next[16] = Delay22_PS26_reg[15];
  assign Delay22_PS26_reg_next[17] = Delay22_PS26_reg[16];
  assign Delay22_PS26_reg_next[18] = Delay22_PS26_reg[17];
  assign Delay22_PS26_reg_next[19] = Delay22_PS26_reg[18];
  assign Delay22_PS26_reg_next[20] = Delay22_PS26_reg[19];
  assign Delay22_PS26_reg_next[21] = Delay22_PS26_reg[20];
  assign Delay22_PS26_reg_next[22] = Delay22_PS26_reg[21];



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay2_2_process
      if (i_RST_N == 1'b0) begin
        Delay2_out1_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_2 <= Delay22_PS26_out1;
        end
      end
    end



  assign alpha1_out1_2 = 8'b00000001;



  assign Exp_1_out1 = Delay22_PS26_out1 + alpha1_out1_2;



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_1_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_1 <= Exp_1_out1;
        end
      end
    end



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (bitget_Mant_tmp_Mant_tmp_Word_out1 == 1'b0 ? Delay2_out1_2 :
              Delay1_out1_1);



  assign C_out1_3 = 8'b00000000;



  assign if_aExponent_0_aMantissa_out1 = (Delay7_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              C_out1_3);



  assign aSign_0_out1 = Delay3_out1 == 1'b0;



  assign aExponent_cfType_Exponent_I_out1_1 = Delay4_out1 == 8'b11111111;



  assign alphaaSign_0_aExponent_out1 = aSign_0_out1 & aExponent_cfType_Exponent_I_out1_1;



  assign alphaaSign_0_aExponent_out1_1 = alphaaSign_0_aExponent_out1 & aMantissa_0_out1;



  assign Logical_Operator_out1_25 = alphaaSign_0_aExponent_out1_1 | alphaaSign_0_aExponent_1_out1;



  assign C_out1_4 = 8'b11111111;



  assign if_aSign_0_aExponent_out1 = (Logical_Operator_out1_25 == 1'b0 ? C_out1_4 :
              Delay4_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay9_process
      if (i_RST_N == 1'b0) begin
        Delay9_reg[0] <= 8'b00000000;
        Delay9_reg[1] <= 8'b00000000;
        Delay9_reg[2] <= 8'b00000000;
        Delay9_reg[3] <= 8'b00000000;
        Delay9_reg[4] <= 8'b00000000;
        Delay9_reg[5] <= 8'b00000000;
        Delay9_reg[6] <= 8'b00000000;
        Delay9_reg[7] <= 8'b00000000;
        Delay9_reg[8] <= 8'b00000000;
        Delay9_reg[9] <= 8'b00000000;
        Delay9_reg[10] <= 8'b00000000;
        Delay9_reg[11] <= 8'b00000000;
        Delay9_reg[12] <= 8'b00000000;
        Delay9_reg[13] <= 8'b00000000;
        Delay9_reg[14] <= 8'b00000000;
        Delay9_reg[15] <= 8'b00000000;
        Delay9_reg[16] <= 8'b00000000;
        Delay9_reg[17] <= 8'b00000000;
        Delay9_reg[18] <= 8'b00000000;
        Delay9_reg[19] <= 8'b00000000;
        Delay9_reg[20] <= 8'b00000000;
        Delay9_reg[21] <= 8'b00000000;
        Delay9_reg[22] <= 8'b00000000;
        Delay9_reg[23] <= 8'b00000000;
        Delay9_reg[24] <= 8'b00000000;
        Delay9_reg[25] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay9_reg[0] <= Delay9_reg_next[0];
          Delay9_reg[1] <= Delay9_reg_next[1];
          Delay9_reg[2] <= Delay9_reg_next[2];
          Delay9_reg[3] <= Delay9_reg_next[3];
          Delay9_reg[4] <= Delay9_reg_next[4];
          Delay9_reg[5] <= Delay9_reg_next[5];
          Delay9_reg[6] <= Delay9_reg_next[6];
          Delay9_reg[7] <= Delay9_reg_next[7];
          Delay9_reg[8] <= Delay9_reg_next[8];
          Delay9_reg[9] <= Delay9_reg_next[9];
          Delay9_reg[10] <= Delay9_reg_next[10];
          Delay9_reg[11] <= Delay9_reg_next[11];
          Delay9_reg[12] <= Delay9_reg_next[12];
          Delay9_reg[13] <= Delay9_reg_next[13];
          Delay9_reg[14] <= Delay9_reg_next[14];
          Delay9_reg[15] <= Delay9_reg_next[15];
          Delay9_reg[16] <= Delay9_reg_next[16];
          Delay9_reg[17] <= Delay9_reg_next[17];
          Delay9_reg[18] <= Delay9_reg_next[18];
          Delay9_reg[19] <= Delay9_reg_next[19];
          Delay9_reg[20] <= Delay9_reg_next[20];
          Delay9_reg[21] <= Delay9_reg_next[21];
          Delay9_reg[22] <= Delay9_reg_next[22];
          Delay9_reg[23] <= Delay9_reg_next[23];
          Delay9_reg[24] <= Delay9_reg_next[24];
          Delay9_reg[25] <= Delay9_reg_next[25];
        end
      end
    end

  assign Delay9_out1 = Delay9_reg[25];
  assign Delay9_reg_next[0] = if_aSign_0_aExponent_out1;
  assign Delay9_reg_next[1] = Delay9_reg[0];
  assign Delay9_reg_next[2] = Delay9_reg[1];
  assign Delay9_reg_next[3] = Delay9_reg[2];
  assign Delay9_reg_next[4] = Delay9_reg[3];
  assign Delay9_reg_next[5] = Delay9_reg[4];
  assign Delay9_reg_next[6] = Delay9_reg[5];
  assign Delay9_reg_next[7] = Delay9_reg[6];
  assign Delay9_reg_next[8] = Delay9_reg[7];
  assign Delay9_reg_next[9] = Delay9_reg[8];
  assign Delay9_reg_next[10] = Delay9_reg[9];
  assign Delay9_reg_next[11] = Delay9_reg[10];
  assign Delay9_reg_next[12] = Delay9_reg[11];
  assign Delay9_reg_next[13] = Delay9_reg[12];
  assign Delay9_reg_next[14] = Delay9_reg[13];
  assign Delay9_reg_next[15] = Delay9_reg[14];
  assign Delay9_reg_next[16] = Delay9_reg[15];
  assign Delay9_reg_next[17] = Delay9_reg[16];
  assign Delay9_reg_next[18] = Delay9_reg[17];
  assign Delay9_reg_next[19] = Delay9_reg[18];
  assign Delay9_reg_next[20] = Delay9_reg[19];
  assign Delay9_reg_next[21] = Delay9_reg[20];
  assign Delay9_reg_next[22] = Delay9_reg[21];
  assign Delay9_reg_next[23] = Delay9_reg[22];
  assign Delay9_reg_next[24] = Delay9_reg[23];
  assign Delay9_reg_next[25] = Delay9_reg[24];



  assign if_aSign_1_aExponent_out1 = (Delay6_out1 == 1'b0 ? if_aExponent_0_aMantissa_out1 :
              Delay9_out1);



  assign Switch6_out1 = (Relational_Operator_relop1 == 1'b0 ? Constant1_out1 :
              if_aSign_1_aExponent_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay1_2_process
      if (i_RST_N == 1'b0) begin
        Delay1_out1_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_2 <= Switch6_out1;
        end
      end
    end



  assign Constant_out1_24 = 23'b00000000000000000000000;



  assign BitSlice3_out1 = Delay_out1_1[23:1];



  assign C_out1_5 = 23'b00000000000000000000000;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 = (bitget_Mant_tmp_Mant_tmp_Word_out1 == 1'b0 ? BitSlice3_out1 :
              C_out1_5);



  assign C1_out1 = 23'b00000000000000000000000;



  assign if_aExponent_0_aMantissa_1_out1 = (Delay7_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 :
              C1_out1);



  assign C1_out1_1 = 23'b10000000000000000000000;



  assign if_aSign_0_aExponent_1_out1 = (Logical_Operator_out1_25 == 1'b0 ? C1_out1_1 :
              Delay5_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay8_process
      if (i_RST_N == 1'b0) begin
        Delay8_reg[0] <= 23'b00000000000000000000000;
        Delay8_reg[1] <= 23'b00000000000000000000000;
        Delay8_reg[2] <= 23'b00000000000000000000000;
        Delay8_reg[3] <= 23'b00000000000000000000000;
        Delay8_reg[4] <= 23'b00000000000000000000000;
        Delay8_reg[5] <= 23'b00000000000000000000000;
        Delay8_reg[6] <= 23'b00000000000000000000000;
        Delay8_reg[7] <= 23'b00000000000000000000000;
        Delay8_reg[8] <= 23'b00000000000000000000000;
        Delay8_reg[9] <= 23'b00000000000000000000000;
        Delay8_reg[10] <= 23'b00000000000000000000000;
        Delay8_reg[11] <= 23'b00000000000000000000000;
        Delay8_reg[12] <= 23'b00000000000000000000000;
        Delay8_reg[13] <= 23'b00000000000000000000000;
        Delay8_reg[14] <= 23'b00000000000000000000000;
        Delay8_reg[15] <= 23'b00000000000000000000000;
        Delay8_reg[16] <= 23'b00000000000000000000000;
        Delay8_reg[17] <= 23'b00000000000000000000000;
        Delay8_reg[18] <= 23'b00000000000000000000000;
        Delay8_reg[19] <= 23'b00000000000000000000000;
        Delay8_reg[20] <= 23'b00000000000000000000000;
        Delay8_reg[21] <= 23'b00000000000000000000000;
        Delay8_reg[22] <= 23'b00000000000000000000000;
        Delay8_reg[23] <= 23'b00000000000000000000000;
        Delay8_reg[24] <= 23'b00000000000000000000000;
        Delay8_reg[25] <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= Delay8_reg_next[0];
          Delay8_reg[1] <= Delay8_reg_next[1];
          Delay8_reg[2] <= Delay8_reg_next[2];
          Delay8_reg[3] <= Delay8_reg_next[3];
          Delay8_reg[4] <= Delay8_reg_next[4];
          Delay8_reg[5] <= Delay8_reg_next[5];
          Delay8_reg[6] <= Delay8_reg_next[6];
          Delay8_reg[7] <= Delay8_reg_next[7];
          Delay8_reg[8] <= Delay8_reg_next[8];
          Delay8_reg[9] <= Delay8_reg_next[9];
          Delay8_reg[10] <= Delay8_reg_next[10];
          Delay8_reg[11] <= Delay8_reg_next[11];
          Delay8_reg[12] <= Delay8_reg_next[12];
          Delay8_reg[13] <= Delay8_reg_next[13];
          Delay8_reg[14] <= Delay8_reg_next[14];
          Delay8_reg[15] <= Delay8_reg_next[15];
          Delay8_reg[16] <= Delay8_reg_next[16];
          Delay8_reg[17] <= Delay8_reg_next[17];
          Delay8_reg[18] <= Delay8_reg_next[18];
          Delay8_reg[19] <= Delay8_reg_next[19];
          Delay8_reg[20] <= Delay8_reg_next[20];
          Delay8_reg[21] <= Delay8_reg_next[21];
          Delay8_reg[22] <= Delay8_reg_next[22];
          Delay8_reg[23] <= Delay8_reg_next[23];
          Delay8_reg[24] <= Delay8_reg_next[24];
          Delay8_reg[25] <= Delay8_reg_next[25];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[25];
  assign Delay8_reg_next[0] = if_aSign_0_aExponent_1_out1;
  assign Delay8_reg_next[1] = Delay8_reg[0];
  assign Delay8_reg_next[2] = Delay8_reg[1];
  assign Delay8_reg_next[3] = Delay8_reg[2];
  assign Delay8_reg_next[4] = Delay8_reg[3];
  assign Delay8_reg_next[5] = Delay8_reg[4];
  assign Delay8_reg_next[6] = Delay8_reg[5];
  assign Delay8_reg_next[7] = Delay8_reg[6];
  assign Delay8_reg_next[8] = Delay8_reg[7];
  assign Delay8_reg_next[9] = Delay8_reg[8];
  assign Delay8_reg_next[10] = Delay8_reg[9];
  assign Delay8_reg_next[11] = Delay8_reg[10];
  assign Delay8_reg_next[12] = Delay8_reg[11];
  assign Delay8_reg_next[13] = Delay8_reg[12];
  assign Delay8_reg_next[14] = Delay8_reg[13];
  assign Delay8_reg_next[15] = Delay8_reg[14];
  assign Delay8_reg_next[16] = Delay8_reg[15];
  assign Delay8_reg_next[17] = Delay8_reg[16];
  assign Delay8_reg_next[18] = Delay8_reg[17];
  assign Delay8_reg_next[19] = Delay8_reg[18];
  assign Delay8_reg_next[20] = Delay8_reg[19];
  assign Delay8_reg_next[21] = Delay8_reg[20];
  assign Delay8_reg_next[22] = Delay8_reg[21];
  assign Delay8_reg_next[23] = Delay8_reg[22];
  assign Delay8_reg_next[24] = Delay8_reg[23];
  assign Delay8_reg_next[25] = Delay8_reg[24];



  assign if_aSign_1_aExponent_1_out1 = (Delay6_out1 == 1'b0 ? if_aExponent_0_aMantissa_1_out1 :
              Delay8_out1);



  assign Switch5_out1 = (Relational_Operator_relop1 == 1'b0 ? Constant_out1_24 :
              if_aSign_1_aExponent_1_out1);



  always @(posedge i_CLK or negedge i_RST_N)
    begin : Delay_2_process
      if (i_RST_N == 1'b0) begin
        Delay_out1_2 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_2 <= Switch5_out1;
        end
      end
    end



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {Delay2_out1, Delay1_out1_2, Delay_out1_2};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_sqrt_single

